{
  "hash": "318cf24d71a057179ebf924ae2373e1a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"From Pandas to Polars\"\nauthor: \"Krishnatheja Vanka\"\ndate: \"2025-05-19\"\ncategories: [code]\nformat:\n  html:\n    code-fold: false\nexecute:\n  echo: true\n  timing: true\njupyter: python3\n---\n\n# üëÅÔ∏è From Pandas to Polars\n\n![](pvp.jpg)\n\nAs datasets grow in size and complexity, performance and efficiency become critical in data processing. While Pandas has long been the go-to library for data manipulation in Python, it can struggle with speed and memory usage, especially on large datasets. Polars, a newer DataFrame library written in Rust, offers a faster, more memory-efficient alternative with support for lazy evaluation and multi-threading.\n\nThis guide explores how to convert Pandas DataFrames to Polars, and highlights key differences in syntax, performance, and functionality. Whether you're looking to speed up your data workflows or just exploring modern tools, understanding the transition from Pandas to Polars is a valuable step.\n\n## Import libraries\n\n::: {#2b53ec60 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nimport pandas as pd\nimport polars as pl\n```\n:::\n\n\n## Create dummy data\n\n::: {#2a60d018 .cell execution_count=2}\n``` {.python .cell-code}\ndata = {'birds': ['Cranes', 'Cranes', 'plovers', 'spoonbills', 'spoonbills', 'Cranes', 'plovers', 'Cranes', 'spoonbills', 'spoonbills'],\n        'age': [3.5, 4, 1.5, np.nan, 6, 3, 5.5, np.nan, 8, 4],\n        'visits': [2, 4, 3, 4, 3, 4, 2, 2, 3, 2],\n        'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']}\n\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n```\n:::\n\n\n## Create Pandas DataFrame\n\n::: {#c7539db7 .cell execution_count=3}\n``` {.python .cell-code}\npandas_df = pd.DataFrame(data, index=labels)\npandas_df\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>birds</th>\n      <th>age</th>\n      <th>visits</th>\n      <th>priority</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>a</th>\n      <td>Cranes</td>\n      <td>3.5</td>\n      <td>2</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>b</th>\n      <td>Cranes</td>\n      <td>4.0</td>\n      <td>4</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>c</th>\n      <td>plovers</td>\n      <td>1.5</td>\n      <td>3</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>d</th>\n      <td>spoonbills</td>\n      <td>NaN</td>\n      <td>4</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>e</th>\n      <td>spoonbills</td>\n      <td>6.0</td>\n      <td>3</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>f</th>\n      <td>Cranes</td>\n      <td>3.0</td>\n      <td>4</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>g</th>\n      <td>plovers</td>\n      <td>5.5</td>\n      <td>2</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>h</th>\n      <td>Cranes</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>i</th>\n      <td>spoonbills</td>\n      <td>8.0</td>\n      <td>3</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>j</th>\n      <td>spoonbills</td>\n      <td>4.0</td>\n      <td>2</td>\n      <td>no</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Create Polars DataFrame\n\n::: {#8095cfab .cell execution_count=4}\n``` {.python .cell-code}\npolars_df = pl.DataFrame(data, schema={\"birds\": pl.Categorical, \"age\": pl.Float64, \"visits\": pl.Int32, \"priority\": pl.Categorical})\npolars_df = polars_df.with_columns(pl.Series(name='index', values=labels))\npolars_df\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (10, 5)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>birds</th><th>age</th><th>visits</th><th>priority</th><th>index</th></tr><tr><td>cat</td><td>f64</td><td>i32</td><td>cat</td><td>str</td></tr></thead><tbody><tr><td>&quot;Cranes&quot;</td><td>3.5</td><td>2</td><td>&quot;yes&quot;</td><td>&quot;a&quot;</td></tr><tr><td>&quot;Cranes&quot;</td><td>4.0</td><td>4</td><td>&quot;yes&quot;</td><td>&quot;b&quot;</td></tr><tr><td>&quot;plovers&quot;</td><td>1.5</td><td>3</td><td>&quot;no&quot;</td><td>&quot;c&quot;</td></tr><tr><td>&quot;spoonbills&quot;</td><td>NaN</td><td>4</td><td>&quot;yes&quot;</td><td>&quot;d&quot;</td></tr><tr><td>&quot;spoonbills&quot;</td><td>6.0</td><td>3</td><td>&quot;no&quot;</td><td>&quot;e&quot;</td></tr><tr><td>&quot;Cranes&quot;</td><td>3.0</td><td>4</td><td>&quot;no&quot;</td><td>&quot;f&quot;</td></tr><tr><td>&quot;plovers&quot;</td><td>5.5</td><td>2</td><td>&quot;no&quot;</td><td>&quot;g&quot;</td></tr><tr><td>&quot;Cranes&quot;</td><td>NaN</td><td>2</td><td>&quot;yes&quot;</td><td>&quot;h&quot;</td></tr><tr><td>&quot;spoonbills&quot;</td><td>8.0</td><td>3</td><td>&quot;no&quot;</td><td>&quot;i&quot;</td></tr><tr><td>&quot;spoonbills&quot;</td><td>4.0</td><td>2</td><td>&quot;no&quot;</td><td>&quot;j&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Display a summary of the basic information about birds DataFrame and its data. \nThe method `describe()` shows different statistical data for numeric columns (like age) and columns with strings or timestamps (like priority, which is treated as a string column in pandas).\nIt is the same for both pandas and polars.\n\n::: {#00cd0b53 .cell execution_count=5}\n``` {.python .cell-code}\npandas_df.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>visits</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>8.000000</td>\n      <td>10.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>4.437500</td>\n      <td>2.900000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.007797</td>\n      <td>0.875595</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.500000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.375000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.000000</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5.625000</td>\n      <td>3.750000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>8.000000</td>\n      <td>4.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#6e8ce180 .cell execution_count=6}\n``` {.python .cell-code}\npolars_df.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (9, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>birds</th><th>age</th><th>visits</th><th>priority</th><th>index</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>&quot;10&quot;</td><td>10.0</td><td>10.0</td><td>&quot;10&quot;</td><td>&quot;10&quot;</td></tr><tr><td>&quot;null_count&quot;</td><td>&quot;0&quot;</td><td>0.0</td><td>0.0</td><td>&quot;0&quot;</td><td>&quot;0&quot;</td></tr><tr><td>&quot;mean&quot;</td><td>null</td><td>NaN</td><td>2.9</td><td>null</td><td>null</td></tr><tr><td>&quot;std&quot;</td><td>null</td><td>NaN</td><td>0.875595</td><td>null</td><td>null</td></tr><tr><td>&quot;min&quot;</td><td>null</td><td>1.5</td><td>2.0</td><td>null</td><td>&quot;a&quot;</td></tr><tr><td>&quot;25%&quot;</td><td>null</td><td>3.5</td><td>2.0</td><td>null</td><td>null</td></tr><tr><td>&quot;50%&quot;</td><td>null</td><td>5.5</td><td>3.0</td><td>null</td><td>null</td></tr><tr><td>&quot;75%&quot;</td><td>null</td><td>8.0</td><td>4.0</td><td>null</td><td>null</td></tr><tr><td>&quot;max&quot;</td><td>null</td><td>8.0</td><td>4.0</td><td>null</td><td>&quot;j&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Print the first 2 rows of the birds dataframe\nThe method `head()` displays the first 5 rows of the DataFrame. It is the same for both pandas and polars. Including a number in the method `head()` will display the first n rows of the DataFrame.\n\n::: {#6a6f1071 .cell execution_count=7}\n``` {.python .cell-code}\npandas_df.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>birds</th>\n      <th>age</th>\n      <th>visits</th>\n      <th>priority</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>a</th>\n      <td>Cranes</td>\n      <td>3.5</td>\n      <td>2</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>b</th>\n      <td>Cranes</td>\n      <td>4.0</td>\n      <td>4</td>\n      <td>yes</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#8ef90ad4 .cell execution_count=8}\n``` {.python .cell-code}\npolars_df.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 5)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>birds</th><th>age</th><th>visits</th><th>priority</th><th>index</th></tr><tr><td>cat</td><td>f64</td><td>i32</td><td>cat</td><td>str</td></tr></thead><tbody><tr><td>&quot;Cranes&quot;</td><td>3.5</td><td>2</td><td>&quot;yes&quot;</td><td>&quot;a&quot;</td></tr><tr><td>&quot;Cranes&quot;</td><td>4.0</td><td>4</td><td>&quot;yes&quot;</td><td>&quot;b&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Display the last 3 rows of the birds dataframe\nThe method `tail()` displays the last 5 rows of the DataFrame. It is the same for both pandas and polars. Including a number in the method `tail()` will display the last n rows of the DataFrame.\n\n::: {#49c041d0 .cell execution_count=9}\n``` {.python .cell-code}\npandas_df.tail(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>birds</th>\n      <th>age</th>\n      <th>visits</th>\n      <th>priority</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>h</th>\n      <td>Cranes</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>i</th>\n      <td>spoonbills</td>\n      <td>8.0</td>\n      <td>3</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>j</th>\n      <td>spoonbills</td>\n      <td>4.0</td>\n      <td>2</td>\n      <td>no</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#d176c4f0 .cell execution_count=10}\n``` {.python .cell-code}\npolars_df.tail(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 5)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>birds</th><th>age</th><th>visits</th><th>priority</th><th>index</th></tr><tr><td>cat</td><td>f64</td><td>i32</td><td>cat</td><td>str</td></tr></thead><tbody><tr><td>&quot;Cranes&quot;</td><td>NaN</td><td>2</td><td>&quot;yes&quot;</td><td>&quot;h&quot;</td></tr><tr><td>&quot;spoonbills&quot;</td><td>8.0</td><td>3</td><td>&quot;no&quot;</td><td>&quot;i&quot;</td></tr><tr><td>&quot;spoonbills&quot;</td><td>4.0</td><td>2</td><td>&quot;no&quot;</td><td>&quot;j&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Select only the 'birds' and 'age' columns from the DataFrame.\n\n::: {#2906de0e .cell execution_count=11}\n``` {.python .cell-code}\npandas_df[['birds', 'age']] \n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>birds</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>a</th>\n      <td>Cranes</td>\n      <td>3.5</td>\n    </tr>\n    <tr>\n      <th>b</th>\n      <td>Cranes</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>c</th>\n      <td>plovers</td>\n      <td>1.5</td>\n    </tr>\n    <tr>\n      <th>d</th>\n      <td>spoonbills</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>e</th>\n      <td>spoonbills</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>f</th>\n      <td>Cranes</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>g</th>\n      <td>plovers</td>\n      <td>5.5</td>\n    </tr>\n    <tr>\n      <th>h</th>\n      <td>Cranes</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>i</th>\n      <td>spoonbills</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>j</th>\n      <td>spoonbills</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#8cc88484 .cell execution_count=12}\n``` {.python .cell-code}\npolars_df.select(['birds', 'age'])\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (10, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>birds</th><th>age</th></tr><tr><td>cat</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Cranes&quot;</td><td>3.5</td></tr><tr><td>&quot;Cranes&quot;</td><td>4.0</td></tr><tr><td>&quot;plovers&quot;</td><td>1.5</td></tr><tr><td>&quot;spoonbills&quot;</td><td>NaN</td></tr><tr><td>&quot;spoonbills&quot;</td><td>6.0</td></tr><tr><td>&quot;Cranes&quot;</td><td>3.0</td></tr><tr><td>&quot;plovers&quot;</td><td>5.5</td></tr><tr><td>&quot;Cranes&quot;</td><td>NaN</td></tr><tr><td>&quot;spoonbills&quot;</td><td>8.0</td></tr><tr><td>&quot;spoonbills&quot;</td><td>4.0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}