{
  "hash": "9047d6f3c54def3709cd2a4377518884",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"From Pandas to Polars\"\nauthor: \"Krishnatheja Vanka\"\ndate: \"2025-04-05\"\ncategories: [code, tutorial, advanced]\nformat:\n  html:\n    code-fold: false\nexecute:\n  echo: true\n  timing: true\njupyter: python3\n---\n\n# 🐼 From Pandas to Polars 🐻‍❄️\n\n![](pvp.jpg)\n\nAs datasets grow in size and complexity, performance and efficiency become critical in data processing. While Pandas has long been the go-to library for data manipulation in Python, it can struggle with speed and memory usage, especially on large datasets. Polars, a newer DataFrame library written in Rust, offers a faster, more memory-efficient alternative with support for lazy evaluation and multi-threading.\n\nThis guide explores how to convert Pandas DataFrames to Polars, and highlights key differences in syntax, performance, and functionality. Whether you're looking to speed up your data workflows or just exploring modern tools, understanding the transition from Pandas to Polars is a valuable step.\n\n## Table of Contents\n1. [Installation and Setup](#installation-and-setup)\n2. [Creating DataFrames](#creating-dataframes)\n3. [Basic Operations](#basic-operations)\n4. [Filtering Data](#filtering-data)\n5. [Grouping and Aggregation](#grouping-and-aggregation)\n6. [Joining/Merging DataFrames](#joiningmerging-dataframes)\n7. [Handling Missing Values](#handling-missing-values)\n8. [String Operations](#string-operations)\n9. [Time Series Operations](#time-series-operations) \n10. [Performance Comparison](#performance-comparison)\n11. [API Philosophy Differences](#api-philosophy-differences)\n12. [Migration Guide](#migration-guide)\n\n## Installation and Setup\n\n### Pandas\n\n::: {#5ca20f91 .cell execution_count=1}\n``` {.python .cell-code}\n# Import pandas\nimport pandas as pd\n```\n:::\n\n\n### Polars\n\n::: {#5d9b2029 .cell execution_count=2}\n``` {.python .cell-code}\n# Import polars\nimport polars as pl\n```\n:::\n\n\n## Creating DataFrames\n\n### From dictionaries\n\n#### Pandas\n\n::: {#01e8eef5 .cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Create DataFrame from dictionary\ndata = {\n    'name': ['Alice', 'Bob', 'Charlie', 'David'],\n    'age': [25, 30, 35, 40],\n    'city': ['New York', 'Los Angeles', 'Chicago', 'Houston']\n}\ndf_pd = pd.DataFrame(data)\nprint(df_pd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      name  age         city\n0    Alice   25     New York\n1      Bob   30  Los Angeles\n2  Charlie   35      Chicago\n3    David   40      Houston\n```\n:::\n:::\n\n\n#### Polars\n\n::: {#12910929 .cell execution_count=4}\n``` {.python .cell-code}\nimport polars as pl\n\n# Create DataFrame from dictionary\ndata = {\n    'name': ['Alice', 'Bob', 'Charlie', 'David'],\n    'age': [25, 30, 35, 40],\n    'city': ['New York', 'Los Angeles', 'Chicago', 'Houston']\n}\ndf_pl = pl.DataFrame(data)\nprint(df_pl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (4, 3)\n┌─────────┬─────┬─────────────┐\n│ name    ┆ age ┆ city        │\n│ ---     ┆ --- ┆ ---         │\n│ str     ┆ i64 ┆ str         │\n╞═════════╪═════╪═════════════╡\n│ Alice   ┆ 25  ┆ New York    │\n│ Bob     ┆ 30  ┆ Los Angeles │\n│ Charlie ┆ 35  ┆ Chicago     │\n│ David   ┆ 40  ┆ Houston     │\n└─────────┴─────┴─────────────┘\n```\n:::\n:::\n\n\n## Basic Operations\n\n### Selecting columns\n\n#### Pandas\n\n::: {#9bb004bb .cell execution_count=5}\n``` {.python .cell-code}\n# Select a single column (returns Series)\nseries = df_pd['name']\n\n# Select multiple columns\ndf_subset = df_pd[['name', 'age']]\n```\n:::\n\n\n#### Polars\n\n::: {#fb695e7d .cell execution_count=6}\n``` {.python .cell-code}\n# Select a single column (returns Series)\nseries = df_pl['name']\n# Alternative method\nseries = df_pl.select(pl.col('name')).to_series()\n\n# Select multiple columns\ndf_subset = df_pl.select(['name', 'age'])\n# Alternative method\ndf_subset = df_pl.select(pl.col(['name', 'age']))\n```\n:::\n\n\n### Adding a new column\n\n#### Pandas\n\n::: {#ad3956ba .cell execution_count=7}\n``` {.python .cell-code}\n# Add a new column\ndf_pd['is_adult'] = df_pd['age'] >= 18\n\n# Using assign (creates a new DataFrame)\ndf_pd = df_pd.assign(age_squared=df_pd['age'] ** 2)\n```\n:::\n\n\n#### Polars\n\n::: {#c349e78f .cell execution_count=8}\n``` {.python .cell-code}\n# Add a new column\ndf_pl = df_pl.with_columns(\n    pl.when(pl.col('age') >= 18).then(True).otherwise(False).alias('is_adult')\n)\n\n# Creating derived columns \ndf_pl = df_pl.with_columns(\n    (pl.col('age') ** 2).alias('age_squared')\n)\n\n# Multiple columns at once\ndf_pl = df_pl.with_columns([\n    pl.col('age').is_null().alias('age_is_null'),\n    (pl.col('age') * 2).alias('age_doubled')\n])\n```\n:::\n\n\n### Basic statistics\n\n#### Pandas\n\n::: {#b95eedb5 .cell execution_count=9}\n``` {.python .cell-code}\n# Get summary statistics\nsummary = df_pd.describe()\n\n# Individual statistics\nmean_age = df_pd['age'].mean()\nmedian_age = df_pd['age'].median()\nmin_age = df_pd['age'].min()\nmax_age = df_pd['age'].max()\n```\n:::\n\n\n#### Polars\n\n::: {#244a5f9a .cell execution_count=10}\n``` {.python .cell-code}\n# Get summary statistics\nsummary = df_pl.describe()\n\n# Individual statistics\nmean_age = df_pl.select(pl.col('age').mean()).item()\nmedian_age = df_pl.select(pl.col('age').median()).item()\nmin_age = df_pl.select(pl.col('age').min()).item()\nmax_age = df_pl.select(pl.col('age').max()).item()\n```\n:::\n\n\n## Filtering Data\n\n### Simple filtering\n\n#### Pandas\n\n::: {#71d53ffd .cell execution_count=11}\n``` {.python .cell-code}\n# Filter rows\nadults = df_pd[df_pd['age'] >= 18]\n\n# Multiple conditions\nfiltered = df_pd[(df_pd['age'] > 30) & (df_pd['city'] == 'Chicago')]\n```\n:::\n\n\n#### Polars\n\n::: {#6a7f3454 .cell execution_count=12}\n``` {.python .cell-code}\n# Filter rows\nadults = df_pl.filter(pl.col('age') >= 18)\n\n# Multiple conditions\nfiltered = df_pl.filter((pl.col('age') > 30) & (pl.col('city') == 'Chicago'))\n```\n:::\n\n\n### Complex filtering\n\n#### Pandas\n\n::: {#15fef8dd .cell execution_count=13}\n``` {.python .cell-code}\n# Filter with OR conditions\ndf_filtered = df_pd[(df_pd['city'] == 'New York') | (df_pd['city'] == 'Chicago')]\n\n# Using isin\ncities = ['New York', 'Chicago']\ndf_filtered = df_pd[df_pd['city'].isin(cities)]\n\n# String contains\ndf_filtered = df_pd[df_pd['name'].str.contains('li')]\n```\n:::\n\n\n#### Polars\n\n::: {#f8c53ab5 .cell execution_count=14}\n``` {.python .cell-code}\n# Filter with OR conditions\ndf_filtered = df_pl.filter((pl.col('city') == 'New York') | (pl.col('city') == 'Chicago'))\n\n# Using is_in\ncities = ['New York', 'Chicago']\ndf_filtered = df_pl.filter(pl.col('city').is_in(cities))\n\n# String contains\ndf_filtered = df_pl.filter(pl.col('name').str.contains('li'))\n```\n:::\n\n\n## Grouping and Aggregation\n\n### Basic groupby\n\n#### Pandas\n\n::: {#5e3db365 .cell execution_count=15}\n``` {.python .cell-code}\n# Group by one column and aggregate\ncity_stats = df_pd.groupby('city').agg({\n    'age': ['mean', 'min', 'max', 'count']\n})\n\n# Reset index for flat DataFrame\ncity_stats = city_stats.reset_index()\n```\n:::\n\n\n#### Polars\n\n::: {#77008d5b .cell execution_count=16}\n``` {.python .cell-code}\n# Group by one column and aggregate\ncity_stats = df_pl.group_by('city').agg([\n    pl.col('age').mean().alias('age_mean'),\n    pl.col('age').min().alias('age_min'),\n    pl.col('age').max().alias('age_max'),\n    pl.col('age').count().alias('age_count')\n])\n```\n:::\n\n\n## Joining/Merging DataFrames\n\n### Inner Join\n\n#### Pandas\n\n::: {#3b1c2cc5 .cell execution_count=17}\n``` {.python .cell-code}\n# Create another DataFrame\nemployee_data = {\n    'emp_id': [1, 2, 3, 4],\n    'name': ['Alice', 'Bob', 'Charlie', 'David'],\n    'dept': ['HR', 'IT', 'Finance', 'IT']\n}\nemployee_df_pd = pd.DataFrame(employee_data)\n\nsalary_data = {\n    'emp_id': [1, 2, 3, 5],\n    'salary': [50000, 60000, 70000, 80000]\n}\nsalary_df_pd = pd.DataFrame(salary_data)\n\n# Inner join\nmerged_df = employee_df_pd.merge(\n    salary_df_pd,\n    on='emp_id',\n    how='inner'\n)\n```\n:::\n\n\n#### Polars\n\n::: {#238acc8e .cell execution_count=18}\n``` {.python .cell-code}\n# Create another DataFrame\nemployee_data = {\n    'emp_id': [1, 2, 3, 4],\n    'name': ['Alice', 'Bob', 'Charlie', 'David'],\n    'dept': ['HR', 'IT', 'Finance', 'IT']\n}\nemployee_df_pl = pl.DataFrame(employee_data)\n\nsalary_data = {\n    'emp_id': [1, 2, 3, 5],\n    'salary': [50000, 60000, 70000, 80000]\n}\nsalary_df_pl = pl.DataFrame(salary_data)\n\n# Inner join\nmerged_df = employee_df_pl.join(\n    salary_df_pl,\n    on='emp_id',\n    how='inner'\n)\n```\n:::\n\n\n### Different join types\n\n#### Pandas\n\n::: {#fdc60a8b .cell execution_count=19}\n``` {.python .cell-code}\n# Left join\nleft_join = employee_df_pd.merge(salary_df_pd, on='emp_id', how='left')\n\n# Right join\nright_join = employee_df_pd.merge(salary_df_pd, on='emp_id', how='right')\n\n# Outer join\nouter_join = employee_df_pd.merge(salary_df_pd, on='emp_id', how='outer')\n```\n:::\n\n\n#### Polars\n\n::: {#4a600c84 .cell execution_count=20}\n``` {.python .cell-code}\n# Left join\nleft_join = employee_df_pl.join(salary_df_pl, on='emp_id', how='left')\n\n# Right join\nright_join = employee_df_pl.join(salary_df_pl, on='emp_id', how='right')\n\n# Outer join\nouter_join = employee_df_pl.join(salary_df_pl, on='emp_id', how='full')\n```\n:::\n\n\n## Handling Missing Values\n\n### Checking for missing values\n\n#### Pandas\n\n::: {#b168c402 .cell execution_count=21}\n``` {.python .cell-code}\n# Check for missing values\nmissing_count = df_pd.isnull().sum()\n\n# Check if any column has missing values\nhas_missing = df_pd.isnull().any().any()\n```\n:::\n\n\n#### Polars\n\n::: {#5dfb4c5a .cell execution_count=22}\n``` {.python .cell-code}\n# Check for missing values\nmissing_count = df_pl.null_count()\n\n# Check if specific column has missing values\nhas_missing = df_pl.select(pl.col('age').is_null().any()).item()\n```\n:::\n\n\n### Handling missing values\n\n#### Pandas\n\n::: {#4de89d79 .cell execution_count=23}\n``` {.python .cell-code}\n# Drop rows with any missing values\ndf_pd_clean = df_pd.dropna()\n\n# Fill missing values\ndf_pd_filled = df_pd.fillna({\n    'age': 0,\n    'city': 'Unknown'\n})\n\n# Forward fill\ndf_pd_ffill = df_pd.ffill()\n```\n:::\n\n\n#### Polars\n\n::: {#05208b79 .cell execution_count=24}\n``` {.python .cell-code}\n# Drop rows with any missing values\ndf_pl_clean = df_pl.drop_nulls()\n\n# Fill missing values\ndf_pl_filled = df_pl.with_columns([\n    pl.col('age').fill_null(0),\n    pl.col('city').fill_null('Unknown')\n])\n\n# Forward fill\ndf_pl_ffill = df_pl.with_columns([\n    pl.col('age').fill_null(strategy='forward'),\n    pl.col('city').fill_null(strategy='forward')\n])\n```\n:::\n\n\n## String Operations\n\n### Basic string operations\n\n#### Pandas\n\n::: {#a380b27e .cell execution_count=25}\n``` {.python .cell-code}\n# Convert to uppercase\ndf_pd['name_upper'] = df_pd['name'].str.upper()\n\n# Get string length\ndf_pd['name_length'] = df_pd['name'].str.len()\n\n# Extract substring\ndf_pd['name_first_char'] = df_pd['name'].str[0]\n\n# Replace substrings\ndf_pd['city_replaced'] = df_pd['city'].str.replace('New', 'Old')\n```\n:::\n\n\n#### Polars\n\n::: {#1a3eae31 .cell execution_count=26}\n``` {.python .cell-code}\n# Convert to uppercase\ndf_pl = df_pl.with_columns(pl.col('name').str.to_uppercase().alias('name_upper'))\n\n# Get string length\ndf_pl = df_pl.with_columns(pl.col('name').str.len_chars().alias('name_length'))\n\n# Extract substring \ndf_pl = df_pl.with_columns(pl.col('name').str.slice(0, 1).alias('name_first_char'))\n\n# Replace substrings\ndf_pl = df_pl.with_columns(pl.col('city').str.replace('New', 'Old').alias('city_replaced'))\n```\n:::\n\n\n### Advanced string operations\n\n#### Pandas\n\n::: {#b13af87d .cell execution_count=27}\n``` {.python .cell-code}\n# Split string\ndf_pd['first_word'] = df_pd['city'].str.split(' ').str[0]\n\n# Pattern matching\nhas_new = df_pd['city'].str.contains('New')\n\n# Extract with regex\ndf_pd['extracted'] = df_pd['city'].str.extract(r'(\\w+)\\s')\n```\n:::\n\n\n#### Polars\n\n::: {#1964d3ff .cell execution_count=28}\n``` {.python .cell-code}\n# Split string\ndf_pl = df_pl.with_columns(\n    pl.col('city').str.split(' ').list.get(0).alias('first_word')\n)\n\n# Pattern matching\ndf_pl = df_pl.with_columns(\n    pl.col('city').str.contains('New').alias('has_new')\n)\n\n# Extract with regex\ndf_pl = df_pl.with_columns(\n    pl.col('city').str.extract(r'(\\w+)\\s').alias('extracted')\n)\n```\n:::\n\n\n## Time Series Operations\n\n### Date parsing and creation\n\n#### Pandas\n\n::: {#dfd3a99f .cell execution_count=29}\n``` {.python .cell-code}\n# Create DataFrame with dates\ndates_pd = pd.DataFrame({\n    'date_str': ['2023-01-01', '2023-02-15', '2023-03-30']\n})\n\n# Parse dates\ndates_pd['date'] = pd.to_datetime(dates_pd['date_str'])\n\n# Extract components\ndates_pd['year'] = dates_pd['date'].dt.year\ndates_pd['month'] = dates_pd['date'].dt.month\ndates_pd['day'] = dates_pd['date'].dt.day\ndates_pd['weekday'] = dates_pd['date'].dt.day_name()\n```\n:::\n\n\n#### Polars\n\n::: {#9d6687c6 .cell execution_count=30}\n``` {.python .cell-code}\n# Create DataFrame with dates\ndates_pl = pl.DataFrame({\n    'date_str': ['2023-01-01', '2023-02-15', '2023-03-30']\n})\n\n# Parse dates\ndates_pl = dates_pl.with_columns(\n    pl.col('date_str').str.strptime(pl.Datetime, '%Y-%m-%d').alias('date')\n)\n\n# Extract components\ndates_pl = dates_pl.with_columns([\n    pl.col('date').dt.year().alias('year'),\n    pl.col('date').dt.month().alias('month'),\n    pl.col('date').dt.day().alias('day'),\n    pl.col('date').dt.weekday().replace_strict({\n        0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', \n        3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'\n    }, default=\"unknown\").alias('weekday')\n])\n```\n:::\n\n\n### Date arithmetic\n\n#### Pandas\n\n::: {#abe1c920 .cell execution_count=31}\n``` {.python .cell-code}\n# Add days\ndates_pd['next_week'] = dates_pd['date'] + pd.Timedelta(days=7)\n\n# Date difference\ndate_range = pd.date_range(start='2023-01-01', end='2023-01-10')\ndf_dates = pd.DataFrame({'date': date_range})\ndf_dates['days_since_start'] = (df_dates['date'] - df_dates['date'].min()).dt.days\n```\n:::\n\n\n#### Polars\n\n::: {#61be1691 .cell execution_count=32}\n``` {.python .cell-code}\n# Add days\ndates_pl = dates_pl.with_columns(\n    (pl.col('date') + pl.duration(days=7)).alias('next_week')\n)\n\n# Date difference\ndate_range = pd.date_range(start='2023-01-01', end='2023-01-10')  # Using pandas to generate range\ndf_dates = pl.DataFrame({'date': date_range})\ndf_dates = df_dates.with_columns(\n    (pl.col('date') - pl.col('date').min()).dt.total_days().alias('days_since_start')\n)\n```\n:::\n\n\n## Performance Comparison\n\nThis section demonstrates performance differences between pandas and polars for a large dataset operation.\n\n::: {#8b11fefe .cell execution_count=33}\n``` {.python .cell-code}\nimport pandas as pd\nimport polars as pl\nimport time\nimport numpy as np\n\n# Generate a large dataset (10 million rows)\nn = 10_000_000\ndata = {\n    'id': np.arange(n),\n    'value': np.random.randn(n),\n    'group': np.random.choice(['A', 'B', 'C', 'D'], n)\n}\n\n# Convert to pandas DataFrame\ndf_pd = pd.DataFrame(data)\n\n# Convert to polars DataFrame\ndf_pl = pl.DataFrame(data)\n\n# Benchmark: Group by and calculate mean, min, max\nprint(\"Running pandas groupby...\")\nstart = time.time()\nresult_pd = df_pd.groupby('group').agg({\n    'value': ['mean', 'min', 'max', 'count']\n})\npd_time = time.time() - start\nprint(f\"Pandas time: {pd_time:.4f} seconds\")\n\nprint(\"Running polars groupby...\")\nstart = time.time()\nresult_pl = df_pl.group_by('group').agg([\n    pl.col('value').mean().alias('value_mean'),\n    pl.col('value').min().alias('value_min'),\n    pl.col('value').max().alias('value_max'),\n    pl.col('value').count().alias('value_count')\n])\npl_time = time.time() - start\nprint(f\"Polars time: {pl_time:.4f} seconds\")\n\nprint(f\"Polars is {pd_time / pl_time:.2f}x faster\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning pandas groupby...\nPandas time: 0.2209 seconds\nRunning polars groupby...\nPolars time: 0.0703 seconds\nPolars is 3.14x faster\n```\n:::\n:::\n\n\nTypically, for operations like this, Polars will be 3-10x faster than pandas, especially as data sizes increase. The performance gap widens further with more complex operations that can benefit from query optimization.\n\n## API Philosophy Differences\n\nPandas and Polars differ in several fundamental aspects:\n\n### 1. Eager vs. Lazy Execution\n\n**Pandas** uses eager execution by default:\n\n\n\n**Polars** supports both eager and lazy execution:\n\n\n\n### 2. Method Chaining vs. Assignment\n\n**Pandas** often uses assignment operations:\n\n::: {#2872e4a1 .cell execution_count=36}\n``` {.python .cell-code}\n# Many pandas operations use in-place assignment\npd_df['new_col'] = pd_df['new_col'] * 2\npd_df['new_col'] = pd_df['new_col'].fillna(0)\n\n# Some operations return new DataFrames\npd_df = pd_df.sort_values('new_col')\n```\n:::\n\n\n**Polars** consistently uses method chaining:\n\n::: {#c8fc0dd6 .cell execution_count=37}\n``` {.python .cell-code}\n# All operations return new DataFrames and can be chained\npl_df = (pl_df\n    .with_columns((pl.col('new_col') * 2).alias('new_col'))\n    .with_columns(pl.col('new_col').fill_null(0))\n    .sort('new_col')\n)\n```\n:::\n\n\n### 3. Expression API vs. Direct References\n\n**Pandas** directly references columns:\n\n::: {#f1bd8ddb .cell execution_count=38}\n``` {.python .cell-code}\npd_df['result'] = pd_df['age'] + pd_df['new_col']\nfiltered = pd_df[pd_df['age'] > pd_df['age'].mean()]\n```\n:::\n\n\n**Polars** uses an expression API:\n\n::: {#15125300 .cell execution_count=39}\n``` {.python .cell-code}\npl_df = pl_df.with_columns(\n    (pl.col('age') + pl.col('new_col')).alias('result')\n)\nfiltered = pl_df.filter(pl.col('age') > pl.col('age').mean())\n```\n:::\n\n\n## Migration Guide\n\nIf you're transitioning from pandas to polars, here are key mappings between common operations:\n\n| Operation | Pandas | Polars |\n|-----------|--------|--------|\n| Read CSV | `pd.read_csv('file.csv')` | `pl.read_csv('file.csv')` |\n| Select columns | `df[['col1', 'col2']]` | `df.select(['col1', 'col2'])` |\n| Add column | `df['new'] = df['col1'] * 2` | `df.with_columns((pl.col('col1') * 2).alias('new'))` |\n| Filter rows | `df[df['col'] > 5]` | `df.filter(pl.col('col') > 5)` |\n| Sort | `df.sort_values('col')` | `df.sort('col')` |\n| Group by | `df.groupby('col').agg({'val': 'sum'})` | `df.group_by('col').agg(pl.col('val').sum())` |\n| Join | `df1.merge(df2, on='key')` | `df1.join(df2, on='key')` |\n| Fill NA | `df.fillna(0)` | `df.fill_null(0)` |\n| Drop NA | `df.dropna()` | `df.drop_nulls()` |\n| Rename | `df.rename(columns={'a': 'b'})` | `df.rename({'a': 'b'})` |\n| Unique values | `df['col'].unique()` | `df.select(pl.col('col').unique())` |\n| Value counts | `df['col'].value_counts()` | `df.group_by('col').count()` |\n\n### Key Tips for Migration\n\n1. **Think in expressions**: Use `pl.col()` to reference columns in operations\n2. **Embrace method chaining**: String operations together instead of intermediate variables\n3. **Try lazy execution**: For complex operations, use `pl.scan_csv()` and lazy operations\n4. **Use with_columns()**: Instead of direct assignment, use with_columns for adding/modifying columns\n5. **Learn the expression functions**: Many operations like string manipulation use different syntax\n\n### When to Keep Using Pandas\n\nDespite Polars' advantages, pandas might still be preferred when:\n\n- Working with existing codebases heavily dependent on pandas\n- Using specialized libraries that only support pandas (some visualization tools)\n- Dealing with very small datasets where performance isn't critical\n- Using pandas-specific features without polars equivalents\n- Working with time series data that benefits from pandas' specialized functionality\n\n## Conclusion\n\nPolars offers significant performance improvements and a more consistent API compared to pandas, particularly for large datasets and complex operations. While the syntax differences require some adjustment, the benefits in speed and memory efficiency make it a compelling choice for modern data analysis workflows.\n\nBoth libraries have their place in the Python data ecosystem. Pandas remains the more mature option with broader ecosystem compatibility, while Polars represents the future of high-performance data processing. For new projects dealing with large datasets, Polars is increasingly becoming the recommended choice.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}