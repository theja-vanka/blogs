{
  "hash": "8e47f814d7cf22d58abb51b8ff883745",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python Data Visualization: Matplotlib vs Seaborn vs Altair\"\nauthor: \"Krishnatheja Vanka\"\ndate: \"2025-04-12\"\ncategories: [code, tutorial, beginner]\nformat:\n  html:\n    code-fold: false\nexecute:\n  echo: true\n  timing: true\njupyter: python3\n---\n\n# Python Data Visualization: Matplotlib vs Seaborn vs Altair\n\n![](dataviz.jpg)\n\nThis guide compares three popular Python data visualization libraries: Matplotlib, Seaborn, and Altair (Vega-Altair). Each library has its own strengths, weaknesses, and ideal use cases. This comparison will help you choose the right tool for your specific visualization needs.\n\n## Quick Reference Comparison\n\n| Feature | Matplotlib | Seaborn | Altair |\n|---------|------------|---------|--------|\n| **Release Year** | 2003 | 2013 | 2016 |\n| **Foundation** | Standalone | Built on Matplotlib | Based on Vega-Lite |\n| **Philosophy** | Imperative | Statistical | Declarative |\n| **Abstraction Level** | Low | Medium | High |\n| **Learning Curve** | Steep | Moderate | Gentle |\n| **Code Verbosity** | High | Medium | Low |\n| **Customization** | Extensive | Good | Limited |\n| **Statistical Integration** | Manual | Built-in | Good |\n| **Interactive Features** | Limited | Limited | Excellent |\n| **Performance with Large Data** | Good | Moderate | Limited |\n| **Community & Resources** | Extensive | Good | Growing |\n\n## Matplotlib\n\nMatplotlib is the foundational plotting library in Python's data visualization ecosystem.\n\n### Strengths:\n- **Fine-grained control**: Almost every aspect of a visualization can be customized\n- **Versatility**: Can create virtually any type of static plot\n- **Maturity**: Extensive documentation and community support\n- **Ecosystem integration**: Many libraries integrate with or build upon Matplotlib\n- **Performance**: Handles large datasets well\n\n### Weaknesses:\n- **Verbose syntax**: Requires many lines of code for complex visualizations\n- **Steep learning curve**: Many functions and parameters to learn\n- **Default aesthetics**: Basic default styling (though this has improved)\n- **Limited interactivity**: Primarily designed for static plots\n\n### Example Code:\n\n::: {#b201f4e2 .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Plot data\nax.plot(x, y, label='Sine Wave')\n\n# Add grid, legend, title and labels\nax.grid(True)\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Simple Sine Wave Plot')\nax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){}\n:::\n:::\n\n\n### When to use Matplotlib:\n- You need complete control over every aspect of your visualization\n- You're creating complex, publication-quality figures\n- You're working with specialized plot types not available in higher-level libraries\n- You need to integrate with many other Python libraries\n- You're working with large datasets\n\n## Seaborn\n\nSeaborn is a statistical visualization library built on top of Matplotlib.\n\n### Strengths:\n- **Aesthetic defaults**: Beautiful out-of-the-box styling\n- **Statistical integration**: Built-in support for statistical visualizations\n- **Dataset awareness**: Works well with pandas DataFrames\n- **Simplicity**: Fewer lines of code than Matplotlib for common plots\n- **High-level functions**: Specialized plots like `lmplot`, `catplot`, etc.\n\n### Weaknesses:\n- **Limited customization**: Some advanced customizations require falling back to Matplotlib\n- **Performance**: Can be slower with very large datasets\n- **Restricted scope**: Focused on statistical visualization, not general-purpose plotting\n\n### Example Code:\n\n::: {#57ca5f0d .cell execution_count=2}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, size=len(x))\ndata = pd.DataFrame({'x': x, 'y': y})\n\n# Set the aesthetic style\nsns.set_theme(style=\"whitegrid\")\n\n# Create the plot\nplt.figure(figsize=(8, 4))\nsns.lineplot(data=data, x='x', y='y', label='Noisy Sine Wave')\nsns.regplot(data=data, x='x', y='y', scatter=False, label='Regression Line')\n\n# Add title and labels\nplt.title('Seaborn Line Plot with Regression')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n### When to use Seaborn:\n- You want attractive visualizations with minimal code\n- You're performing statistical analysis\n- You're working with pandas DataFrames\n- You're creating common statistical plots (distributions, relationships, categorical plots)\n- You want the power of Matplotlib with a simpler interface\n\n## Altair (Vega-Altair)\n\nAltair is a declarative statistical visualization library based on Vega-Lite.\n\n### Strengths:\n- **Declarative approach**: Focus on what to visualize, not how to draw it\n- **Concise syntax**: Very readable, clear code\n- **Layered grammar of graphics**: Intuitive composition of plots\n- **Interactive visualizations**: Built-in support for interactive features\n- **JSON output**: Visualizations can be saved as JSON specifications\n\n### Weaknesses:\n- **Performance limitations**: Not ideal for very large datasets (>5000 points)\n- **Limited customization**: Less fine-grained control than Matplotlib\n- **Learning curve**: Different paradigm from traditional plotting libraries\n- **Browser dependency**: Uses JavaScript rendering for advanced features\n\n### Example Code:\n\n::: {#9463cc5f .cell execution_count=3}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, size=len(x))\ndata = pd.DataFrame({'x': x, 'y': y})\n\n# Create a simple scatter plot with interactive tooltips\nchart = alt.Chart(data).mark_circle().encode(\n    x='x',\n    y='y',\n    tooltip=['x', 'y']\n).properties(\n    width=600,\n    height=300,\n    title='Interactive Altair Scatter Plot'\n).interactive()\n\n# Add a regression line\nregression = alt.Chart(data).transform_regression(\n    'x', 'y'\n).mark_line(color='red').encode(\n    x='x',\n    y='y'\n)\n\n# Combine the plots\nfinal_chart = chart + regression\n\n# Display the chart\nfinal_chart\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n\n<style>\n  #altair-viz-991288cc63af46c985cf5f7ce0db3def.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-991288cc63af46c985cf5f7ce0db3def.vega-embed details,\n  #altair-viz-991288cc63af46c985cf5f7ce0db3def.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-991288cc63af46c985cf5f7ce0db3def\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-991288cc63af46c985cf5f7ce0db3def\") {\n      outputDiv = document.getElementById(\"altair-viz-991288cc63af46c985cf5f7ce0db3def\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"layer\": [{\"mark\": {\"type\": \"circle\"}, \"encoding\": {\"tooltip\": [{\"field\": \"x\", \"type\": \"quantitative\"}, {\"field\": \"y\", \"type\": \"quantitative\"}], \"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"name\": \"view_1\", \"title\": \"Interactive Altair Scatter Plot\"}, {\"mark\": {\"type\": \"line\", \"color\": \"red\"}, \"encoding\": {\"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"transform\": [{\"on\": \"x\", \"regression\": \"y\"}]}], \"data\": {\"name\": \"data-a68cd2a2b02b07a41274159a148035cb\"}, \"height\": 300, \"params\": [{\"name\": \"param_1\", \"select\": {\"type\": \"interval\", \"encodings\": [\"x\", \"y\"]}, \"bind\": \"scales\", \"views\": [\"view_1\"]}], \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-a68cd2a2b02b07a41274159a148035cb\": [{\"x\": 0.0, \"y\": 0.08599555254665323}, {\"x\": 0.10101010101010101, \"y\": -0.0825322843751585}, {\"x\": 0.20202020202020202, \"y\": 0.028029523334910128}, {\"x\": 0.30303030303030304, \"y\": 0.3374004538428441}, {\"x\": 0.40404040404040403, \"y\": 0.351513531180247}, {\"x\": 0.5050505050505051, \"y\": 0.17564741804467116}, {\"x\": 0.6060606060606061, \"y\": 0.6082726123440473}, {\"x\": 0.7070707070707071, \"y\": 0.7976003288398059}, {\"x\": 0.8080808080808081, \"y\": 1.0302076449350577}, {\"x\": 0.9090909090909091, \"y\": 1.0491502144266516}, {\"x\": 1.0101010101010102, \"y\": 0.7767882588043444}, {\"x\": 1.1111111111111112, \"y\": 0.7343556443481873}, {\"x\": 1.2121212121212122, \"y\": 1.3663434750537014}, {\"x\": 1.3131313131313131, \"y\": 0.6996223184311934}, {\"x\": 1.4141414141414141, \"y\": 1.1992413694011583}, {\"x\": 1.5151515151515151, \"y\": 1.0903952758230149}, {\"x\": 1.6161616161616161, \"y\": 0.5955109244384138}, {\"x\": 1.7171717171717171, \"y\": 1.226559924358292}, {\"x\": 1.8181818181818181, \"y\": 0.9894287142857736}, {\"x\": 1.9191919191919191, \"y\": 1.0937976494387518}, {\"x\": 2.0202020202020203, \"y\": 0.9909616778046039}, {\"x\": 2.121212121212121, \"y\": 0.5486538546698758}, {\"x\": 2.2222222222222223, \"y\": 0.7385031674518114}, {\"x\": 2.323232323232323, \"y\": 0.7886933494601726}, {\"x\": 2.4242424242424243, \"y\": 0.44271305108228554}, {\"x\": 2.525252525252525, \"y\": 0.7264067393439045}, {\"x\": 2.6262626262626263, \"y\": 0.4587757052746641}, {\"x\": 2.727272727272727, \"y\": 0.6367378105342483}, {\"x\": 2.8282828282828283, \"y\": 0.30274141439670005}, {\"x\": 2.929292929292929, \"y\": 0.3191131606299096}, {\"x\": 3.0303030303030303, \"y\": 0.08586205408234963}, {\"x\": 3.131313131313131, \"y\": 0.30466531430053645}, {\"x\": 3.2323232323232323, \"y\": -0.0100650724026205}, {\"x\": 3.3333333333333335, \"y\": -0.2933885298426692}, {\"x\": 3.4343434343434343, \"y\": -0.3448073567098059}, {\"x\": 3.5353535353535355, \"y\": -0.06840366015961119}, {\"x\": 3.6363636363636362, \"y\": 0.009846742924283003}, {\"x\": 3.7373737373737375, \"y\": -0.6620061271023907}, {\"x\": 3.8383838383838382, \"y\": -0.4433331067366062}, {\"x\": 3.9393939393939394, \"y\": -0.8461973632127648}, {\"x\": 4.040404040404041, \"y\": -0.6962419776513206}, {\"x\": 4.141414141414141, \"y\": -1.0155299993283744}, {\"x\": 4.242424242424242, \"y\": -1.048698547728485}, {\"x\": 4.343434343434343, \"y\": -1.1166567301029242}, {\"x\": 4.444444444444445, \"y\": -0.7906059638362486}, {\"x\": 4.545454545454545, \"y\": -0.42195076869623893}, {\"x\": 4.646464646464646, \"y\": -1.064379745842767}, {\"x\": 4.747474747474747, \"y\": -0.6649194820627069}, {\"x\": 4.848484848484849, \"y\": -1.3013224098310163}, {\"x\": 4.94949494949495, \"y\": -0.7377884458141388}, {\"x\": 5.05050505050505, \"y\": -1.1072608374284862}, {\"x\": 5.151515151515151, \"y\": -0.7245465418964845}, {\"x\": 5.252525252525253, \"y\": -0.5582207358908446}, {\"x\": 5.353535353535354, \"y\": -1.1291415529636197}, {\"x\": 5.454545454545454, \"y\": -0.5836985018948602}, {\"x\": 5.555555555555555, \"y\": -0.741564886102789}, {\"x\": 5.656565656565657, \"y\": -0.6199166825141978}, {\"x\": 5.757575757575758, \"y\": -0.2655971801999445}, {\"x\": 5.858585858585858, \"y\": -0.44361270682902915}, {\"x\": 5.959595959595959, \"y\": -0.4442373526765798}, {\"x\": 6.0606060606060606, \"y\": -0.2737817522810478}, {\"x\": 6.161616161616162, \"y\": -0.4244787195363806}, {\"x\": 6.262626262626262, \"y\": -0.09567126722880204}, {\"x\": 6.363636363636363, \"y\": 0.486787450604526}, {\"x\": 6.4646464646464645, \"y\": 0.39829643724846875}, {\"x\": 6.565656565656566, \"y\": 0.4998252554112791}, {\"x\": 6.666666666666667, \"y\": 0.63549806886001}, {\"x\": 6.767676767676767, \"y\": 0.5996442441759264}, {\"x\": 6.8686868686868685, \"y\": 0.26685566966961843}, {\"x\": 6.96969696969697, \"y\": 0.6038077229425285}, {\"x\": 7.070707070707071, \"y\": 0.43903713466346045}, {\"x\": 7.171717171717171, \"y\": 0.9130582954130668}, {\"x\": 7.2727272727272725, \"y\": 0.8324348628672106}, {\"x\": 7.373737373737374, \"y\": 1.0906301059831023}, {\"x\": 7.474747474747475, \"y\": 1.042740909445485}, {\"x\": 7.575757575757575, \"y\": 0.9366185182951553}, {\"x\": 7.6767676767676765, \"y\": 1.0583883382537025}, {\"x\": 7.777777777777778, \"y\": 1.0388641377942374}, {\"x\": 7.878787878787879, \"y\": 0.6599739246846597}, {\"x\": 7.979797979797979, \"y\": 0.7150032959879002}, {\"x\": 8.080808080808081, \"y\": 1.117825049900933}, {\"x\": 8.181818181818182, \"y\": 0.7999002958226433}, {\"x\": 8.282828282828282, \"y\": 0.8535675670384482}, {\"x\": 8.383838383838384, \"y\": 0.6943745689728935}, {\"x\": 8.484848484848484, \"y\": 0.6997985090535054}, {\"x\": 8.585858585858587, \"y\": 0.947288669299146}, {\"x\": 8.686868686868687, \"y\": 1.0463395859750129}, {\"x\": 8.787878787878787, \"y\": 0.7054839987550716}, {\"x\": 8.88888888888889, \"y\": 0.3572270384737287}, {\"x\": 8.98989898989899, \"y\": 0.35313997739284914}, {\"x\": 9.09090909090909, \"y\": -0.037191744881865496}, {\"x\": 9.191919191919192, \"y\": 0.34050670840077824}, {\"x\": 9.292929292929292, \"y\": 0.2143404100519911}, {\"x\": 9.393939393939394, \"y\": -0.160222887470564}, {\"x\": 9.494949494949495, \"y\": 0.11072709527542676}, {\"x\": 9.595959595959595, \"y\": -0.010803185739693355}, {\"x\": 9.696969696969697, \"y\": -0.16158458056736485}, {\"x\": 9.797979797979798, \"y\": -0.3704549118161501}, {\"x\": 9.8989898989899, \"y\": -0.08792953228286016}, {\"x\": 10.0, \"y\": -0.37144578613531676}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### When to use Altair:\n- You want interactive visualizations\n- You prefer a declarative approach to visualization\n- You're working with small to medium-sized datasets\n- You want to publish visualizations on the web\n- You appreciate a consistent grammar of graphics\n\n## Common Visualization Types Comparison\n\n### Scatter Plot\n\n**Matplotlib:**\n\n::: {#d794ed88 .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.randn(100)\ny = np.random.randn(100)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y, alpha=0.7)\nplt.title('Matplotlib Scatter Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#ccfdb3ff .cell execution_count=5}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100)\n})\n\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=data, x='x', y='y', alpha=0.7)\nplt.title('Seaborn Scatter Plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){}\n:::\n:::\n\n\n**Altair:**\n\n::: {#9a398785 .cell execution_count=6}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100)\n})\n\nalt.Chart(data).mark_circle(opacity=0.7).encode(\n    x='x',\n    y='y'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Scatter Plot'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n\n<style>\n  #altair-viz-b42b2251fa444ff5a680a721c408dbca.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-b42b2251fa444ff5a680a721c408dbca.vega-embed details,\n  #altair-viz-b42b2251fa444ff5a680a721c408dbca.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-b42b2251fa444ff5a680a721c408dbca\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-b42b2251fa444ff5a680a721c408dbca\") {\n      outputDiv = document.getElementById(\"altair-viz-b42b2251fa444ff5a680a721c408dbca\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-ef50bce3738583dea5efc19e3a0fbdaf\"}, \"mark\": {\"type\": \"circle\", \"opacity\": 0.7}, \"encoding\": {\"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Scatter Plot\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-ef50bce3738583dea5efc19e3a0fbdaf\": [{\"x\": 0.1333458423003645, \"y\": -0.6843404532399536}, {\"x\": -0.6129596019502714, \"y\": -0.24378350118625328}, {\"x\": -0.5000576665772445, \"y\": -0.34336191774850366}, {\"x\": -0.33071031938681894, \"y\": -0.6240698849518684}, {\"x\": -1.2782133940165044, \"y\": -0.40367698517034206}, {\"x\": -0.6489110508668844, \"y\": -0.2822725140186332}, {\"x\": -0.6882355685415323, \"y\": -1.391210873996331}, {\"x\": -0.4939896951134309, \"y\": 0.7305260209092319}, {\"x\": 0.715666086938573, \"y\": 0.6627906600235068}, {\"x\": 1.0267297486500873, \"y\": -0.4828635418353931}, {\"x\": 1.1274407811073281, \"y\": 0.668510085380697}, {\"x\": 0.3131939542537566, \"y\": -0.8415135979320734}, {\"x\": -2.3413004977206544, \"y\": 0.9560755136401972}, {\"x\": 0.19956799820864038, \"y\": -0.6680795885506723}, {\"x\": 0.720003587292082, \"y\": -0.024812176860089}, {\"x\": -0.47034900807717084, \"y\": 0.6437641784457027}, {\"x\": -0.5325361072619967, \"y\": 0.5305020812960302}, {\"x\": 0.5751866495446077, \"y\": -0.7830825515359205}, {\"x\": -0.6657157935692191, \"y\": -0.5628168479013835}, {\"x\": 0.3566966152538134, \"y\": -0.7251585683328607}, {\"x\": -1.3175776016245107, \"y\": 0.09266358099733284}, {\"x\": -0.08853888724768309, \"y\": 1.0625485214648762}, {\"x\": 2.2033570511652165, \"y\": -1.0512812081405498}, {\"x\": 1.1211633817173339, \"y\": 0.29964906294492794}, {\"x\": -1.337445268422847, \"y\": -2.677172657011043}, {\"x\": -0.35791899278096695, \"y\": -1.6974579528332836}, {\"x\": 0.477328794769249, \"y\": -0.5480436527025769}, {\"x\": 1.3935477547856678, \"y\": 0.09108472768807882}, {\"x\": -0.8219683646872423, \"y\": 0.03087904005457905}, {\"x\": -3.147431450051876, \"y\": 0.4712526757057429}, {\"x\": 0.032381388437283366, \"y\": 0.6286959969476233}, {\"x\": 0.3733182124184041, \"y\": -0.31609816521896383}, {\"x\": -0.18213411147939598, \"y\": 0.2660191676409133}, {\"x\": 0.28244952379143656, \"y\": -1.3040806118910955}, {\"x\": -0.36025441641460637, \"y\": -1.357401547490354}, {\"x\": 1.438682755062432, \"y\": -0.40951639287879604}, {\"x\": 0.23617702028151222, \"y\": 0.2674759456952805}, {\"x\": -1.5099461599331119, \"y\": -0.8937888282762134}, {\"x\": 0.25432637412482545, \"y\": 0.3905979737269198}, {\"x\": 1.1872215313216368, \"y\": 0.9714042201545855}, {\"x\": -1.3822366144686162, \"y\": -0.8767045888341871}, {\"x\": -0.10487001641099714, \"y\": -0.6437527868505984}, {\"x\": -1.2515111295746548, \"y\": 1.2940389500988845}, {\"x\": -0.9468271616646128, \"y\": -0.5350494167373484}, {\"x\": 0.45353997579274, \"y\": -0.22963798264275398}, {\"x\": -0.11869779776584297, \"y\": 2.8051184972313563}, {\"x\": 1.3566032861992063, \"y\": -0.2635179101894791}, {\"x\": -0.5108873062735578, \"y\": 0.5830313298128521}, {\"x\": 1.6629353299952463, \"y\": 0.356658680077591}, {\"x\": 1.4577664569291136, \"y\": -0.36750147169383224}, {\"x\": -0.3043791825136253, \"y\": 0.7193868830536553}, {\"x\": -2.2882337601600504, \"y\": -0.6199123740268516}, {\"x\": -0.13332005522396534, \"y\": -1.4450578015630215}, {\"x\": -1.2770554889424461, \"y\": 1.7607414338488763}, {\"x\": -0.004017541323799316, \"y\": -0.7607419524438139}, {\"x\": 1.3559977052410748, \"y\": 0.32220470176994437}, {\"x\": -0.5100445330872265, \"y\": -2.064655838976932}, {\"x\": -1.1677522141245633, \"y\": -0.2995034119353761}, {\"x\": -0.44076534305020465, \"y\": -0.0721430234501823}, {\"x\": 0.49651838468782084, \"y\": -0.947521532867988}, {\"x\": -1.346346528292027, \"y\": -1.17714028500833}, {\"x\": 0.6464351145348587, \"y\": -0.34786456507240254}, {\"x\": 0.30766412756046846, \"y\": -0.9590960431673496}, {\"x\": 0.9686362661164515, \"y\": -0.504318936479937}, {\"x\": 0.15000024009602514, \"y\": -0.5662708183437244}, {\"x\": -1.789453450262167, \"y\": 0.9261652865534918}, {\"x\": 0.525021077721105, \"y\": 1.6211584925553781}, {\"x\": 2.232426794123667, \"y\": -1.155824662163229}, {\"x\": -1.1406787230794948, \"y\": -0.07268785051110661}, {\"x\": 0.020847556000493785, \"y\": -0.20909186200711888}, {\"x\": 1.6635662179021327, \"y\": -0.07136267108690504}, {\"x\": 0.6267828892277596, \"y\": -2.1885125158268934}, {\"x\": 1.9906897730190678, \"y\": 1.1390075372888424}, {\"x\": -1.44832618188345, \"y\": 0.7834523509681789}, {\"x\": 0.35059876171234383, \"y\": -0.46538760160898995}, {\"x\": -0.3633668680271126, \"y\": -1.1259205498900906}, {\"x\": -0.5275422205304583, \"y\": -0.6325310837067057}, {\"x\": 0.10623140444830648, \"y\": 0.38137656035426776}, {\"x\": -0.7585584898488072, \"y\": 0.4935874016294339}, {\"x\": -0.11839195277486805, \"y\": -1.0008255493973814}, {\"x\": -0.7091428492712334, \"y\": 0.42292275250719197}, {\"x\": -0.09327399226248219, \"y\": -0.43138099510861927}, {\"x\": 0.3090799313680288, \"y\": -0.4660394847950206}, {\"x\": 0.839520095084681, \"y\": -1.5259618015291123}, {\"x\": -0.6228165598188689, \"y\": -0.10053296255305538}, {\"x\": -1.7910588351085035, \"y\": 0.8709364345189472}, {\"x\": 0.7743404460144101, \"y\": -0.3842771203623755}, {\"x\": -0.12578654517103727, \"y\": 1.0805666198954595}, {\"x\": 0.6778456730994538, \"y\": 1.5341210256974889}, {\"x\": 1.6172376897531744, \"y\": -0.1810043002637774}, {\"x\": -0.9356566039728331, \"y\": 0.08357963590643992}, {\"x\": -0.16150235797758836, \"y\": -1.2202098349896493}, {\"x\": 0.3069226399346322, \"y\": -1.6590107417392943}, {\"x\": -1.7335693247770578, \"y\": -0.8236738420223468}, {\"x\": -1.2028508362696528, \"y\": -0.6910583528799916}, {\"x\": 1.4462298872329924, \"y\": 0.8804714911225029}, {\"x\": 1.0800711437493025, \"y\": -0.2328927757930653}, {\"x\": 0.01908548038235986, \"y\": -0.2286230885144102}, {\"x\": -0.5629992390499746, \"y\": 0.04823378608682543}, {\"x\": 1.3426381947558144, \"y\": 0.9751120031382744}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Histogram\n\n**Matplotlib:**\n\n::: {#17e660cb .cell execution_count=7}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\n\nplt.figure(figsize=(8, 6))\nplt.hist(data, bins=30, alpha=0.7, edgecolor='black')\nplt.title('Matplotlib Histogram')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#6f652b74 .cell execution_count=8}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\n\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(8, 6))\nsns.histplot(data=data, bins=30, kde=True)\nplt.title('Seaborn Histogram with KDE')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n**Altair:**\n\n::: {#3006688e .cell execution_count=9}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({'value': np.random.randn(1000)})\n\nalt.Chart(data).mark_bar().encode(\n    alt.X('value', bin=alt.Bin(maxbins=30)),\n    y='count()'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Histogram'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n\n<style>\n  #altair-viz-656ea03a9c4449ecad82850f7516dda9.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-656ea03a9c4449ecad82850f7516dda9.vega-embed details,\n  #altair-viz-656ea03a9c4449ecad82850f7516dda9.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-656ea03a9c4449ecad82850f7516dda9\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-656ea03a9c4449ecad82850f7516dda9\") {\n      outputDiv = document.getElementById(\"altair-viz-656ea03a9c4449ecad82850f7516dda9\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-fff8b53bd56992e647d98a713b7a52cc\"}, \"mark\": {\"type\": \"bar\"}, \"encoding\": {\"x\": {\"bin\": {\"maxbins\": 30}, \"field\": \"value\", \"type\": \"quantitative\"}, \"y\": {\"aggregate\": \"count\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Histogram\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-fff8b53bd56992e647d98a713b7a52cc\": [{\"value\": 0.4649643282220833}, {\"value\": -1.5614322161903536}, {\"value\": -1.524824977020941}, {\"value\": 0.15737033405048617}, {\"value\": 0.2842601716678349}, {\"value\": -0.25168416364955487}, {\"value\": 1.0944400070959384}, {\"value\": 1.2560562946968856}, {\"value\": -0.22255392460962328}, {\"value\": -1.396361714635959}, {\"value\": -0.7207873981274091}, {\"value\": -0.5749475063444562}, {\"value\": -1.9225522246889184}, {\"value\": -0.9764680772018016}, {\"value\": -0.480753811582185}, {\"value\": -0.6452437218973434}, {\"value\": -1.2729189748417122}, {\"value\": -0.9114702837753298}, {\"value\": -0.8924812776091677}, {\"value\": -1.545909325839852}, {\"value\": -0.7554120945047775}, {\"value\": -1.4231617171158244}, {\"value\": -1.475671836244674}, {\"value\": 0.8408315145698606}, {\"value\": 0.7260638379061121}, {\"value\": -0.3092582976980858}, {\"value\": 0.06641000201389567}, {\"value\": 1.2751828015874387}, {\"value\": 0.24241031093505527}, {\"value\": -1.9572891753707284}, {\"value\": -0.07485020185585181}, {\"value\": 0.4736769903482221}, {\"value\": 1.0166778100465261}, {\"value\": -0.17225329387601446}, {\"value\": -0.25344842099374415}, {\"value\": -0.0981227160131984}, {\"value\": 1.8010674648674811}, {\"value\": 0.37437322590002525}, {\"value\": -1.124814978964996}, {\"value\": 1.3486788945486832}, {\"value\": 1.843801417903376}, {\"value\": 0.08817007455499165}, {\"value\": 0.35798825220799557}, {\"value\": -0.45778918438063965}, {\"value\": 0.44974983849600153}, {\"value\": -0.9740308563588224}, {\"value\": 0.3273758446023569}, {\"value\": -1.3965660170884162}, {\"value\": -0.08540279038024848}, {\"value\": -0.5985572389605069}, {\"value\": 0.7769656645208575}, {\"value\": -0.7781952555327075}, {\"value\": 1.7205908264983543}, {\"value\": 0.2604489397087357}, {\"value\": 1.7403526416058988}, {\"value\": -0.8842828674185932}, {\"value\": 0.05484135885369003}, {\"value\": -2.4549850947139333}, {\"value\": -0.24977519720065153}, {\"value\": 1.3323271742625427}, {\"value\": 0.12054666321523232}, {\"value\": -0.6373778915748642}, {\"value\": -0.035008302188838006}, {\"value\": -0.07459366241655771}, {\"value\": 0.10389263157823636}, {\"value\": 0.66855942441079}, {\"value\": 0.1339183636885424}, {\"value\": -0.2015865608284436}, {\"value\": -0.8030378515898006}, {\"value\": -1.4884944731376482}, {\"value\": 0.3372280055959414}, {\"value\": 0.42953325672817794}, {\"value\": 0.2139632459351499}, {\"value\": 0.7595025082838839}, {\"value\": -1.277841638658648}, {\"value\": 0.311661576685091}, {\"value\": -1.0927781888475745}, {\"value\": 0.17653969304572623}, {\"value\": -0.21284530173720673}, {\"value\": -0.3725697209442417}, {\"value\": -0.33925750510584163}, {\"value\": 0.21909174868865136}, {\"value\": -0.0563952513153645}, {\"value\": -1.6183631194159185}, {\"value\": -0.8951561063469651}, {\"value\": -0.922926960677427}, {\"value\": 0.22356410529098053}, {\"value\": 2.953031144508849}, {\"value\": -1.0779964200956254}, {\"value\": 0.4275401996694662}, {\"value\": -0.36640181465293875}, {\"value\": -0.9666945077142288}, {\"value\": -1.3115173794092776}, {\"value\": -1.0871704165057163}, {\"value\": 0.0774213151385582}, {\"value\": -1.3335624679690303}, {\"value\": 0.3098023653410409}, {\"value\": -0.7843759097424117}, {\"value\": -0.38162787035734874}, {\"value\": 0.9877497550382345}, {\"value\": 0.2631596155088292}, {\"value\": 0.24977878982372578}, {\"value\": -0.08291274180491054}, {\"value\": 1.1125415647425934}, {\"value\": -1.4368857397830703}, {\"value\": 0.06663571574903032}, {\"value\": 0.5738222787728514}, {\"value\": 0.2815088910479973}, {\"value\": 1.3112743973674166}, {\"value\": 0.6462096178207913}, {\"value\": -1.2994855278656878}, {\"value\": -0.013566310434230448}, {\"value\": 1.3150717961875644}, {\"value\": 0.5729451636911568}, {\"value\": -0.23888975033156007}, {\"value\": -0.3501840513955933}, {\"value\": 0.14155255393369737}, {\"value\": -0.6723302249721185}, {\"value\": -0.9618137235850183}, {\"value\": -0.8643191689049046}, {\"value\": 1.2535904549860142}, {\"value\": -0.27212958793137904}, {\"value\": 0.6086990753549759}, {\"value\": 0.826004530767481}, {\"value\": -0.05638864858648822}, {\"value\": 0.9966183124911553}, {\"value\": -0.8918883676911904}, {\"value\": 0.03410185340622461}, {\"value\": 0.0006630968097339246}, {\"value\": 0.7787079925107232}, {\"value\": -0.23803290139033315}, {\"value\": -1.7103179050269948}, {\"value\": -0.1284234615454283}, {\"value\": -1.6997562335862078}, {\"value\": 1.0062700921537853}, {\"value\": -0.187848451802551}, {\"value\": -0.8058169197644042}, {\"value\": 0.5529199617583974}, {\"value\": -0.09646005321909032}, {\"value\": -0.13424770652437834}, {\"value\": -0.17539472621058336}, {\"value\": -1.1238208883516878}, {\"value\": -0.4859293302363719}, {\"value\": -0.5421354811284012}, {\"value\": -0.7594424608043107}, {\"value\": 0.32349956087482695}, {\"value\": 0.7656511699707753}, {\"value\": -0.794591909511331}, {\"value\": -0.969100093126762}, {\"value\": 0.30550431596613203}, {\"value\": 0.036271269457955085}, {\"value\": -1.4506320309955854}, {\"value\": -1.2320287829443108}, {\"value\": -0.3186267386539628}, {\"value\": 0.15325835619014194}, {\"value\": -1.961398202301388}, {\"value\": 0.004530194653951274}, {\"value\": -0.9238439068622195}, {\"value\": 1.1754165348261023}, {\"value\": -0.2640835714988466}, {\"value\": -0.49292790093938305}, {\"value\": -1.5976650132810992}, {\"value\": 0.6192895049204707}, {\"value\": 0.2707782543009128}, {\"value\": 0.8894986007542001}, {\"value\": -0.3939225772934531}, {\"value\": -0.5984700874565339}, {\"value\": -0.29719761565005054}, {\"value\": -1.183148750775815}, {\"value\": -0.66514140520637}, {\"value\": -2.254262282955983}, {\"value\": 1.5576529914577821}, {\"value\": -1.6185096117062483}, {\"value\": 0.44695938574738675}, {\"value\": -0.41745767508043724}, {\"value\": -1.1248914575874476}, {\"value\": 0.019695525982465607}, {\"value\": -0.45013416980150406}, {\"value\": -0.5792023796303438}, {\"value\": 0.07363613067022827}, {\"value\": -0.660414001998095}, {\"value\": 0.42442368566942484}, {\"value\": -1.8631361363717251}, {\"value\": 1.9503993754761473}, {\"value\": -1.0812879099309898}, {\"value\": 0.9419413580245518}, {\"value\": 0.16224080491750614}, {\"value\": 0.029422909467248338}, {\"value\": -0.2207156903064334}, {\"value\": 0.1017408570862034}, {\"value\": -0.727808393280349}, {\"value\": -1.571702356139894}, {\"value\": -0.09063096784795568}, {\"value\": 0.15548702236596595}, {\"value\": 0.7681387232151881}, {\"value\": 0.15679801858415732}, {\"value\": -0.39165693488461534}, {\"value\": 0.5249396712595615}, {\"value\": -0.008880028007243263}, {\"value\": -0.8939539714158389}, {\"value\": 0.6244956076478005}, {\"value\": -1.2991195736712966}, {\"value\": -0.34563474860524057}, {\"value\": -1.5844567473659144}, {\"value\": -0.17621058560802422}, {\"value\": -0.6391742689588202}, {\"value\": -0.13579654292310547}, {\"value\": -0.9158145545393844}, {\"value\": 0.042318582532461166}, {\"value\": 0.17600008851512774}, {\"value\": -0.4010331033268837}, {\"value\": 0.4946944072672734}, {\"value\": -0.3688980979323415}, {\"value\": -0.265219604704147}, {\"value\": 2.109237410328138}, {\"value\": 0.2278417698276534}, {\"value\": -0.638119009696287}, {\"value\": 1.6537840869422942}, {\"value\": 0.6260744632968891}, {\"value\": 1.8619671580496446}, {\"value\": 0.08164139129803781}, {\"value\": -0.517952804126231}, {\"value\": -0.14646314607291075}, {\"value\": -1.2406493478272687}, {\"value\": 1.9985064432264876}, {\"value\": -0.2979388235832243}, {\"value\": -0.831338874950475}, {\"value\": -0.8240394331236426}, {\"value\": -0.010618589387853603}, {\"value\": -1.2240484780296244}, {\"value\": -0.3919222751616419}, {\"value\": 0.8537886482745349}, {\"value\": 0.12470174662426305}, {\"value\": -0.800743558254042}, {\"value\": -0.508462864728113}, {\"value\": 0.2907489809422422}, {\"value\": 0.2912132695688988}, {\"value\": 1.7221571470151877}, {\"value\": 1.1100327689199054}, {\"value\": -1.310531558280945}, {\"value\": 0.08292294319408526}, {\"value\": -0.6395403539716094}, {\"value\": 0.5053857218563841}, {\"value\": 1.078998207586627}, {\"value\": 0.727430552947859}, {\"value\": 0.4782002016070665}, {\"value\": 1.2561459238919073}, {\"value\": -0.2546251152673256}, {\"value\": -0.7449147919245692}, {\"value\": -0.1457288694825607}, {\"value\": -1.3891482588658146}, {\"value\": -0.18006295503765643}, {\"value\": -1.5705101380041009}, {\"value\": -0.8679106559266435}, {\"value\": 0.26353516975026875}, {\"value\": 0.30538041692089446}, {\"value\": 1.755507614244332}, {\"value\": 1.1486933343256847}, {\"value\": 0.38811802779561233}, {\"value\": -2.184397774224836}, {\"value\": -0.13838459646965215}, {\"value\": 0.5179930556173276}, {\"value\": -0.7060718267392961}, {\"value\": -1.6641692609365826}, {\"value\": 1.0518852111557817}, {\"value\": 0.47353742907733914}, {\"value\": -0.4581390655240129}, {\"value\": -1.1786057780903958}, {\"value\": -0.6084020684385474}, {\"value\": -2.0057560419703373}, {\"value\": 1.734547908494108}, {\"value\": 0.20144766655790394}, {\"value\": 0.10239990472972436}, {\"value\": 1.3625914469824296}, {\"value\": 0.09331079668341245}, {\"value\": 0.7991799533358637}, {\"value\": -1.8389890318195519}, {\"value\": 1.5959415095970917}, {\"value\": 0.592948829613816}, {\"value\": 0.49957944124608505}, {\"value\": -0.3902170014642547}, {\"value\": -0.654139276744304}, {\"value\": 1.1371446577873616}, {\"value\": 1.2265754195965168}, {\"value\": -1.0255021242832776}, {\"value\": 0.35042799031308397}, {\"value\": 0.33888828432157686}, {\"value\": -0.43699419507515486}, {\"value\": 0.7457320350057903}, {\"value\": -1.0733268616269505}, {\"value\": 1.0538661937978897}, {\"value\": 0.3338071417677269}, {\"value\": 1.311978492210816}, {\"value\": -0.2579002300974384}, {\"value\": 2.329391091844036}, {\"value\": 0.8916121779527271}, {\"value\": -1.6785307643610243}, {\"value\": -0.8324131003942256}, {\"value\": -1.703092247812487}, {\"value\": -0.8718339757160976}, {\"value\": 2.0390583422985724}, {\"value\": -0.9832492125072738}, {\"value\": -0.5989103536444953}, {\"value\": 0.8828790319604845}, {\"value\": 1.1440646174545936}, {\"value\": 0.2172811472792016}, {\"value\": 0.01976246381043535}, {\"value\": 0.6017424875983867}, {\"value\": 2.2780677705261816}, {\"value\": 0.20120109349277282}, {\"value\": 0.9756725690345862}, {\"value\": 0.4603685543775816}, {\"value\": -0.07724609221877884}, {\"value\": 1.5996601588627692}, {\"value\": -1.7327035495350707}, {\"value\": -0.0788421731957914}, {\"value\": -1.0939905763232871}, {\"value\": 1.2609242892057049}, {\"value\": -0.8037533158395259}, {\"value\": 0.4067818515404702}, {\"value\": 0.5051498090051025}, {\"value\": 0.70967724878306}, {\"value\": -0.26959075976020896}, {\"value\": 0.4047544713200659}, {\"value\": -0.2909000724567936}, {\"value\": -0.23193387716810232}, {\"value\": -0.6501269565029909}, {\"value\": 0.6878329581422995}, {\"value\": 0.3519967031910498}, {\"value\": 1.1993144796016946}, {\"value\": 1.3498874276271198}, {\"value\": 1.2941752855439113}, {\"value\": 0.06693475270910905}, {\"value\": -0.6095999424530064}, {\"value\": 2.086750826853293}, {\"value\": -0.6086831464454486}, {\"value\": 0.4659377291390589}, {\"value\": -0.7811197465266109}, {\"value\": -1.0605642887150788}, {\"value\": -0.7982695339213921}, {\"value\": 0.3501428655554859}, {\"value\": 0.6496216684792617}, {\"value\": -1.1784643479618748}, {\"value\": -0.26067274970283855}, {\"value\": -0.09754945957198305}, {\"value\": 0.160530222662948}, {\"value\": 0.3406849507446566}, {\"value\": -0.7626230064173831}, {\"value\": -0.42467003445564433}, {\"value\": 0.04562578142567864}, {\"value\": 0.9933748135607611}, {\"value\": 1.0187983619588667}, {\"value\": 0.09146020165732566}, {\"value\": -0.40518587112183524}, {\"value\": -0.39687758513056054}, {\"value\": 2.5242544755041045}, {\"value\": 0.6875459919683333}, {\"value\": -0.7414979760858258}, {\"value\": -1.7410796843857166}, {\"value\": 0.7443242886463508}, {\"value\": -1.7349274686476042}, {\"value\": 1.8031630958500005}, {\"value\": 0.3607370046400169}, {\"value\": 0.6738873148468489}, {\"value\": -0.255383876778799}, {\"value\": 1.9162130662531733}, {\"value\": 1.9222844703484827}, {\"value\": -0.08104656578016839}, {\"value\": -1.4098719791303773}, {\"value\": 0.6385146582808802}, {\"value\": -1.8439924062921487}, {\"value\": -0.04014236914778508}, {\"value\": -1.0566957753978896}, {\"value\": 0.1365078002643656}, {\"value\": -1.2065316384179883}, {\"value\": -0.01458483036918458}, {\"value\": -0.45648920563417505}, {\"value\": -0.4241014170149318}, {\"value\": -0.25083217167517324}, {\"value\": 0.5543814784868035}, {\"value\": -0.7003031177750266}, {\"value\": 0.3353228595263906}, {\"value\": -0.03776918374222633}, {\"value\": 0.6058053262635713}, {\"value\": 0.23902764295795667}, {\"value\": 0.8563202160970235}, {\"value\": -0.6336053465626716}, {\"value\": 1.4458769180134963}, {\"value\": 1.0374222602041674}, {\"value\": 0.9877769822872294}, {\"value\": 1.0380222599432973}, {\"value\": 0.05905903077393637}, {\"value\": 1.6112223739679021}, {\"value\": -1.4538267187859126}, {\"value\": -1.3374489648180314}, {\"value\": 0.7091451164134123}, {\"value\": 0.4257841319460518}, {\"value\": -0.6857592128156579}, {\"value\": 0.7384596862923188}, {\"value\": -0.12875098517340175}, {\"value\": 0.6744534637000436}, {\"value\": 0.10920566549941013}, {\"value\": -0.970542713941146}, {\"value\": -0.09725666735171253}, {\"value\": -0.12533307294481752}, {\"value\": 1.3007335324177152}, {\"value\": 0.27099101394709346}, {\"value\": -0.3833305325363248}, {\"value\": 1.0482934548811969}, {\"value\": 0.233717245332492}, {\"value\": -0.4808936386039782}, {\"value\": -1.130960871790457}, {\"value\": -0.045919783502479036}, {\"value\": 0.3873663537092485}, {\"value\": 0.7042744854991098}, {\"value\": -0.4193064541150853}, {\"value\": 0.8051874436777073}, {\"value\": -1.9057437791153484}, {\"value\": -0.9619716139006588}, {\"value\": -0.551576228437489}, {\"value\": -0.7798358966200495}, {\"value\": -0.6321035623164654}, {\"value\": -1.0689256037020207}, {\"value\": 0.9650875524981289}, {\"value\": 0.22003138334728617}, {\"value\": 0.22139120354374223}, {\"value\": -0.378023585926758}, {\"value\": 0.3160612519979765}, {\"value\": 1.1090739320861107}, {\"value\": 0.1639421544140618}, {\"value\": 0.23239922113228384}, {\"value\": 0.9771169340127085}, {\"value\": 2.872906901615615}, {\"value\": 2.114477112307949}, {\"value\": -1.1868700588112582}, {\"value\": 0.8726408744679628}, {\"value\": -0.5928047615939108}, {\"value\": 0.05603960289626726}, {\"value\": 0.8754457889920373}, {\"value\": -0.4261442137670418}, {\"value\": -0.7488654635438678}, {\"value\": 1.4790493439771115}, {\"value\": -1.4064170004952132}, {\"value\": -1.2174811184211718}, {\"value\": -0.9334524125639234}, {\"value\": 2.101156341122637}, {\"value\": 0.7854074194841504}, {\"value\": -0.12885997023379836}, {\"value\": -0.5167733259392816}, {\"value\": 1.5756084437095756}, {\"value\": 0.1618286078470508}, {\"value\": 0.5710581333223138}, {\"value\": -0.30593135059755794}, {\"value\": -0.5248809649792338}, {\"value\": -0.7739338788940892}, {\"value\": 1.3369182216516586}, {\"value\": -0.30781130312366634}, {\"value\": -0.5135348164003015}, {\"value\": -0.24366284694555695}, {\"value\": -0.16216241979293172}, {\"value\": -1.3410041144769318}, {\"value\": 0.7987299411547231}, {\"value\": -0.8998213362106494}, {\"value\": 1.2930277573556872}, {\"value\": -0.32469881468206846}, {\"value\": 1.6778771934661199}, {\"value\": 0.28636229010719594}, {\"value\": -1.497905536247604}, {\"value\": 0.16248269680536148}, {\"value\": -0.33299123707997397}, {\"value\": 0.18765292865926322}, {\"value\": 0.6853568036273309}, {\"value\": -0.48667703548830665}, {\"value\": 1.124463264244487}, {\"value\": -0.21953920508918176}, {\"value\": 0.5988566984024184}, {\"value\": -0.03145163525037502}, {\"value\": 0.4892304997472953}, {\"value\": 1.4880499543001615}, {\"value\": -0.49204339601300884}, {\"value\": -1.725002298979368}, {\"value\": -1.2733073855497703}, {\"value\": 0.8629763865567682}, {\"value\": -0.35693020028012346}, {\"value\": 0.23427856780531406}, {\"value\": 0.7066778128835619}, {\"value\": 0.6762652638429529}, {\"value\": -0.44541125128417014}, {\"value\": -0.5405535987668907}, {\"value\": -0.7046465436405521}, {\"value\": 0.09343987178931445}, {\"value\": -0.8808471902205636}, {\"value\": -1.5760728495830683}, {\"value\": 0.2913765147029043}, {\"value\": -0.003999250874832506}, {\"value\": 0.43442050884998923}, {\"value\": -0.34798825851116133}, {\"value\": 0.5115178132016133}, {\"value\": -1.0023476317780449}, {\"value\": -0.18119816923171994}, {\"value\": -0.8411890256848586}, {\"value\": -1.5952631617000685}, {\"value\": -1.5873083843857794}, {\"value\": -0.099554141413501}, {\"value\": 0.28059528907197645}, {\"value\": 0.4291635249806722}, {\"value\": 0.04821995029998618}, {\"value\": -1.2521374577123552}, {\"value\": 1.249936406045756}, {\"value\": -1.3520198541415984}, {\"value\": -2.0932038549344725}, {\"value\": -0.5595503186359059}, {\"value\": 0.5227551465903549}, {\"value\": -0.6010147621131287}, {\"value\": 0.39722308455947364}, {\"value\": 0.47179406059287776}, {\"value\": 0.39667303171931867}, {\"value\": -0.7133721864296504}, {\"value\": -0.5992161771782377}, {\"value\": 0.3685247231091719}, {\"value\": -0.6504816186411476}, {\"value\": 0.42508273267440405}, {\"value\": -0.034178169729807154}, {\"value\": 0.4595530245695017}, {\"value\": -0.09139479141130827}, {\"value\": -0.9684621960685851}, {\"value\": -0.2723992088105315}, {\"value\": 1.45336320444315}, {\"value\": -0.31717315976753474}, {\"value\": -1.0531969898703586}, {\"value\": -0.0637882691637908}, {\"value\": -0.03576896914658925}, {\"value\": 1.7870233630194305}, {\"value\": -0.17166149773089812}, {\"value\": -0.7075607138868958}, {\"value\": -0.771433785262955}, {\"value\": 0.2543600167891555}, {\"value\": 0.6010767029531878}, {\"value\": -0.29116516493658756}, {\"value\": 1.0385660635997702}, {\"value\": 0.29435927382507354}, {\"value\": 0.6538096737530703}, {\"value\": 1.2466672284635345}, {\"value\": -0.15289177302562476}, {\"value\": -1.6006127303112876}, {\"value\": 1.0720856138437345}, {\"value\": 0.216174183096673}, {\"value\": 0.37581136727304176}, {\"value\": 0.7943061050544833}, {\"value\": -2.7232121226701813}, {\"value\": 0.6126707516286913}, {\"value\": -0.6739185265065643}, {\"value\": -1.7691232091620093}, {\"value\": -1.181217642778908}, {\"value\": 0.2482579352477796}, {\"value\": -0.7233464936220502}, {\"value\": -1.1081917484595707}, {\"value\": -0.8254566560484632}, {\"value\": -0.25694445404937283}, {\"value\": 1.623654757449157}, {\"value\": -0.9951421256808021}, {\"value\": 0.2965054617574451}, {\"value\": 0.7998493274348315}, {\"value\": 1.3507305679821526}, {\"value\": 0.8707585546826089}, {\"value\": -0.7310963377041577}, {\"value\": -0.4950886718898828}, {\"value\": -0.4392237445529989}, {\"value\": -0.7342141278399582}, {\"value\": -0.949669050088288}, {\"value\": 0.2482605350076011}, {\"value\": -1.0704328937868792}, {\"value\": -2.419937795358873}, {\"value\": -1.2560404179282387}, {\"value\": 0.004495059166100429}, {\"value\": 0.12573538083112545}, {\"value\": 2.127641201814292}, {\"value\": 1.2639127424954348}, {\"value\": 0.47335814485396066}, {\"value\": 0.6732418410538884}, {\"value\": 1.141757607844389}, {\"value\": 2.2944561414079994}, {\"value\": -0.653568796126681}, {\"value\": -0.7761837460018449}, {\"value\": 0.7896705831688186}, {\"value\": 1.1421672940324608}, {\"value\": -0.8429394067881292}, {\"value\": -2.0602446586544527}, {\"value\": -0.6484881800325945}, {\"value\": -0.13378287430894129}, {\"value\": -1.3451141535720974}, {\"value\": 0.38789616143042227}, {\"value\": -0.3246070464857953}, {\"value\": -0.41287620292875227}, {\"value\": 1.7544450298551748}, {\"value\": -0.7134451391470037}, {\"value\": -1.1320120639383346}, {\"value\": 0.2407812248291278}, {\"value\": 0.8343258531791271}, {\"value\": -0.5934854461839877}, {\"value\": -0.37660730040700213}, {\"value\": -0.004619444190021712}, {\"value\": 0.200019898492369}, {\"value\": 0.2033371679849864}, {\"value\": -0.49510966317254934}, {\"value\": -1.84789310485401}, {\"value\": -0.3313119902532482}, {\"value\": 0.953849623600823}, {\"value\": -0.4383904852468213}, {\"value\": -0.652064765263804}, {\"value\": -0.4731598818094105}, {\"value\": 1.219056433592802}, {\"value\": -1.8263474066930407}, {\"value\": 0.25062751916774983}, {\"value\": -1.2047904442024193}, {\"value\": 0.43560745839193554}, {\"value\": 0.9901155307515271}, {\"value\": -0.46345182070436347}, {\"value\": -0.2846501341245758}, {\"value\": 1.9355069699915455}, {\"value\": 0.6715936784705029}, {\"value\": -1.3000574721897549}, {\"value\": -1.3302114535835075}, {\"value\": -2.3484141232336264}, {\"value\": 2.709336802012931}, {\"value\": 0.11446199355952341}, {\"value\": -0.10335100084499496}, {\"value\": -1.1388507273171316}, {\"value\": -0.03855063712054708}, {\"value\": 0.7858678390611118}, {\"value\": -0.8892014702347982}, {\"value\": 0.1254548096596413}, {\"value\": -0.6325210433877884}, {\"value\": -0.950200792897399}, {\"value\": 0.7116324347523377}, {\"value\": 0.7857103504180663}, {\"value\": -1.3456669442038347}, {\"value\": -0.700349100548299}, {\"value\": -0.6066790882203199}, {\"value\": -0.4240545967877173}, {\"value\": -0.3460212875174335}, {\"value\": -0.8732795774488205}, {\"value\": -0.47143837774441044}, {\"value\": 0.4447151034350842}, {\"value\": 1.6144942694769255}, {\"value\": 1.429857152206707}, {\"value\": -1.0890886282502736}, {\"value\": 0.5932942382806641}, {\"value\": -0.06109135120004975}, {\"value\": -0.47314132531199177}, {\"value\": -1.1416962420071408}, {\"value\": -0.9002642948859667}, {\"value\": 1.6698339614293092}, {\"value\": -0.7961086169317918}, {\"value\": -0.6093011728567012}, {\"value\": 0.7175598807692455}, {\"value\": 0.7239610137226791}, {\"value\": -0.7372425299287493}, {\"value\": 0.5894456078432351}, {\"value\": -1.316447647678949}, {\"value\": -0.7017112090457387}, {\"value\": -0.7825961902780321}, {\"value\": -0.37437500198732765}, {\"value\": -0.1519355209036694}, {\"value\": 1.2413108491374922}, {\"value\": 0.7041104536534051}, {\"value\": 0.7225792646808863}, {\"value\": -1.4461475551525131}, {\"value\": -0.3962637240659802}, {\"value\": 1.2355567357179036}, {\"value\": 0.09053627714090472}, {\"value\": 0.1659213095755497}, {\"value\": -1.650099504559464}, {\"value\": -0.14365547518748029}, {\"value\": 0.2868881164227369}, {\"value\": -0.6099975447245917}, {\"value\": 1.441045184291745}, {\"value\": -0.2661640993125847}, {\"value\": 1.280029311534999}, {\"value\": 0.34379048645764393}, {\"value\": 1.5071072892697819}, {\"value\": 1.1996349779874915}, {\"value\": 0.26532061490503733}, {\"value\": -1.5112802355036623}, {\"value\": 1.5816516760540966}, {\"value\": -0.33750901062629113}, {\"value\": -0.2398044528657196}, {\"value\": 0.562756069041807}, {\"value\": 0.4509363448116653}, {\"value\": 2.2966061887320484}, {\"value\": 0.29309632774602207}, {\"value\": -0.8936080584610341}, {\"value\": 0.019588647055661334}, {\"value\": -0.06371465035614397}, {\"value\": 0.08519299774965616}, {\"value\": 1.3463157700521022}, {\"value\": -0.5734626503817717}, {\"value\": -0.8155071360079722}, {\"value\": 0.5659486461149525}, {\"value\": -0.2767266464229097}, {\"value\": -0.419082481469125}, {\"value\": -1.196931708163487}, {\"value\": 3.0300960501711067}, {\"value\": -0.6619073806211886}, {\"value\": -0.42482266254692225}, {\"value\": 1.475754197072226}, {\"value\": 0.729123015070505}, {\"value\": 0.5076974287782632}, {\"value\": -0.09332388549091464}, {\"value\": -0.8669618591962808}, {\"value\": 0.6418112471853409}, {\"value\": -1.3955818807970137}, {\"value\": 0.9272163961908806}, {\"value\": 1.0866892604385696}, {\"value\": -0.3561385714752201}, {\"value\": 1.816476296685857}, {\"value\": 0.580483353558186}, {\"value\": -0.4108851353816924}, {\"value\": -0.3871154850231034}, {\"value\": 0.466239595072763}, {\"value\": -0.06468951266302803}, {\"value\": 0.6347128581707394}, {\"value\": 0.24595638268024603}, {\"value\": -0.6884697825100133}, {\"value\": 0.27366072926317736}, {\"value\": 0.38435850398512733}, {\"value\": -1.9633923817937444}, {\"value\": -0.4205142801492831}, {\"value\": 0.17514237691337417}, {\"value\": -0.1748523431534152}, {\"value\": 0.3010210536505029}, {\"value\": 1.2607778867602568}, {\"value\": -0.6599263463986565}, {\"value\": -1.7860918855335122}, {\"value\": -0.14806449542701772}, {\"value\": -0.8659445458475367}, {\"value\": 0.04098246597632174}, {\"value\": -0.5959949782694048}, {\"value\": 0.29150786605145296}, {\"value\": -1.3517142679162026}, {\"value\": -0.24294660553603392}, {\"value\": 0.6821277129537688}, {\"value\": 0.08871457472291913}, {\"value\": 0.38378906793842305}, {\"value\": 0.34953330986336406}, {\"value\": -0.1282483531336244}, {\"value\": 1.9926652479821536}, {\"value\": 1.5962373753432397}, {\"value\": 0.8984064536129787}, {\"value\": -0.011605789298219699}, {\"value\": 0.21886603193774604}, {\"value\": -1.1622982859930588}, {\"value\": -1.9894097058047975}, {\"value\": 0.8053290574302112}, {\"value\": -0.7882411062457103}, {\"value\": 1.4719844553211603}, {\"value\": 0.964158468088477}, {\"value\": 0.8417985560713863}, {\"value\": 1.7535492840681592}, {\"value\": -0.17893057030393855}, {\"value\": -0.8136183075124515}, {\"value\": 0.5955281248976872}, {\"value\": -1.3488057427045448}, {\"value\": -0.46025561204330895}, {\"value\": 0.3974600260798442}, {\"value\": 1.3557543133870087}, {\"value\": -2.0551306472543014}, {\"value\": -0.6565356533234454}, {\"value\": 0.35893901833416403}, {\"value\": -0.5600546701235001}, {\"value\": 2.511416672411557}, {\"value\": -1.323916720211353}, {\"value\": 0.11139044807740374}, {\"value\": -1.559086194905898}, {\"value\": -0.3229574569570024}, {\"value\": -2.6766867280468287}, {\"value\": -0.5248262226169434}, {\"value\": 0.3362169248697577}, {\"value\": 0.03904036715865289}, {\"value\": 0.08693355261260052}, {\"value\": 0.563971041951853}, {\"value\": -1.167452068988526}, {\"value\": -0.6753703321333371}, {\"value\": -0.009022245517625095}, {\"value\": 0.8030314424640338}, {\"value\": -1.2125715076217958}, {\"value\": 0.6588656186897662}, {\"value\": -0.3819239254502584}, {\"value\": 0.14651555172057223}, {\"value\": 0.1867088392504953}, {\"value\": 0.5901585798099991}, {\"value\": 0.6975738559374216}, {\"value\": 0.5859917364392344}, {\"value\": 0.6262783787837938}, {\"value\": 0.5331826021517777}, {\"value\": -0.3683806872985501}, {\"value\": 1.5387358804079043}, {\"value\": 1.2828600100048952}, {\"value\": 0.06890499119943205}, {\"value\": 1.1239150897447583}, {\"value\": 0.39481489673269643}, {\"value\": -1.01140832755185}, {\"value\": 0.28045685289574596}, {\"value\": -1.1746379517404868}, {\"value\": -0.6897827660333402}, {\"value\": 0.3785432899660537}, {\"value\": -0.010199151950153957}, {\"value\": 0.42408455338556844}, {\"value\": -0.006706590910628339}, {\"value\": -0.3264662441736065}, {\"value\": 0.14752579340149802}, {\"value\": -1.6361006182620725}, {\"value\": -1.5660725232856154}, {\"value\": -0.7105814349761389}, {\"value\": 1.5670280707908726}, {\"value\": -1.248606688488685}, {\"value\": 1.0113239322649905}, {\"value\": 0.4915513047484741}, {\"value\": 2.4004427097573036}, {\"value\": -0.35044703964573676}, {\"value\": -0.037933829241476535}, {\"value\": 2.143824257971361}, {\"value\": 0.04813546559827077}, {\"value\": 1.4823059097552744}, {\"value\": -0.9875415247719078}, {\"value\": 0.5511114962435025}, {\"value\": 0.36075747013104703}, {\"value\": 1.040990154826274}, {\"value\": 0.9049226245591778}, {\"value\": 1.8934142747315639}, {\"value\": -0.4284869591068765}, {\"value\": 1.1323511439906913}, {\"value\": 2.1867341092239316}, {\"value\": 0.96562135284895}, {\"value\": -0.7048325588640085}, {\"value\": 1.3400104234104238}, {\"value\": 0.033401898267328825}, {\"value\": 0.2605113760243567}, {\"value\": -1.0806285297436722}, {\"value\": 1.1994367438000286}, {\"value\": -0.013881467230180073}, {\"value\": 0.5248894754198941}, {\"value\": 0.7097846131297595}, {\"value\": -2.654294352245271}, {\"value\": 1.2711756170963824}, {\"value\": 0.4859798415868686}, {\"value\": -0.5583114854147634}, {\"value\": -0.698468358392839}, {\"value\": -0.4100529482251079}, {\"value\": -0.39243311671056513}, {\"value\": -0.8084780286213907}, {\"value\": 0.24551991014266694}, {\"value\": -0.6444193964832445}, {\"value\": 0.13597465705329426}, {\"value\": -1.8190507468357653}, {\"value\": -0.5523753771033708}, {\"value\": -0.25457890845622716}, {\"value\": -0.7252468905585624}, {\"value\": -2.131992631347249}, {\"value\": -0.44379481777733953}, {\"value\": 0.02397107266400035}, {\"value\": 1.5942220554906275}, {\"value\": 0.6843651683614627}, {\"value\": 0.38360790409959067}, {\"value\": 0.9151374187121417}, {\"value\": 1.3155406081337986}, {\"value\": 0.07887883348185122}, {\"value\": -0.4347326892469481}, {\"value\": -0.8550142464230905}, {\"value\": 0.1427787449156586}, {\"value\": -1.1395026688797365}, {\"value\": -0.8391329767205756}, {\"value\": 1.0472306796303943}, {\"value\": 0.600083087586102}, {\"value\": -0.11135181903700561}, {\"value\": 0.32411199676782465}, {\"value\": 0.6506684009262854}, {\"value\": 0.16993005283657367}, {\"value\": 0.06499445373177859}, {\"value\": 0.32826376882353286}, {\"value\": 0.9379623413534617}, {\"value\": -1.2555264183745654}, {\"value\": 0.22542533302672038}, {\"value\": 0.6721687465747188}, {\"value\": -0.4652538181163051}, {\"value\": -0.49757403400293937}, {\"value\": -0.18121398704260888}, {\"value\": 0.04367331922464246}, {\"value\": 0.8404468919584768}, {\"value\": -2.5239140880805606}, {\"value\": -0.03207514360268553}, {\"value\": 1.6136508039608282}, {\"value\": -1.6481372385295072}, {\"value\": 0.02945340395263927}, {\"value\": -1.1106437399708426}, {\"value\": 1.0577545049226353}, {\"value\": 0.5579769527338367}, {\"value\": 0.19906617514106825}, {\"value\": 1.28664986871655}, {\"value\": 0.3444641089706756}, {\"value\": 0.6404900974843815}, {\"value\": -0.13738860473046435}, {\"value\": -0.8462983808655452}, {\"value\": 0.20085539316050613}, {\"value\": 0.9783144827469403}, {\"value\": -0.6664978813794301}, {\"value\": -0.32727879169829216}, {\"value\": 0.8743836129682805}, {\"value\": 0.8779164917748281}, {\"value\": 1.9413095016831836}, {\"value\": 1.905781819223929}, {\"value\": 0.8722590235961074}, {\"value\": 0.5382884930783489}, {\"value\": 0.05942126474853494}, {\"value\": -0.8890702248007876}, {\"value\": -0.4935306062404816}, {\"value\": 1.2258215265481203}, {\"value\": -0.9693447566821317}, {\"value\": -1.2820575236781782}, {\"value\": -0.5106857445302937}, {\"value\": 0.7928864462363591}, {\"value\": -1.5052363143588519}, {\"value\": 1.4123022051384608}, {\"value\": -0.2956494103003594}, {\"value\": -1.3411952246136372}, {\"value\": -0.0896784582881703}, {\"value\": 0.7042771091208724}, {\"value\": -0.33914636176324353}, {\"value\": -0.3599211823646474}, {\"value\": -0.2439446722861455}, {\"value\": -0.9787008576125474}, {\"value\": -0.8913457057157917}, {\"value\": -0.7605507662298846}, {\"value\": -0.5683781711755969}, {\"value\": -0.6747038983302281}, {\"value\": -1.5222729339045975}, {\"value\": -0.9525287959768067}, {\"value\": -0.21737309916803174}, {\"value\": 0.5551229180104439}, {\"value\": 0.813501886652003}, {\"value\": -0.943476342098403}, {\"value\": -0.2185168543259168}, {\"value\": -0.6370284542877748}, {\"value\": 0.8672833363630879}, {\"value\": -0.5992668900015399}, {\"value\": -0.15782181930268507}, {\"value\": 0.6410892488061335}, {\"value\": 1.6621236366351908}, {\"value\": -0.12597579608234394}, {\"value\": -1.5624239823334778}, {\"value\": -1.517064161244666}, {\"value\": -0.3937174226740617}, {\"value\": 1.7205401915511471}, {\"value\": -1.4003158161250582}, {\"value\": 0.3542883587768595}, {\"value\": -0.0620257126124622}, {\"value\": 0.40891963515643154}, {\"value\": 1.976275920259603}, {\"value\": -0.41875084295921877}, {\"value\": 0.7530918346730855}, {\"value\": -1.2704712900164188}, {\"value\": -1.0626290856264438}, {\"value\": 1.2075828176359185}, {\"value\": 1.9487561963677669}, {\"value\": -0.7745606704742258}, {\"value\": -0.760650141966991}, {\"value\": -0.2363269996597339}, {\"value\": 1.0200190073479711}, {\"value\": -0.5332653960097681}, {\"value\": 1.7435270926281252}, {\"value\": 1.55804341458333}, {\"value\": -0.3348575212900079}, {\"value\": 1.4213507521367583}, {\"value\": -0.2053620901401359}, {\"value\": 0.9786659832328075}, {\"value\": 0.7505501444699949}, {\"value\": -1.5844719003443255}, {\"value\": -0.24479631388440162}, {\"value\": -0.009521668432862312}, {\"value\": 0.2125113229699007}, {\"value\": 1.2851225650486464}, {\"value\": 1.1491462922735047}, {\"value\": -0.8090875506417482}, {\"value\": 0.23046845261606722}, {\"value\": 0.11698149077204628}, {\"value\": 0.6681992533792734}, {\"value\": 0.3806427887721189}, {\"value\": -0.5822919125897761}, {\"value\": -0.8814330773512751}, {\"value\": 0.6376225471734157}, {\"value\": 1.5285438341374504}, {\"value\": 2.310166751867028}, {\"value\": -0.14364311128055596}, {\"value\": 1.220194628866535}, {\"value\": -0.46146840124682864}, {\"value\": -0.8379596590599049}, {\"value\": 2.4737816876406824}, {\"value\": -1.1607978902816498}, {\"value\": -0.6200661088792636}, {\"value\": -1.4279825428015058}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Line Plot\n\n**Matplotlib:**\n\n::: {#90f4214d .cell execution_count=10}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nplt.figure(figsize=(10, 6))\nplt.plot(x, y1, label='Sine')\nplt.plot(x, y2, label='Cosine')\nplt.title('Matplotlib Line Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#9aab94c0 .cell execution_count=11}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nx = np.linspace(0, 10, 100)\ndata = pd.DataFrame({\n    'x': np.concatenate([x, x]),\n    'y': np.concatenate([np.sin(x), np.cos(x)]),\n    'function': ['Sine']*100 + ['Cosine']*100\n})\n\nsns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=data, x='x', y='y', hue='function')\nplt.title('Seaborn Line Plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){}\n:::\n:::\n\n\n**Altair:**\n\n::: {#b2c4b3da .cell execution_count=12}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ndata = pd.DataFrame({\n    'x': np.concatenate([x, x]),\n    'y': np.concatenate([np.sin(x), np.cos(x)]),\n    'function': ['Sine']*100 + ['Cosine']*100\n})\n\nalt.Chart(data).mark_line().encode(\n    x='x',\n    y='y',\n    color='function'\n).properties(\n    width=600,\n    height=400,\n    title='Altair Line Plot'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n\n<style>\n  #altair-viz-2cf1f8245f09403f837e5648cc5f0fd2.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-2cf1f8245f09403f837e5648cc5f0fd2.vega-embed details,\n  #altair-viz-2cf1f8245f09403f837e5648cc5f0fd2.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-2cf1f8245f09403f837e5648cc5f0fd2\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-2cf1f8245f09403f837e5648cc5f0fd2\") {\n      outputDiv = document.getElementById(\"altair-viz-2cf1f8245f09403f837e5648cc5f0fd2\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-315314b1d744b307a4c6f023712ccc9d\"}, \"mark\": {\"type\": \"line\"}, \"encoding\": {\"color\": {\"field\": \"function\", \"type\": \"nominal\"}, \"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Line Plot\", \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-315314b1d744b307a4c6f023712ccc9d\": [{\"x\": 0.0, \"y\": 0.0, \"function\": \"Sine\"}, {\"x\": 0.10101010101010101, \"y\": 0.1008384202581046, \"function\": \"Sine\"}, {\"x\": 0.20202020202020202, \"y\": 0.2006488565226854, \"function\": \"Sine\"}, {\"x\": 0.30303030303030304, \"y\": 0.2984138044476411, \"function\": \"Sine\"}, {\"x\": 0.40404040404040403, \"y\": 0.3931366121483298, \"function\": \"Sine\"}, {\"x\": 0.5050505050505051, \"y\": 0.48385164043793466, \"function\": \"Sine\"}, {\"x\": 0.6060606060606061, \"y\": 0.5696341069089657, \"function\": \"Sine\"}, {\"x\": 0.7070707070707071, \"y\": 0.6496095135057065, \"function\": \"Sine\"}, {\"x\": 0.8080808080808081, \"y\": 0.7229625614794605, \"function\": \"Sine\"}, {\"x\": 0.9090909090909091, \"y\": 0.7889454628442574, \"function\": \"Sine\"}, {\"x\": 1.0101010101010102, \"y\": 0.8468855636029834, \"function\": \"Sine\"}, {\"x\": 1.1111111111111112, \"y\": 0.8961922010299563, \"function\": \"Sine\"}, {\"x\": 1.2121212121212122, \"y\": 0.9363627251042848, \"function\": \"Sine\"}, {\"x\": 1.3131313131313131, \"y\": 0.9669876227092996, \"function\": \"Sine\"}, {\"x\": 1.4141414141414141, \"y\": 0.9877546923600838, \"function\": \"Sine\"}, {\"x\": 1.5151515151515151, \"y\": 0.9984522269003895, \"function\": \"Sine\"}, {\"x\": 1.6161616161616161, \"y\": 0.9989711717233568, \"function\": \"Sine\"}, {\"x\": 1.7171717171717171, \"y\": 0.9893062365143401, \"function\": \"Sine\"}, {\"x\": 1.8181818181818181, \"y\": 0.9695559491823237, \"function\": \"Sine\"}, {\"x\": 1.9191919191919191, \"y\": 0.9399216514301312, \"function\": \"Sine\"}, {\"x\": 2.0202020202020203, \"y\": 0.9007054462029555, \"function\": \"Sine\"}, {\"x\": 2.121212121212121, \"y\": 0.8523071179396752, \"function\": \"Sine\"}, {\"x\": 2.2222222222222223, \"y\": 0.7952200570230491, \"function\": \"Sine\"}, {\"x\": 2.323232323232323, \"y\": 0.7300262299764464, \"function\": \"Sine\"}, {\"x\": 2.4242424242424243, \"y\": 0.6573902466827755, \"function\": \"Sine\"}, {\"x\": 2.525252525252525, \"y\": 0.5780525851065732, \"function\": \"Sine\"}, {\"x\": 2.6262626262626263, \"y\": 0.4928220425889235, \"function\": \"Sine\"}, {\"x\": 2.727272727272727, \"y\": 0.40256749066949654, \"function\": \"Sine\"}, {\"x\": 2.8282828282828283, \"y\": 0.30820901749007684, \"function\": \"Sine\"}, {\"x\": 2.929292929292929, \"y\": 0.2107085480771929, \"function\": \"Sine\"}, {\"x\": 3.0303030303030303, \"y\": 0.11106003812412972, \"function\": \"Sine\"}, {\"x\": 3.131313131313131, \"y\": 0.010279341240534697, \"function\": \"Sine\"}, {\"x\": 3.2323232323232323, \"y\": -0.09060614703340773, \"function\": \"Sine\"}, {\"x\": 3.3333333333333335, \"y\": -0.19056796287548539, \"function\": \"Sine\"}, {\"x\": 3.4343434343434343, \"y\": -0.28858705872043244, \"function\": \"Sine\"}, {\"x\": 3.5353535353535355, \"y\": -0.38366419180611233, \"function\": \"Sine\"}, {\"x\": 3.6363636363636362, \"y\": -0.47483011082223947, \"function\": \"Sine\"}, {\"x\": 3.7373737373737375, \"y\": -0.5611554368152017, \"function\": \"Sine\"}, {\"x\": 3.8383838383838382, \"y\": -0.6417601376193878, \"function\": \"Sine\"}, {\"x\": 3.9393939393939394, \"y\": -0.7158224992291902, \"function\": \"Sine\"}, {\"x\": 4.040404040404041, \"y\": -0.7825875026542022, \"function\": \"Sine\"}, {\"x\": 4.141414141414141, \"y\": -0.8413745208608701, \"function\": \"Sine\"}, {\"x\": 4.242424242424242, \"y\": -0.8915842573351402, \"function\": \"Sine\"}, {\"x\": 4.343434343434343, \"y\": -0.9327048555318336, \"function\": \"Sine\"}, {\"x\": 4.444444444444445, \"y\": -0.9643171169287782, \"function\": \"Sine\"}, {\"x\": 4.545454545454545, \"y\": -0.9860987744909296, \"function\": \"Sine\"}, {\"x\": 4.646464646464646, \"y\": -0.9978277779792126, \"function\": \"Sine\"}, {\"x\": 4.747474747474747, \"y\": -0.9993845576124357, \"function\": \"Sine\"}, {\"x\": 4.848484848484849, \"y\": -0.9907532430056771, \"function\": \"Sine\"}, {\"x\": 4.94949494949495, \"y\": -0.9720218249588334, \"function\": \"Sine\"}, {\"x\": 5.05050505050505, \"y\": -0.9433812584459996, \"function\": \"Sine\"}, {\"x\": 5.151515151515151, \"y\": -0.9051235159501367, \"function\": \"Sine\"}, {\"x\": 5.252525252525253, \"y\": -0.8576386109880517, \"function\": \"Sine\"}, {\"x\": 5.353535353535354, \"y\": -0.8014106221689696, \"function\": \"Sine\"}, {\"x\": 5.454545454545454, \"y\": -0.7370127583189133, \"function\": \"Sine\"}, {\"x\": 5.555555555555555, \"y\": -0.6651015149788224, \"function\": \"Sine\"}, {\"x\": 5.656565656565657, \"y\": -0.5864099818472351, \"function\": \"Sine\"}, {\"x\": 5.757575757575758, \"y\": -0.5017403693939113, \"function\": \"Sine\"}, {\"x\": 5.858585858585858, \"y\": -0.4119558308308628, \"function\": \"Sine\"}, {\"x\": 5.959595959595959, \"y\": -0.31797166281061867, \"function\": \"Sine\"}, {\"x\": 6.0606060606060606, \"y\": -0.22074597455506334, \"function\": \"Sine\"}, {\"x\": 6.161616161616162, \"y\": -0.12126992053716677, \"function\": \"Sine\"}, {\"x\": 6.262626262626262, \"y\": -0.020557596287260064, \"function\": \"Sine\"}, {\"x\": 6.363636363636363, \"y\": 0.08036429967028173, \"function\": \"Sine\"}, {\"x\": 6.4646464646464645, \"y\": 0.18046693235991093, \"function\": \"Sine\"}, {\"x\": 6.565656565656566, \"y\": 0.27872981867755725, \"function\": \"Sine\"}, {\"x\": 6.666666666666667, \"y\": 0.37415123057121996, \"function\": \"Sine\"}, {\"x\": 6.767676767676767, \"y\": 0.4657584070256517, \"function\": \"Sine\"}, {\"x\": 6.8686868686868685, \"y\": 0.5526174707464059, \"function\": \"Sine\"}, {\"x\": 6.96969696969697, \"y\": 0.6338429484489058, \"function\": \"Sine\"}, {\"x\": 7.070707070707071, \"y\": 0.7086067976992182, \"function\": \"Sine\"}, {\"x\": 7.171717171717171, \"y\": 0.7761468482835805, \"function\": \"Sine\"}, {\"x\": 7.2727272727272725, \"y\": 0.8357745720522589, \"function\": \"Sine\"}, {\"x\": 7.373737373737374, \"y\": 0.8868821020290788, \"function\": \"Sine\"}, {\"x\": 7.474747474747475, \"y\": 0.9289484292312513, \"function\": \"Sine\"}, {\"x\": 7.575757575757575, \"y\": 0.9615447140268235, \"function\": \"Sine\"}, {\"x\": 7.6767676767676765, \"y\": 0.9843386578838236, \"function\": \"Sine\"}, {\"x\": 7.777777777777778, \"y\": 0.9970978909438748, \"function\": \"Sine\"}, {\"x\": 7.878787878787879, \"y\": 0.9996923408861117, \"function\": \"Sine\"}, {\"x\": 7.979797979797979, \"y\": 0.9920955589323228, \"function\": \"Sine\"}, {\"x\": 8.080808080808081, \"y\": 0.9743849894755358, \"function\": \"Sine\"}, {\"x\": 8.181818181818182, \"y\": 0.9467411805833543, \"function\": \"Sine\"}, {\"x\": 8.282828282828282, \"y\": 0.9094459434244625, \"function\": \"Sine\"}, {\"x\": 8.383838383838384, \"y\": 0.8628794793817834, \"function\": \"Sine\"}, {\"x\": 8.484848484848484, \"y\": 0.8075165041395626, \"function\": \"Sine\"}, {\"x\": 8.585858585858587, \"y\": 0.7439214082568444, \"function\": \"Sine\"}, {\"x\": 8.686868686868687, \"y\": 0.6727425035622647, \"function\": \"Sine\"}, {\"x\": 8.787878787878787, \"y\": 0.5947054140244975, \"function\": \"Sine\"}, {\"x\": 8.88888888888889, \"y\": 0.510605678474283, \"function\": \"Sine\"}, {\"x\": 8.98989898989899, \"y\": 0.4213006405886069, \"function\": \"Sine\"}, {\"x\": 9.09090909090909, \"y\": 0.32770070881349983, \"function\": \"Sine\"}, {\"x\": 9.191919191919192, \"y\": 0.23076007532505177, \"function\": \"Sine\"}, {\"x\": 9.292929292929292, \"y\": 0.13146698864295842, \"function\": \"Sine\"}, {\"x\": 9.393939393939394, \"y\": 0.03083367906114098, \"function\": \"Sine\"}, {\"x\": 9.494949494949495, \"y\": -0.07011396040064677, \"function\": \"Sine\"}, {\"x\": 9.595959595959595, \"y\": -0.1703468323280965, \"function\": \"Sine\"}, {\"x\": 9.696969696969697, \"y\": -0.26884312591038406, \"function\": \"Sine\"}, {\"x\": 9.797979797979798, \"y\": -0.3645987336558887, \"function\": \"Sine\"}, {\"x\": 9.8989898989899, \"y\": -0.45663748763377376, \"function\": \"Sine\"}, {\"x\": 10.0, \"y\": -0.5440211108893698, \"function\": \"Sine\"}, {\"x\": 0.0, \"y\": 1.0, \"function\": \"Cosine\"}, {\"x\": 0.10101010101010101, \"y\": 0.9949028158568303, \"function\": \"Cosine\"}, {\"x\": 0.20202020202020202, \"y\": 0.9796632259996998, \"function\": \"Cosine\"}, {\"x\": 0.30303030303030304, \"y\": 0.9544365884201449, \"function\": \"Cosine\"}, {\"x\": 0.40404040404040403, \"y\": 0.9194800727522776, \"function\": \"Cosine\"}, {\"x\": 0.5050505050505051, \"y\": 0.8751500385908233, \"function\": \"Cosine\"}, {\"x\": 0.6060606060606061, \"y\": 0.82189840263017, \"function\": \"Cosine\"}, {\"x\": 0.7070707070707071, \"y\": 0.7602680316591506, \"function\": \"Cosine\"}, {\"x\": 0.8080808080808081, \"y\": 0.6908872083770674, \"function\": \"Cosine\"}, {\"x\": 0.9090909090909091, \"y\": 0.6144632264484674, \"function\": \"Cosine\"}, {\"x\": 1.0101010101010102, \"y\": 0.5317751800910392, \"function\": \"Cosine\"}, {\"x\": 1.1111111111111112, \"y\": 0.4436660217022285, \"function\": \"Cosine\"}, {\"x\": 1.2121212121212122, \"y\": 0.3510339684920502, \"function\": \"Cosine\"}, {\"x\": 1.3131313131313131, \"y\": 0.25482334572604864, \"function\": \"Cosine\"}, {\"x\": 1.4141414141414141, \"y\": 0.15601495992575853, \"function\": \"Cosine\"}, {\"x\": 1.5151515151515151, \"y\": 0.05561610016580674, \"function\": \"Cosine\"}, {\"x\": 1.6161616161616161, \"y\": -0.04534973060188524, \"function\": \"Cosine\"}, {\"x\": 1.7171717171717171, \"y\": -0.1458532495141353, \"function\": \"Cosine\"}, {\"x\": 1.8181818181818181, \"y\": -0.24486988668507892, \"function\": \"Cosine\"}, {\"x\": 1.9191919191919191, \"y\": -0.3413902300489206, \"function\": \"Cosine\"}, {\"x\": 2.0202020202020203, \"y\": -0.43443031567828566, \"function\": \"Cosine\"}, {\"x\": 2.121212121212121, \"y\": -0.5230416586748752, \"function\": \"Cosine\"}, {\"x\": 2.2222222222222223, \"y\": -0.6063209223738354, \"function\": \"Cosine\"}, {\"x\": 2.323232323232323, \"y\": -0.6834191272904034, \"function\": \"Cosine\"}, {\"x\": 2.4242424242424243, \"y\": -0.7535503059294446, \"function\": \"Cosine\"}, {\"x\": 2.525252525252525, \"y\": -0.815999515227557, \"function\": \"Cosine\"}, {\"x\": 2.6262626262626263, \"y\": -0.8701301249459654, \"function\": \"Cosine\"}, {\"x\": 2.727272727272727, \"y\": -0.9153903077136358, \"function\": \"Cosine\"}, {\"x\": 2.8282828282828283, \"y\": -0.9513186645587279, \"function\": \"Cosine\"}, {\"x\": 2.929292929292929, \"y\": -0.9775489285796396, \"function\": \"Cosine\"}, {\"x\": 3.0303030303030303, \"y\": -0.993813698804694, \"function\": \"Cosine\"}, {\"x\": 3.131313131313131, \"y\": -0.9999471661761239, \"function\": \"Cosine\"}, {\"x\": 3.2323232323232323, \"y\": -0.9958868038686729, \"function\": \"Cosine\"}, {\"x\": 3.3333333333333335, \"y\": -0.981674004711079, \"function\": \"Cosine\"}, {\"x\": 3.4343434343434343, \"y\": -0.9574536592123348, \"function\": \"Cosine\"}, {\"x\": 3.5353535353535355, \"y\": -0.9234726784944765, \"function\": \"Cosine\"}, {\"x\": 3.6363636363636362, \"y\": -0.8800774771896732, \"function\": \"Cosine\"}, {\"x\": 3.7373737373737375, \"y\": -0.8277104419618857, \"function\": \"Cosine\"}, {\"x\": 3.8383838383838382, \"y\": -0.7669054216542901, \"function\": \"Cosine\"}, {\"x\": 3.9393939393939394, \"y\": -0.69828228503756, \"function\": \"Cosine\"}, {\"x\": 4.040404040404041, \"y\": -0.6225406016393301, \"function\": \"Cosine\"}, {\"x\": 4.141414141414141, \"y\": -0.5404525100747903, \"function\": \"Cosine\"}, {\"x\": 4.242424242424242, \"y\": -0.45285484658127084, \"function\": \"Cosine\"}, {\"x\": 4.343434343434343, \"y\": -0.3606406140014481, \"function\": \"Cosine\"}, {\"x\": 4.444444444444445, \"y\": -0.2647498781834829, \"function\": \"Cosine\"}, {\"x\": 4.545454545454545, \"y\": -0.16616018460355267, \"function\": \"Cosine\"}, {\"x\": 4.646464646464646, \"y\": -0.06587659290724678, \"function\": \"Cosine\"}, {\"x\": 4.747474747474747, \"y\": 0.03507856903860484, \"function\": \"Cosine\"}, {\"x\": 4.848484848484849, \"y\": 0.13567612713271912, \"function\": \"Cosine\"}, {\"x\": 4.94949494949495, \"y\": 0.23489055281917826, \"function\": \"Cosine\"}, {\"x\": 5.05050505050505, \"y\": 0.33171041770321597, \"function\": \"Cosine\"}, {\"x\": 5.151515151515151, \"y\": 0.42514870442477243, \"function\": \"Cosine\"}, {\"x\": 5.252525252525253, \"y\": 0.5142528686769626, \"function\": \"Cosine\"}, {\"x\": 5.353535353535354, \"y\": 0.5981145497935533, \"function\": \"Cosine\"}, {\"x\": 5.454545454545454, \"y\": 0.6758788309121296, \"function\": \"Cosine\"}, {\"x\": 5.555555555555555, \"y\": 0.7467529543114478, \"function\": \"Cosine\"}, {\"x\": 5.656565656565657, \"y\": 0.810014403075603, \"function\": \"Cosine\"}, {\"x\": 5.757575757575758, \"y\": 0.865018266697566, \"function\": \"Cosine\"}, {\"x\": 5.858585858585858, \"y\": 0.9112038155344026, \"function\": \"Cosine\"}, {\"x\": 5.959595959595959, \"y\": 0.9481002170917641, \"function\": \"Cosine\"}, {\"x\": 6.0606060606060606, \"y\": 0.9753313358637337, \"function\": \"Cosine\"}, {\"x\": 6.161616161616162, \"y\": 0.9926195677967009, \"function\": \"Cosine\"}, {\"x\": 6.262626262626262, \"y\": 0.9997886702873213, \"function\": \"Cosine\"}, {\"x\": 6.363636363636363, \"y\": 0.9967655588645231, \"function\": \"Cosine\"}, {\"x\": 6.4646464646464645, \"y\": 0.983581052239521, \"function\": \"Cosine\"}, {\"x\": 6.565656565656566, \"y\": 0.9603695581285238, \"function\": \"Cosine\"}, {\"x\": 6.666666666666667, \"y\": 0.9273677030509753, \"function\": \"Cosine\"}, {\"x\": 6.767676767676767, \"y\": 0.8849119200716687, \"function\": \"Cosine\"}, {\"x\": 6.8686868686868685, \"y\": 0.8334350190781794, \"function\": \"Cosine\"}, {\"x\": 6.96969696969697, \"y\": 0.7734617745574747, \"function\": \"Cosine\"}, {\"x\": 7.070707070707071, \"y\": 0.7056035758515253, \"function\": \"Cosine\"}, {\"x\": 7.171717171717171, \"y\": 0.6305521944291881, \"function\": \"Cosine\"}, {\"x\": 7.2727272727272725, \"y\": 0.5490727317130796, \"function\": \"Cosine\"}, {\"x\": 7.373737373737374, \"y\": 0.4619958193539013, \"function\": \"Cosine\"}, {\"x\": 7.474747474747475, \"y\": 0.3702091514654802, \"function\": \"Cosine\"}, {\"x\": 7.575757575757575, \"y\": 0.2746484351440477, \"function\": \"Cosine\"}, {\"x\": 7.6767676767676765, \"y\": 0.17628785152548898, \"function\": \"Cosine\"}, {\"x\": 7.777777777777778, \"y\": 0.07613012462407193, \"function\": \"Cosine\"}, {\"x\": 7.878787878787879, \"y\": -0.02480370080544784, \"function\": \"Cosine\"}, {\"x\": 7.979797979797979, \"y\": -0.12548466817409182, \"function\": \"Cosine\"}, {\"x\": 8.080808080808081, \"y\": -0.22488639862108173, \"function\": \"Cosine\"}, {\"x\": 8.181818181818182, \"y\": -0.3219955542979381, \"function\": \"Cosine\"}, {\"x\": 8.282828282828282, \"y\": -0.41582216870771727, \"function\": \"Cosine\"}, {\"x\": 8.383838383838384, \"y\": -0.5054097387880672, \"function\": \"Cosine\"}, {\"x\": 8.484848484848484, \"y\": -0.5898449758557073, \"function\": \"Cosine\"}, {\"x\": 8.585858585858587, \"y\": -0.6682671160076288, \"function\": \"Cosine\"}, {\"x\": 8.686868686868687, \"y\": -0.7398766950653171, \"function\": \"Cosine\"}, {\"x\": 8.787878787878787, \"y\": -0.80394369860703, \"function\": \"Cosine\"}, {\"x\": 8.88888888888889, \"y\": -0.859815004003662, \"function\": \"Cosine\"}, {\"x\": 8.98989898989899, \"y\": -0.9069210385913591, \"function\": \"Cosine\"}, {\"x\": 9.09090909090909, \"y\": -0.9447815861050266, \"function\": \"Cosine\"}, {\"x\": 9.191919191919192, \"y\": -0.973010682179788, \"function\": \"Cosine\"}, {\"x\": 9.292929292929292, \"y\": -0.9913205490138658, \"function\": \"Cosine\"}, {\"x\": 9.393939393939394, \"y\": -0.9995245290814802, \"function\": \"Cosine\"}, {\"x\": 9.494949494949495, \"y\": -0.9975389879884077, \"function\": \"Cosine\"}, {\"x\": 9.595959595959595, \"y\": -0.9853841670717991, \"function\": \"Cosine\"}, {\"x\": 9.696969696969697, \"y\": -0.9631839770525324, \"function\": \"Cosine\"}, {\"x\": 9.797979797979798, \"y\": -0.9311647348436916, \"function\": \"Cosine\"}, {\"x\": 9.8989898989899, \"y\": -0.8896528563926016, \"function\": \"Cosine\"}, {\"x\": 10.0, \"y\": -0.8390715290764524, \"function\": \"Cosine\"}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Heatmap\n\n**Matplotlib:**\n\n::: {#ef0912a7 .cell execution_count=13}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.rand(10, 12)\n\nplt.figure(figsize=(10, 8))\nplt.imshow(data, cmap='viridis')\nplt.colorbar(label='Value')\nplt.title('Matplotlib Heatmap')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#b8a21d8e .cell execution_count=14}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.rand(10, 12)\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(data, annot=True, cmap='viridis', fmt='.2f')\nplt.title('Seaborn Heatmap')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-1.png){}\n:::\n:::\n\n\n**Altair:**\n\n::: {#386dc776 .cell execution_count=15}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data\ndata = np.random.rand(10, 12)\ndf = pd.DataFrame(data)\n\n# Reshape for Altair\ndf_long = df.reset_index().melt(id_vars='index')\ndf_long.columns = ['y', 'x', 'value']\n\nalt.Chart(df_long).mark_rect().encode(\n    x='x:O',\n    y='y:O',\n    color='value:Q'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Heatmap'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n\n<style>\n  #altair-viz-092114f6982d4160aa0b64954c1aa22a.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-092114f6982d4160aa0b64954c1aa22a.vega-embed details,\n  #altair-viz-092114f6982d4160aa0b64954c1aa22a.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-092114f6982d4160aa0b64954c1aa22a\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-092114f6982d4160aa0b64954c1aa22a\") {\n      outputDiv = document.getElementById(\"altair-viz-092114f6982d4160aa0b64954c1aa22a\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-962cf0a10f64ed82b03f85ac7e735475\"}, \"mark\": {\"type\": \"rect\"}, \"encoding\": {\"color\": {\"field\": \"value\", \"type\": \"quantitative\"}, \"x\": {\"field\": \"x\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"y\", \"type\": \"ordinal\"}}, \"height\": 400, \"title\": \"Altair Heatmap\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-962cf0a10f64ed82b03f85ac7e735475\": [{\"y\": 0, \"x\": 0, \"value\": 0.34580355785784955}, {\"y\": 1, \"x\": 0, \"value\": 0.44431367763648666}, {\"y\": 2, \"x\": 0, \"value\": 0.7414022276526876}, {\"y\": 3, \"x\": 0, \"value\": 0.02947093113366206}, {\"y\": 4, \"x\": 0, \"value\": 0.6599705189169337}, {\"y\": 5, \"x\": 0, \"value\": 0.8545525070032464}, {\"y\": 6, \"x\": 0, \"value\": 0.3388553671596938}, {\"y\": 7, \"x\": 0, \"value\": 0.21334361534785862}, {\"y\": 8, \"x\": 0, \"value\": 0.1677871350996789}, {\"y\": 9, \"x\": 0, \"value\": 0.16221665963562681}, {\"y\": 0, \"x\": 1, \"value\": 0.22277749339342134}, {\"y\": 1, \"x\": 1, \"value\": 0.031184397582212475}, {\"y\": 2, \"x\": 1, \"value\": 0.2131694913239509}, {\"y\": 3, \"x\": 1, \"value\": 0.8009969756528921}, {\"y\": 4, \"x\": 1, \"value\": 0.02014991709025027}, {\"y\": 5, \"x\": 1, \"value\": 0.8637855488935975}, {\"y\": 6, \"x\": 1, \"value\": 0.18588455198772114}, {\"y\": 7, \"x\": 1, \"value\": 0.8023277214132267}, {\"y\": 8, \"x\": 1, \"value\": 0.07655969131928464}, {\"y\": 9, \"x\": 1, \"value\": 0.9901694689040654}, {\"y\": 0, \"x\": 2, \"value\": 0.5904186725281322}, {\"y\": 1, \"x\": 2, \"value\": 0.26318629187754017}, {\"y\": 2, \"x\": 2, \"value\": 0.5317529227732122}, {\"y\": 3, \"x\": 2, \"value\": 0.12821887857483638}, {\"y\": 4, \"x\": 2, \"value\": 0.770700508769335}, {\"y\": 5, \"x\": 2, \"value\": 0.6848514761392466}, {\"y\": 6, \"x\": 2, \"value\": 0.22489698888047505}, {\"y\": 7, \"x\": 2, \"value\": 0.7653895490167465}, {\"y\": 8, \"x\": 2, \"value\": 0.3613448357043909}, {\"y\": 9, \"x\": 2, \"value\": 0.6960714001281446}, {\"y\": 0, \"x\": 3, \"value\": 0.16132706380605177}, {\"y\": 1, \"x\": 3, \"value\": 0.839791587124204}, {\"y\": 2, \"x\": 3, \"value\": 0.8142455766833439}, {\"y\": 3, \"x\": 3, \"value\": 0.12055742260718216}, {\"y\": 4, \"x\": 3, \"value\": 0.8050748935805345}, {\"y\": 5, \"x\": 3, \"value\": 0.4612169335664469}, {\"y\": 6, \"x\": 3, \"value\": 0.5719392548944305}, {\"y\": 7, \"x\": 3, \"value\": 0.9062921850506958}, {\"y\": 8, \"x\": 3, \"value\": 0.7412885930231495}, {\"y\": 9, \"x\": 3, \"value\": 0.23665132678150536}, {\"y\": 0, \"x\": 4, \"value\": 0.5474568880616256}, {\"y\": 1, \"x\": 4, \"value\": 0.4182964551719799}, {\"y\": 2, \"x\": 4, \"value\": 0.0688432284582674}, {\"y\": 3, \"x\": 4, \"value\": 0.6161372532820144}, {\"y\": 4, \"x\": 4, \"value\": 0.35243442720127593}, {\"y\": 5, \"x\": 4, \"value\": 0.8567956945544786}, {\"y\": 6, \"x\": 4, \"value\": 0.9133251381476201}, {\"y\": 7, \"x\": 4, \"value\": 0.6791785505055928}, {\"y\": 8, \"x\": 4, \"value\": 0.10876035565201458}, {\"y\": 9, \"x\": 4, \"value\": 0.13772101274067006}, {\"y\": 0, \"x\": 5, \"value\": 0.3818912740219702}, {\"y\": 1, \"x\": 5, \"value\": 0.5565865217987916}, {\"y\": 2, \"x\": 5, \"value\": 0.156522284981104}, {\"y\": 3, \"x\": 5, \"value\": 0.5014642741944467}, {\"y\": 4, \"x\": 5, \"value\": 0.29300848926137657}, {\"y\": 5, \"x\": 5, \"value\": 0.2164147108702723}, {\"y\": 6, \"x\": 5, \"value\": 0.7253941846765023}, {\"y\": 7, \"x\": 5, \"value\": 0.6180730184342008}, {\"y\": 8, \"x\": 5, \"value\": 0.3892890618169085}, {\"y\": 9, \"x\": 5, \"value\": 0.7781182197823134}, {\"y\": 0, \"x\": 6, \"value\": 0.2636677421888012}, {\"y\": 1, \"x\": 6, \"value\": 0.677591321109231}, {\"y\": 2, \"x\": 6, \"value\": 0.8929745394488298}, {\"y\": 3, \"x\": 6, \"value\": 0.3500955412148471}, {\"y\": 4, \"x\": 6, \"value\": 0.2017189619699259}, {\"y\": 5, \"x\": 6, \"value\": 0.32148155766807895}, {\"y\": 6, \"x\": 6, \"value\": 0.31791139090845977}, {\"y\": 7, \"x\": 6, \"value\": 0.18420469204837586}, {\"y\": 8, \"x\": 6, \"value\": 0.5480019072768074}, {\"y\": 9, \"x\": 6, \"value\": 0.5647852733970733}, {\"y\": 0, \"x\": 7, \"value\": 0.8655979673091955}, {\"y\": 1, \"x\": 7, \"value\": 0.1297737226068577}, {\"y\": 2, \"x\": 7, \"value\": 0.9799818485961083}, {\"y\": 3, \"x\": 7, \"value\": 0.7418955102486856}, {\"y\": 4, \"x\": 7, \"value\": 0.647544520334013}, {\"y\": 5, \"x\": 7, \"value\": 0.04851824186263254}, {\"y\": 6, \"x\": 7, \"value\": 0.7680134407203504}, {\"y\": 7, \"x\": 7, \"value\": 0.43056541038980223}, {\"y\": 8, \"x\": 7, \"value\": 0.19371885477747453}, {\"y\": 9, \"x\": 7, \"value\": 0.404255538463718}, {\"y\": 0, \"x\": 8, \"value\": 0.36572376417897756}, {\"y\": 1, \"x\": 8, \"value\": 0.587470542539543}, {\"y\": 2, \"x\": 8, \"value\": 0.4551481020184842}, {\"y\": 3, \"x\": 8, \"value\": 0.25617953129171744}, {\"y\": 4, \"x\": 8, \"value\": 0.3151414839111002}, {\"y\": 5, \"x\": 8, \"value\": 0.6091120641233932}, {\"y\": 6, \"x\": 8, \"value\": 0.1013098617691377}, {\"y\": 7, \"x\": 8, \"value\": 0.643061489129985}, {\"y\": 8, \"x\": 8, \"value\": 0.5898679044572003}, {\"y\": 9, \"x\": 8, \"value\": 0.8892770079228007}, {\"y\": 0, \"x\": 9, \"value\": 0.011832569515776936}, {\"y\": 1, \"x\": 9, \"value\": 0.6469093583742642}, {\"y\": 2, \"x\": 9, \"value\": 0.18639411301400433}, {\"y\": 3, \"x\": 9, \"value\": 0.49674475322249145}, {\"y\": 4, \"x\": 9, \"value\": 0.8947404586265262}, {\"y\": 5, \"x\": 9, \"value\": 0.14856094162095534}, {\"y\": 6, \"x\": 9, \"value\": 0.25936089392745976}, {\"y\": 7, \"x\": 9, \"value\": 0.07630837967161197}, {\"y\": 8, \"x\": 9, \"value\": 0.988738886040162}, {\"y\": 9, \"x\": 9, \"value\": 0.03334622183518643}, {\"y\": 0, \"x\": 10, \"value\": 0.2268675626486356}, {\"y\": 1, \"x\": 10, \"value\": 0.051853601480385425}, {\"y\": 2, \"x\": 10, \"value\": 0.8899088278402363}, {\"y\": 3, \"x\": 10, \"value\": 0.7812044526989234}, {\"y\": 4, \"x\": 10, \"value\": 0.9364878820112064}, {\"y\": 5, \"x\": 10, \"value\": 0.8330043720582979}, {\"y\": 6, \"x\": 10, \"value\": 0.18235678938607236}, {\"y\": 7, \"x\": 10, \"value\": 0.8118657860592188}, {\"y\": 8, \"x\": 10, \"value\": 0.7541007372670213}, {\"y\": 9, \"x\": 10, \"value\": 0.0069404696698924795}, {\"y\": 0, \"x\": 11, \"value\": 0.07590413174661148}, {\"y\": 1, \"x\": 11, \"value\": 0.8944152695576272}, {\"y\": 2, \"x\": 11, \"value\": 0.03903194634141727}, {\"y\": 3, \"x\": 11, \"value\": 0.031477092182951916}, {\"y\": 4, \"x\": 11, \"value\": 0.8162427132046136}, {\"y\": 5, \"x\": 11, \"value\": 0.39813611678320826}, {\"y\": 6, \"x\": 11, \"value\": 0.9069864420451378}, {\"y\": 7, \"x\": 11, \"value\": 0.5568880425239336}, {\"y\": 8, \"x\": 11, \"value\": 0.9539866987177306}, {\"y\": 9, \"x\": 11, \"value\": 0.46754128641093284}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n## Decision Framework for Choosing a Library\n\n### Choose Matplotlib when:\n- You need complete control over every detail of your visualization\n- You're creating complex, custom plots\n- Your visualizations will be included in scientific publications\n- You're working with very large datasets\n- You need to create animations or specialized chart types\n\n### Choose Seaborn when:\n- You want attractive plots with minimal code\n- You're performing statistical analysis\n- You want to create common statistical plots quickly\n- You need to visualize relationships between variables\n- You want good-looking defaults but still need some customization\n\n### Choose Altair when:\n- You want interactive visualizations\n- You prefer a declarative approach to visualization\n- You want concise, readable code\n- You're creating dashboards or web-based visualizations\n- You're working with small to medium-sized datasets\n\n## Integration Examples\n\n### Combining Seaborn with Matplotlib:\n\n::: {#dc3e330c .cell execution_count=16}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\n\n# Create sample data\nnp.random.seed(42)\ndata = pd.DataFrame({\n    'x': np.random.normal(0, 1, 100),\n    'y': np.random.normal(0, 1, 100),\n    'category': np.random.choice(['A', 'B', 'C'], 100)\n})\n\n# Create a figure with Matplotlib\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Use Seaborn for the main plot\nsns.scatterplot(data=data, x='x', y='y', hue='category', ax=ax)\n\n# Add Matplotlib customizations\nax.set_title('Combining Matplotlib and Seaborn', fontsize=16)\nax.grid(True, linestyle='--', alpha=0.7)\nax.set_xlabel('X Variable', fontsize=12)\nax.set_ylabel('Y Variable', fontsize=12)\n\n# Add annotations using Matplotlib\nax.annotate('Interesting Point', xy=(-1, 1), xytext=(-2, 1.5),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){}\n:::\n:::\n\n\n### Using Altair with Pandas:\n\n::: {#bab89b6a .cell execution_count=17}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data with pandas\nnp.random.seed(42)\ndf = pd.DataFrame({\n    'date': pd.date_range('2023-01-01', periods=100),\n    'value': np.cumsum(np.random.randn(100)),\n    'category': np.random.choice(['Group A', 'Group B'], 100)\n})\n\n# Use pandas to prepare the data\ndf['month'] = df['date'].dt.month\nmonthly_avg = df.groupby(['month', 'category'])['value'].mean().reset_index()\n\n# Create the Altair visualization\nchart = alt.Chart(monthly_avg).mark_line(point=True).encode(\n    x='month:O',\n    y='value:Q',\n    color='category:N',\n    tooltip=['month', 'value', 'category']\n).properties(\n    width=600,\n    height=400,\n    title='Monthly Averages by Category'\n).interactive()\n\nchart\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n\n<style>\n  #altair-viz-702aa36247d1433788278cb6741531f5.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-702aa36247d1433788278cb6741531f5.vega-embed details,\n  #altair-viz-702aa36247d1433788278cb6741531f5.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-702aa36247d1433788278cb6741531f5\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-702aa36247d1433788278cb6741531f5\") {\n      outputDiv = document.getElementById(\"altair-viz-702aa36247d1433788278cb6741531f5\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-a541d48ae4ddcdd5651af34b355e0012\"}, \"mark\": {\"type\": \"line\", \"point\": true}, \"encoding\": {\"color\": {\"field\": \"category\", \"type\": \"nominal\"}, \"tooltip\": [{\"field\": \"month\", \"type\": \"quantitative\"}, {\"field\": \"value\", \"type\": \"quantitative\"}, {\"field\": \"category\", \"type\": \"nominal\"}], \"x\": {\"field\": \"month\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"value\", \"type\": \"quantitative\"}}, \"height\": 400, \"params\": [{\"name\": \"param_2\", \"select\": {\"type\": \"interval\", \"encodings\": [\"x\", \"y\"]}, \"bind\": \"scales\"}], \"title\": \"Monthly Averages by Category\", \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-a541d48ae4ddcdd5651af34b355e0012\": [{\"month\": 1, \"category\": \"Group A\", \"value\": -1.1687602478608594}, {\"month\": 1, \"category\": \"Group B\", \"value\": 0.1733373892143235}, {\"month\": 2, \"category\": \"Group A\", \"value\": -8.844550443778122}, {\"month\": 2, \"category\": \"Group B\", \"value\": -8.735931823731262}, {\"month\": 3, \"category\": \"Group A\", \"value\": -8.844299433609882}, {\"month\": 3, \"category\": \"Group B\", \"value\": -9.455147207445952}, {\"month\": 4, \"category\": \"Group A\", \"value\": -9.520630718321136}, {\"month\": 4, \"category\": \"Group B\", \"value\": -9.494528166538776}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n## Performance Comparison\n\nFor libraries like Matplotlib, Seaborn, and Altair, performance can vary widely depending on the size of your dataset and the complexity of your visualization. Here's a general overview:\n\n### Small Datasets (< 1,000 points):\n- All three libraries perform well\n- Altair might have slightly more overhead due to its JSON specification generation\n\n### Medium Datasets (1,000 - 10,000 points):\n- Matplotlib and Seaborn continue to perform well\n- Altair starts to slow down but remains usable\n\n### Large Datasets (> 10,000 points):\n- Matplotlib performs best for large static visualizations\n- Seaborn becomes slower as it adds statistical computations\n- Altair significantly slows down and may require data aggregation\n\n### Recommended Approaches for Large Data:\n1. **Matplotlib**: Use `plot()` instead of `scatter()` for line plots, or try `hexbin()` for density plots\n2. **Seaborn**: Use `sample()` or aggregation methods before plotting\n3. **Altair**: Use `transform_sample()` or pre-aggregate your data\n\n## Conclusion\n\nThe Python visualization ecosystem offers tools for every need, from low-level control to high-level abstraction:\n\n- **Matplotlib** provides ultimate flexibility and control but requires more code and knowledge\n- **Seaborn** offers a perfect middle ground with statistical integration and clean defaults\n- **Altair** delivers a concise, declarative approach with built-in interactivity\n\nRather than picking just one library, consider becoming familiar with all three and selecting the right tool for each visualization task. Many data scientists use a combination of these libraries, leveraging the strengths of each one as needed.\n\nFor those just starting, Seaborn provides a gentle entry point with attractive results for common visualization needs. As your skills advance, you can incorporate Matplotlib for customization and Altair for interactive visualizations.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}