{
  "hash": "c60d427787000af29dbea0e4d58e591e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python Data Visualization: Matplotlib vs Seaborn vs Altair\"\nauthor: \"Krishnatheja Vanka\"\ndate: \"2025-04-12\"\ncategories: [code, tutorial]\nformat:\n  html:\n    code-fold: false\nexecute:\n  echo: true\n  timing: true\njupyter: python3\n---\n\n# Python Data Visualization: Matplotlib vs Seaborn vs Altair\n\n![](dataviz.jpg)\n\nThis guide compares three popular Python data visualization libraries: Matplotlib, Seaborn, and Altair (Vega-Altair). Each library has its own strengths, weaknesses, and ideal use cases. This comparison will help you choose the right tool for your specific visualization needs.\n\n## Quick Reference Comparison\n\n| Feature | Matplotlib | Seaborn | Altair |\n|---------|------------|---------|--------|\n| **Release Year** | 2003 | 2013 | 2016 |\n| **Foundation** | Standalone | Built on Matplotlib | Based on Vega-Lite |\n| **Philosophy** | Imperative | Statistical | Declarative |\n| **Abstraction Level** | Low | Medium | High |\n| **Learning Curve** | Steep | Moderate | Gentle |\n| **Code Verbosity** | High | Medium | Low |\n| **Customization** | Extensive | Good | Limited |\n| **Statistical Integration** | Manual | Built-in | Good |\n| **Interactive Features** | Limited | Limited | Excellent |\n| **Performance with Large Data** | Good | Moderate | Limited |\n| **Community & Resources** | Extensive | Good | Growing |\n\n## Matplotlib\n\nMatplotlib is the foundational plotting library in Python's data visualization ecosystem.\n\n### Strengths:\n- **Fine-grained control**: Almost every aspect of a visualization can be customized\n- **Versatility**: Can create virtually any type of static plot\n- **Maturity**: Extensive documentation and community support\n- **Ecosystem integration**: Many libraries integrate with or build upon Matplotlib\n- **Performance**: Handles large datasets well\n\n### Weaknesses:\n- **Verbose syntax**: Requires many lines of code for complex visualizations\n- **Steep learning curve**: Many functions and parameters to learn\n- **Default aesthetics**: Basic default styling (though this has improved)\n- **Limited interactivity**: Primarily designed for static plots\n\n### Example Code:\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Plot data\nax.plot(x, y, label='Sine Wave')\n\n# Add grid, legend, title and labels\nax.grid(True)\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Simple Sine Wave Plot')\nax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n### When to use Matplotlib:\n- You need complete control over every aspect of your visualization\n- You're creating complex, publication-quality figures\n- You're working with specialized plot types not available in higher-level libraries\n- You need to integrate with many other Python libraries\n- You're working with large datasets\n\n## Seaborn\n\nSeaborn is a statistical visualization library built on top of Matplotlib.\n\n### Strengths:\n- **Aesthetic defaults**: Beautiful out-of-the-box styling\n- **Statistical integration**: Built-in support for statistical visualizations\n- **Dataset awareness**: Works well with pandas DataFrames\n- **Simplicity**: Fewer lines of code than Matplotlib for common plots\n- **High-level functions**: Specialized plots like `lmplot`, `catplot`, etc.\n\n### Weaknesses:\n- **Limited customization**: Some advanced customizations require falling back to Matplotlib\n- **Performance**: Can be slower with very large datasets\n- **Restricted scope**: Focused on statistical visualization, not general-purpose plotting\n\n### Example Code:\n```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, size=len(x))\ndata = pd.DataFrame({'x': x, 'y': y})\n\n# Set the aesthetic style\nsns.set_theme(style=\"whitegrid\")\n\n# Create the plot\nplt.figure(figsize=(8, 4))\nsns.lineplot(data=data, x='x', y='y', label='Noisy Sine Wave')\nsns.regplot(data=data, x='x', y='y', scatter=False, label='Regression Line')\n\n# Add title and labels\nplt.title('Seaborn Line Plot with Regression')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n### When to use Seaborn:\n- You want attractive visualizations with minimal code\n- You're performing statistical analysis\n- You're working with pandas DataFrames\n- You're creating common statistical plots (distributions, relationships, categorical plots)\n- You want the power of Matplotlib with a simpler interface\n\n## Altair (Vega-Altair)\n\nAltair is a declarative statistical visualization library based on Vega-Lite.\n\n### Strengths:\n- **Declarative approach**: Focus on what to visualize, not how to draw it\n- **Concise syntax**: Very readable, clear code\n- **Layered grammar of graphics**: Intuitive composition of plots\n- **Interactive visualizations**: Built-in support for interactive features\n- **JSON output**: Visualizations can be saved as JSON specifications\n\n### Weaknesses:\n- **Performance limitations**: Not ideal for very large datasets (>5000 points)\n- **Limited customization**: Less fine-grained control than Matplotlib\n- **Learning curve**: Different paradigm from traditional plotting libraries\n- **Browser dependency**: Uses JavaScript rendering for advanced features\n\n### Example Code:\n```python\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, size=len(x))\ndata = pd.DataFrame({'x': x, 'y': y})\n\n# Create a simple scatter plot with interactive tooltips\nchart = alt.Chart(data).mark_circle().encode(\n    x='x',\n    y='y',\n    tooltip=['x', 'y']\n).properties(\n    width=600,\n    height=300,\n    title='Interactive Altair Scatter Plot'\n).interactive()\n\n# Add a regression line\nregression = alt.Chart(data).transform_regression(\n    'x', 'y'\n).mark_line(color='red').encode(\n    x='x',\n    y='y'\n)\n\n# Combine the plots\nfinal_chart = chart + regression\n\n# Display the chart\nfinal_chart\n```\n\n### When to use Altair:\n- You want interactive visualizations\n- You prefer a declarative approach to visualization\n- You're working with small to medium-sized datasets\n- You want to publish visualizations on the web\n- You appreciate a consistent grammar of graphics\n\n## Common Visualization Types Comparison\n\n### Scatter Plot\n\n**Matplotlib:**\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.randn(100)\ny = np.random.randn(100)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y, alpha=0.7)\nplt.title('Matplotlib Scatter Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.grid(True)\nplt.show()\n```\n\n**Seaborn:**\n```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100)\n})\n\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=data, x='x', y='y', alpha=0.7)\nplt.title('Seaborn Scatter Plot')\nplt.show()\n```\n\n**Altair:**\n```python\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100)\n})\n\nalt.Chart(data).mark_circle(opacity=0.7).encode(\n    x='x',\n    y='y'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Scatter Plot'\n)\n```\n\n### Histogram\n\n**Matplotlib:**\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\n\nplt.figure(figsize=(8, 6))\nplt.hist(data, bins=30, alpha=0.7, edgecolor='black')\nplt.title('Matplotlib Histogram')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n**Seaborn:**\n```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\n\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(8, 6))\nsns.histplot(data=data, bins=30, kde=True)\nplt.title('Seaborn Histogram with KDE')\nplt.show()\n```\n\n**Altair:**\n```python\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({'value': np.random.randn(1000)})\n\nalt.Chart(data).mark_bar().encode(\n    alt.X('value', bin=alt.Bin(maxbins=30)),\n    y='count()'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Histogram'\n)\n```\n\n### Line Plot\n\n**Matplotlib:**\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nplt.figure(figsize=(10, 6))\nplt.plot(x, y1, label='Sine')\nplt.plot(x, y2, label='Cosine')\nplt.title('Matplotlib Line Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n**Seaborn:**\n```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nx = np.linspace(0, 10, 100)\ndata = pd.DataFrame({\n    'x': np.concatenate([x, x]),\n    'y': np.concatenate([np.sin(x), np.cos(x)]),\n    'function': ['Sine']*100 + ['Cosine']*100\n})\n\nsns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=data, x='x', y='y', hue='function')\nplt.title('Seaborn Line Plot')\nplt.show()\n```\n\n**Altair:**\n```python\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ndata = pd.DataFrame({\n    'x': np.concatenate([x, x]),\n    'y': np.concatenate([np.sin(x), np.cos(x)]),\n    'function': ['Sine']*100 + ['Cosine']*100\n})\n\nalt.Chart(data).mark_line().encode(\n    x='x',\n    y='y',\n    color='function'\n).properties(\n    width=600,\n    height=400,\n    title='Altair Line Plot'\n)\n```\n\n### Heatmap\n\n**Matplotlib:**\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.rand(10, 12)\n\nplt.figure(figsize=(10, 8))\nplt.imshow(data, cmap='viridis')\nplt.colorbar(label='Value')\nplt.title('Matplotlib Heatmap')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```\n\n**Seaborn:**\n```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.rand(10, 12)\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(data, annot=True, cmap='viridis', fmt='.2f')\nplt.title('Seaborn Heatmap')\nplt.show()\n```\n\n**Altair:**\n```python\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data\ndata = np.random.rand(10, 12)\ndf = pd.DataFrame(data)\n\n# Reshape for Altair\ndf_long = df.reset_index().melt(id_vars='index')\ndf_long.columns = ['y', 'x', 'value']\n\nalt.Chart(df_long).mark_rect().encode(\n    x='x:O',\n    y='y:O',\n    color='value:Q'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Heatmap'\n)\n```\n\n## Decision Framework for Choosing a Library\n\n### Choose Matplotlib when:\n- You need complete control over every detail of your visualization\n- You're creating complex, custom plots\n- Your visualizations will be included in scientific publications\n- You're working with very large datasets\n- You need to create animations or specialized chart types\n\n### Choose Seaborn when:\n- You want attractive plots with minimal code\n- You're performing statistical analysis\n- You want to create common statistical plots quickly\n- You need to visualize relationships between variables\n- You want good-looking defaults but still need some customization\n\n### Choose Altair when:\n- You want interactive visualizations\n- You prefer a declarative approach to visualization\n- You want concise, readable code\n- You're creating dashboards or web-based visualizations\n- You're working with small to medium-sized datasets\n\n## Integration Examples\n\n### Combining Seaborn with Matplotlib:\n```python\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\n\n# Create sample data\nnp.random.seed(42)\ndata = pd.DataFrame({\n    'x': np.random.normal(0, 1, 100),\n    'y': np.random.normal(0, 1, 100),\n    'category': np.random.choice(['A', 'B', 'C'], 100)\n})\n\n# Create a figure with Matplotlib\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Use Seaborn for the main plot\nsns.scatterplot(data=data, x='x', y='y', hue='category', ax=ax)\n\n# Add Matplotlib customizations\nax.set_title('Combining Matplotlib and Seaborn', fontsize=16)\nax.grid(True, linestyle='--', alpha=0.7)\nax.set_xlabel('X Variable', fontsize=12)\nax.set_ylabel('Y Variable', fontsize=12)\n\n# Add annotations using Matplotlib\nax.annotate('Interesting Point', xy=(-1, 1), xytext=(-2, 1.5),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.tight_layout()\nplt.show()\n```\n\n### Using Altair with Pandas:\n```python\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data with pandas\nnp.random.seed(42)\ndf = pd.DataFrame({\n    'date': pd.date_range('2023-01-01', periods=100),\n    'value': np.cumsum(np.random.randn(100)),\n    'category': np.random.choice(['Group A', 'Group B'], 100)\n})\n\n# Use pandas to prepare the data\ndf['month'] = df['date'].dt.month\nmonthly_avg = df.groupby(['month', 'category'])['value'].mean().reset_index()\n\n# Create the Altair visualization\nchart = alt.Chart(monthly_avg).mark_line(point=True).encode(\n    x='month:O',\n    y='value:Q',\n    color='category:N',\n    tooltip=['month', 'value', 'category']\n).properties(\n    width=600,\n    height=400,\n    title='Monthly Averages by Category'\n).interactive()\n\nchart\n```\n\n## Performance Comparison\n\nFor libraries like Matplotlib, Seaborn, and Altair, performance can vary widely depending on the size of your dataset and the complexity of your visualization. Here's a general overview:\n\n### Small Datasets (< 1,000 points):\n- All three libraries perform well\n- Altair might have slightly more overhead due to its JSON specification generation\n\n### Medium Datasets (1,000 - 10,000 points):\n- Matplotlib and Seaborn continue to perform well\n- Altair starts to slow down but remains usable\n\n### Large Datasets (> 10,000 points):\n- Matplotlib performs best for large static visualizations\n- Seaborn becomes slower as it adds statistical computations\n- Altair significantly slows down and may require data aggregation\n\n### Recommended Approaches for Large Data:\n1. **Matplotlib**: Use `plot()` instead of `scatter()` for line plots, or try `hexbin()` for density plots\n2. **Seaborn**: Use `sample()` or aggregation methods before plotting\n3. **Altair**: Use `transform_sample()` or pre-aggregate your data\n\n## Conclusion\n\nThe Python visualization ecosystem offers tools for every need, from low-level control to high-level abstraction:\n\n- **Matplotlib** provides ultimate flexibility and control but requires more code and knowledge\n- **Seaborn** offers a perfect middle ground with statistical integration and clean defaults\n- **Altair** delivers a concise, declarative approach with built-in interactivity\n\nRather than picking just one library, consider becoming familiar with all three and selecting the right tool for each visualization task. Many data scientists use a combination of these libraries, leveraging the strengths of each one as needed.\n\nFor those just starting, Seaborn provides a gentle entry point with attractive results for common visualization needs. As your skills advance, you can incorporate Matplotlib for customization and Altair for interactive visualizations.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}