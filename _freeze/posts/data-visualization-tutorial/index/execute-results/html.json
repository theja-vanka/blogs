{
  "hash": "8e47f814d7cf22d58abb51b8ff883745",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python Data Visualization: Matplotlib vs Seaborn vs Altair\"\nauthor: \"Krishnatheja Vanka\"\ndate: \"2025-04-12\"\ncategories: [code, tutorial, beginner]\nformat:\n  html:\n    code-fold: false\nexecute:\n  echo: true\n  timing: true\njupyter: python3\n---\n\n# Python Data Visualization: Matplotlib vs Seaborn vs Altair\n\n![](dataviz.jpg)\n\nThis guide compares three popular Python data visualization libraries: Matplotlib, Seaborn, and Altair (Vega-Altair). Each library has its own strengths, weaknesses, and ideal use cases. This comparison will help you choose the right tool for your specific visualization needs.\n\n## Quick Reference Comparison\n\n| Feature | Matplotlib | Seaborn | Altair |\n|---------|------------|---------|--------|\n| **Release Year** | 2003 | 2013 | 2016 |\n| **Foundation** | Standalone | Built on Matplotlib | Based on Vega-Lite |\n| **Philosophy** | Imperative | Statistical | Declarative |\n| **Abstraction Level** | Low | Medium | High |\n| **Learning Curve** | Steep | Moderate | Gentle |\n| **Code Verbosity** | High | Medium | Low |\n| **Customization** | Extensive | Good | Limited |\n| **Statistical Integration** | Manual | Built-in | Good |\n| **Interactive Features** | Limited | Limited | Excellent |\n| **Performance with Large Data** | Good | Moderate | Limited |\n| **Community & Resources** | Extensive | Good | Growing |\n\n## Matplotlib\n\nMatplotlib is the foundational plotting library in Python's data visualization ecosystem.\n\n### Strengths:\n- **Fine-grained control**: Almost every aspect of a visualization can be customized\n- **Versatility**: Can create virtually any type of static plot\n- **Maturity**: Extensive documentation and community support\n- **Ecosystem integration**: Many libraries integrate with or build upon Matplotlib\n- **Performance**: Handles large datasets well\n\n### Weaknesses:\n- **Verbose syntax**: Requires many lines of code for complex visualizations\n- **Steep learning curve**: Many functions and parameters to learn\n- **Default aesthetics**: Basic default styling (though this has improved)\n- **Limited interactivity**: Primarily designed for static plots\n\n### Example Code:\n\n::: {#a720b8eb .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Plot data\nax.plot(x, y, label='Sine Wave')\n\n# Add grid, legend, title and labels\nax.grid(True)\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Simple Sine Wave Plot')\nax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=758 height=374}\n:::\n:::\n\n\n### When to use Matplotlib:\n- You need complete control over every aspect of your visualization\n- You're creating complex, publication-quality figures\n- You're working with specialized plot types not available in higher-level libraries\n- You need to integrate with many other Python libraries\n- You're working with large datasets\n\n## Seaborn\n\nSeaborn is a statistical visualization library built on top of Matplotlib.\n\n### Strengths:\n- **Aesthetic defaults**: Beautiful out-of-the-box styling\n- **Statistical integration**: Built-in support for statistical visualizations\n- **Dataset awareness**: Works well with pandas DataFrames\n- **Simplicity**: Fewer lines of code than Matplotlib for common plots\n- **High-level functions**: Specialized plots like `lmplot`, `catplot`, etc.\n\n### Weaknesses:\n- **Limited customization**: Some advanced customizations require falling back to Matplotlib\n- **Performance**: Can be slower with very large datasets\n- **Restricted scope**: Focused on statistical visualization, not general-purpose plotting\n\n### Example Code:\n\n::: {#8f0dfaa8 .cell execution_count=2}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, size=len(x))\ndata = pd.DataFrame({'x': x, 'y': y})\n\n# Set the aesthetic style\nsns.set_theme(style=\"whitegrid\")\n\n# Create the plot\nplt.figure(figsize=(8, 4))\nsns.lineplot(data=data, x='x', y='y', label='Noisy Sine Wave')\nsns.regplot(data=data, x='x', y='y', scatter=False, label='Regression Line')\n\n# Add title and labels\nplt.title('Seaborn Line Plot with Regression')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=752 height=368}\n:::\n:::\n\n\n### When to use Seaborn:\n- You want attractive visualizations with minimal code\n- You're performing statistical analysis\n- You're working with pandas DataFrames\n- You're creating common statistical plots (distributions, relationships, categorical plots)\n- You want the power of Matplotlib with a simpler interface\n\n## Altair (Vega-Altair)\n\nAltair is a declarative statistical visualization library based on Vega-Lite.\n\n### Strengths:\n- **Declarative approach**: Focus on what to visualize, not how to draw it\n- **Concise syntax**: Very readable, clear code\n- **Layered grammar of graphics**: Intuitive composition of plots\n- **Interactive visualizations**: Built-in support for interactive features\n- **JSON output**: Visualizations can be saved as JSON specifications\n\n### Weaknesses:\n- **Performance limitations**: Not ideal for very large datasets (>5000 points)\n- **Limited customization**: Less fine-grained control than Matplotlib\n- **Learning curve**: Different paradigm from traditional plotting libraries\n- **Browser dependency**: Uses JavaScript rendering for advanced features\n\n### Example Code:\n\n::: {#b0f2ef3d .cell execution_count=3}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, size=len(x))\ndata = pd.DataFrame({'x': x, 'y': y})\n\n# Create a simple scatter plot with interactive tooltips\nchart = alt.Chart(data).mark_circle().encode(\n    x='x',\n    y='y',\n    tooltip=['x', 'y']\n).properties(\n    width=600,\n    height=300,\n    title='Interactive Altair Scatter Plot'\n).interactive()\n\n# Add a regression line\nregression = alt.Chart(data).transform_regression(\n    'x', 'y'\n).mark_line(color='red').encode(\n    x='x',\n    y='y'\n)\n\n# Combine the plots\nfinal_chart = chart + regression\n\n# Display the chart\nfinal_chart\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n\n<style>\n  #altair-viz-a83308c17f4c4671823ed8f6e2bf342a.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-a83308c17f4c4671823ed8f6e2bf342a.vega-embed details,\n  #altair-viz-a83308c17f4c4671823ed8f6e2bf342a.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-a83308c17f4c4671823ed8f6e2bf342a\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-a83308c17f4c4671823ed8f6e2bf342a\") {\n      outputDiv = document.getElementById(\"altair-viz-a83308c17f4c4671823ed8f6e2bf342a\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"layer\": [{\"mark\": {\"type\": \"circle\"}, \"encoding\": {\"tooltip\": [{\"field\": \"x\", \"type\": \"quantitative\"}, {\"field\": \"y\", \"type\": \"quantitative\"}], \"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"name\": \"view_1\", \"title\": \"Interactive Altair Scatter Plot\"}, {\"mark\": {\"type\": \"line\", \"color\": \"red\"}, \"encoding\": {\"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"transform\": [{\"on\": \"x\", \"regression\": \"y\"}]}], \"data\": {\"name\": \"data-bf8eb64ab80a5bfd080b6c61bfe72b05\"}, \"height\": 300, \"params\": [{\"name\": \"param_1\", \"select\": {\"type\": \"interval\", \"encodings\": [\"x\", \"y\"]}, \"bind\": \"scales\", \"views\": [\"view_1\"]}], \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-bf8eb64ab80a5bfd080b6c61bfe72b05\": [{\"x\": 0.0, \"y\": -0.22975544465097256}, {\"x\": 0.10101010101010101, \"y\": 0.3255988419358467}, {\"x\": 0.20202020202020202, \"y\": 0.11546312146562618}, {\"x\": 0.30303030303030304, \"y\": 0.31289727456110633}, {\"x\": 0.40404040404040403, \"y\": 0.10561733529286255}, {\"x\": 0.5050505050505051, \"y\": 0.32521311574680134}, {\"x\": 0.6060606060606061, \"y\": 0.38220812179439567}, {\"x\": 0.7070707070707071, \"y\": 0.6976399787996327}, {\"x\": 0.8080808080808081, \"y\": 1.0459110470938744}, {\"x\": 0.9090909090909091, \"y\": 0.78211462038617}, {\"x\": 1.0101010101010102, \"y\": 0.7110626816902583}, {\"x\": 1.1111111111111112, \"y\": 0.9501110873021046}, {\"x\": 1.2121212121212122, \"y\": 0.8858801522217595}, {\"x\": 1.3131313131313131, \"y\": 0.7972347282829356}, {\"x\": 1.4141414141414141, \"y\": 0.6301611877484594}, {\"x\": 1.5151515151515151, \"y\": 0.8796906412384617}, {\"x\": 1.6161616161616161, \"y\": 0.9161786858023201}, {\"x\": 1.7171717171717171, \"y\": 1.2410230936834492}, {\"x\": 1.8181818181818181, \"y\": 1.2420105165522188}, {\"x\": 1.9191919191919191, \"y\": 0.8197622717039144}, {\"x\": 2.0202020202020203, \"y\": 1.1452999524747907}, {\"x\": 2.121212121212121, \"y\": 0.6525686823354612}, {\"x\": 2.2222222222222223, \"y\": 0.9083346118958897}, {\"x\": 2.323232323232323, \"y\": 0.6896821408849515}, {\"x\": 2.4242424242424243, \"y\": 0.8655819209099727}, {\"x\": 2.525252525252525, \"y\": 0.47221791401152063}, {\"x\": 2.6262626262626263, \"y\": 0.5086767271666442}, {\"x\": 2.727272727272727, \"y\": 0.11796707773568998}, {\"x\": 2.8282828282828283, \"y\": 0.4920664138209998}, {\"x\": 2.929292929292929, \"y\": 0.5019569541448469}, {\"x\": 3.0303030303030303, \"y\": 0.25255336116056404}, {\"x\": 3.131313131313131, \"y\": 0.01700343959727367}, {\"x\": 3.2323232323232323, \"y\": -0.35682970440232303}, {\"x\": 3.3333333333333335, \"y\": -0.49705844780664804}, {\"x\": 3.4343434343434343, \"y\": -0.21734496175367385}, {\"x\": 3.5353535353535355, \"y\": -0.3931393758350277}, {\"x\": 3.6363636363636362, \"y\": -0.9284934311079485}, {\"x\": 3.7373737373737375, \"y\": -0.5602862659913627}, {\"x\": 3.8383838383838382, \"y\": -0.7258384468285856}, {\"x\": 3.9393939393939394, \"y\": -0.8373325633433051}, {\"x\": 4.040404040404041, \"y\": -0.6041122646455299}, {\"x\": 4.141414141414141, \"y\": -0.9124129898333503}, {\"x\": 4.242424242424242, \"y\": -1.1740223332668567}, {\"x\": 4.343434343434343, \"y\": -1.0285948316956008}, {\"x\": 4.444444444444445, \"y\": -0.8821300829685255}, {\"x\": 4.545454545454545, \"y\": -1.0323220834496063}, {\"x\": 4.646464646464646, \"y\": -1.0112695294988585}, {\"x\": 4.747474747474747, \"y\": -1.189710683835665}, {\"x\": 4.848484848484849, \"y\": -1.1610633076891859}, {\"x\": 4.94949494949495, \"y\": -1.1052832627231683}, {\"x\": 5.05050505050505, \"y\": -0.9800069627027886}, {\"x\": 5.151515151515151, \"y\": -0.8344331778762663}, {\"x\": 5.252525252525253, \"y\": -0.9450230648974685}, {\"x\": 5.353535353535354, \"y\": -0.7576774604321362}, {\"x\": 5.454545454545454, \"y\": -0.25606146726007384}, {\"x\": 5.555555555555555, \"y\": -0.6451235610654916}, {\"x\": 5.656565656565657, \"y\": -0.4814487619147294}, {\"x\": 5.757575757575758, \"y\": -0.44688175770798544}, {\"x\": 5.858585858585858, \"y\": -0.3130187517115983}, {\"x\": 5.959595959595959, \"y\": -0.4190040245891643}, {\"x\": 6.0606060606060606, \"y\": -0.08678708387185971}, {\"x\": 6.161616161616162, \"y\": 0.14362599437036472}, {\"x\": 6.262626262626262, \"y\": 0.12211441254563338}, {\"x\": 6.363636363636363, \"y\": 0.33552834357797945}, {\"x\": 6.4646464646464645, \"y\": 0.19549823615838202}, {\"x\": 6.565656565656566, \"y\": 0.24921514928573585}, {\"x\": 6.666666666666667, \"y\": 0.35539091149972524}, {\"x\": 6.767676767676767, \"y\": 0.44627293963888287}, {\"x\": 6.8686868686868685, \"y\": 0.6667420595188118}, {\"x\": 6.96969696969697, \"y\": 0.7508703378218854}, {\"x\": 7.070707070707071, \"y\": 0.7314076475082435}, {\"x\": 7.171717171717171, \"y\": 0.8078463938578166}, {\"x\": 7.2727272727272725, \"y\": 0.994950035308731}, {\"x\": 7.373737373737374, \"y\": 0.42990313041386463}, {\"x\": 7.474747474747475, \"y\": 0.9463425757951632}, {\"x\": 7.575757575757575, \"y\": 1.1860965368973573}, {\"x\": 7.6767676767676765, \"y\": 1.1156300682236782}, {\"x\": 7.777777777777778, \"y\": 1.035892460445294}, {\"x\": 7.878787878787879, \"y\": 0.8228261989624704}, {\"x\": 7.979797979797979, \"y\": 0.9215500921234806}, {\"x\": 8.080808080808081, \"y\": 1.093293484343127}, {\"x\": 8.181818181818182, \"y\": 1.3417811834222193}, {\"x\": 8.282828282828282, \"y\": 0.9015714708310462}, {\"x\": 8.383838383838384, \"y\": 0.49257058144959864}, {\"x\": 8.484848484848484, \"y\": 0.8703172771324111}, {\"x\": 8.585858585858587, \"y\": 1.1598389173286294}, {\"x\": 8.686868686868687, \"y\": 0.768924435907666}, {\"x\": 8.787878787878787, \"y\": 0.6894682697582841}, {\"x\": 8.88888888888889, \"y\": 0.37385196380112395}, {\"x\": 8.98989898989899, \"y\": 0.4355856389376028}, {\"x\": 9.09090909090909, \"y\": 0.4603123918063178}, {\"x\": 9.191919191919192, \"y\": 0.24195043116577652}, {\"x\": 9.292929292929292, \"y\": -0.09186779861763258}, {\"x\": 9.393939393939394, \"y\": 0.13566035545992694}, {\"x\": 9.494949494949495, \"y\": 0.060048680220310374}, {\"x\": 9.595959595959595, \"y\": -0.19367920255558885}, {\"x\": 9.696969696969697, \"y\": -0.4420879684941833}, {\"x\": 9.797979797979798, \"y\": -0.190721661180353}, {\"x\": 9.8989898989899, \"y\": -0.7117242576822427}, {\"x\": 10.0, \"y\": -0.29766751543225156}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### When to use Altair:\n- You want interactive visualizations\n- You prefer a declarative approach to visualization\n- You're working with small to medium-sized datasets\n- You want to publish visualizations on the web\n- You appreciate a consistent grammar of graphics\n\n## Common Visualization Types Comparison\n\n### Scatter Plot\n\n**Matplotlib:**\n\n::: {#8b347d9e .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.randn(100)\ny = np.random.randn(100)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y, alpha=0.7)\nplt.title('Matplotlib Scatter Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=664 height=529}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#2c4cb73e .cell execution_count=5}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100)\n})\n\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=data, x='x', y='y', alpha=0.7)\nplt.title('Seaborn Scatter Plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=664 height=529}\n:::\n:::\n\n\n**Altair:**\n\n::: {#51ebe4ce .cell execution_count=6}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100)\n})\n\nalt.Chart(data).mark_circle(opacity=0.7).encode(\n    x='x',\n    y='y'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Scatter Plot'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n\n<style>\n  #altair-viz-592625ad5e8949219614a2de6f08292d.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-592625ad5e8949219614a2de6f08292d.vega-embed details,\n  #altair-viz-592625ad5e8949219614a2de6f08292d.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-592625ad5e8949219614a2de6f08292d\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-592625ad5e8949219614a2de6f08292d\") {\n      outputDiv = document.getElementById(\"altair-viz-592625ad5e8949219614a2de6f08292d\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-550ec43bb655a7334a5b9ff9336f5792\"}, \"mark\": {\"type\": \"circle\", \"opacity\": 0.7}, \"encoding\": {\"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Scatter Plot\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-550ec43bb655a7334a5b9ff9336f5792\": [{\"x\": 1.2823032895148732, \"y\": 0.4027078868504168}, {\"x\": -1.2331986098678742, \"y\": 1.1331011923496006}, {\"x\": -0.7995709264278679, \"y\": 0.22486250016284332}, {\"x\": -0.3905519313003418, \"y\": -0.7575561641355845}, {\"x\": -0.38683705454435985, \"y\": 2.211477569818533}, {\"x\": 0.16239324160909144, \"y\": 0.7866597497274074}, {\"x\": -1.4572050737742561, \"y\": -0.026027886153847886}, {\"x\": -0.17725679177049816, \"y\": 0.3908522052109607}, {\"x\": -0.242173073629369, \"y\": 0.2247532726152409}, {\"x\": 0.6645316369017227, \"y\": -0.45181477008387755}, {\"x\": -0.08352691808516442, \"y\": 0.025856205300377227}, {\"x\": -0.17282229574879843, \"y\": 0.932933212049176}, {\"x\": -0.3757809298907163, \"y\": -0.12751627539075364}, {\"x\": -0.3499455676205021, \"y\": -0.8331270926291936}, {\"x\": 0.37392857996257617, \"y\": -0.49877623363726803}, {\"x\": -0.28812085389105097, \"y\": 0.21026062176749566}, {\"x\": 1.0884529908447889, \"y\": 2.109970004277128}, {\"x\": 1.091045238710378, \"y\": -0.8242097764454895}, {\"x\": 1.1811219672700186, \"y\": -0.3899535335754742}, {\"x\": -0.3332794726578665, \"y\": 1.142737247706168}, {\"x\": -2.5206284412387956, \"y\": -0.7220782601248497}, {\"x\": 2.2625393170471133, \"y\": 0.5959842525347012}, {\"x\": -1.2517323590474445, \"y\": -0.8674046829863352}, {\"x\": 0.5844123083626732, \"y\": 0.5989874780475762}, {\"x\": -0.22903643705655816, \"y\": -0.26648853318827886}, {\"x\": -1.6882731542396088, \"y\": -1.3029707939985136}, {\"x\": -1.2305057755442455, \"y\": 0.7154600088732822}, {\"x\": 0.23653226076531234, \"y\": -0.5469598757088093}, {\"x\": -0.0755964158931829, \"y\": 0.4996361376173689}, {\"x\": -0.03665200853156904, \"y\": 1.1042011198877637}, {\"x\": -0.4859115626693641, \"y\": -1.5704829599599717}, {\"x\": 0.2756576630112604, \"y\": -0.5743798249748503}, {\"x\": 1.6041467951386597, \"y\": -0.5371310732595598}, {\"x\": -0.45136488344728026, \"y\": 0.32939867350432267}, {\"x\": 0.19041084141032596, \"y\": 1.0742338990496796}, {\"x\": -1.0328700281984233, \"y\": -2.5049713062324477}, {\"x\": -0.6255563893999202, \"y\": -0.4796581863781468}, {\"x\": 1.238688691050938, \"y\": 0.8470767477349403}, {\"x\": 0.4770840322412101, \"y\": 2.149923157209215}, {\"x\": -1.0645842284832252, \"y\": -0.8238896223663636}, {\"x\": -0.734835689870851, \"y\": -0.49222168455307813}, {\"x\": -0.23454815402174212, \"y\": 0.058698374229101236}, {\"x\": 1.5203963582962692, \"y\": -0.7227365925099403}, {\"x\": 0.3031115572071686, \"y\": 1.2492324617740727}, {\"x\": 0.7745012656960072, \"y\": 2.4503676477438043}, {\"x\": 0.42980436656737214, \"y\": -0.9369041688730757}, {\"x\": -0.5169016949518518, \"y\": -0.5071755238246074}, {\"x\": -1.2355371353462072, \"y\": 0.8370331596608718}, {\"x\": -0.08138584927013881, \"y\": -1.0780692583809088}, {\"x\": 0.264194535347192, \"y\": -0.20663279741901366}, {\"x\": -0.9159429655005302, \"y\": 1.6056390146989132}, {\"x\": 1.0431386650001844, \"y\": 1.2605767719747762}, {\"x\": -0.6208614994918168, \"y\": 0.23465296358857093}, {\"x\": 1.1239209528534657, \"y\": 0.17988202576753395}, {\"x\": 0.8435594800593337, \"y\": 0.3733645945401059}, {\"x\": -0.627978487063659, \"y\": -0.575994132287003}, {\"x\": 1.048919887777896, \"y\": 0.8226406105236787}, {\"x\": 1.730957393799558, \"y\": 1.2987153677839087}, {\"x\": -0.8010707221796741, \"y\": -0.6805486361700648}, {\"x\": -1.271414903047924, \"y\": -1.443126298414845}, {\"x\": 0.8665751251374139, \"y\": 1.1116855566250217}, {\"x\": -0.046401478724826216, \"y\": -0.9628665696978923}, {\"x\": -0.32841715005256605, \"y\": -0.04511672822071077}, {\"x\": 0.44552890501003156, \"y\": 2.5154570368791846}, {\"x\": -0.49700324477918034, \"y\": -0.34580603836211843}, {\"x\": 0.5503804833330085, \"y\": -0.7646436489028665}, {\"x\": 1.4495268416085918, \"y\": -1.320722906091814}, {\"x\": 0.07000965531656707, \"y\": -0.8808667836429208}, {\"x\": 0.20125597455462305, \"y\": -0.43379070416241944}, {\"x\": 1.4727355049886273, \"y\": 1.4340519420455173}, {\"x\": 2.349434308200561, \"y\": 0.33086460657593897}, {\"x\": -0.4638449217478461, \"y\": 0.17485742044668448}, {\"x\": 0.9709242546067536, \"y\": 0.48010766160910007}, {\"x\": -2.5761493723821745, \"y\": -0.4318865944509205}, {\"x\": -0.42991146784583184, \"y\": 0.3515320486362377}, {\"x\": -0.2471105784050048, \"y\": 0.295170284774899}, {\"x\": 1.5924164718581604, \"y\": -2.3028874663975487}, {\"x\": -0.3942932426308836, \"y\": 0.3172558547189018}, {\"x\": -1.329145161832565, \"y\": 1.3631680079787452}, {\"x\": 0.14710119168966707, \"y\": -1.0111218934190696}, {\"x\": -0.9354105781141511, \"y\": 0.09684046289218046}, {\"x\": 0.919554214238568, \"y\": 0.8484572699734974}, {\"x\": 0.6465067378716794, \"y\": -1.0316726276091392}, {\"x\": 1.2796623553581494, \"y\": 1.7040996592464217}, {\"x\": -1.1131686839262187, \"y\": -0.15585691115458888}, {\"x\": -0.8408190954890226, \"y\": -0.09562774275081824}, {\"x\": 0.28812027924325717, \"y\": 0.3308903744236825}, {\"x\": -0.27982197300386846, \"y\": -0.7978992308797789}, {\"x\": -1.0702181395922352, \"y\": -0.734686483093748}, {\"x\": 0.04322985323396954, \"y\": 0.6998735755979422}, {\"x\": -0.4108186858462953, \"y\": 1.4814799948043822}, {\"x\": -0.24810049255774974, \"y\": 0.15184950817127416}, {\"x\": 1.0357620642323908, \"y\": 0.018002926967595225}, {\"x\": -0.9719625685450719, \"y\": -0.45200259926771}, {\"x\": -0.20295580356216647, \"y\": 0.8233230343289871}, {\"x\": 0.051906036770181775, \"y\": -0.015747930311802206}, {\"x\": -0.010412965040355392, \"y\": 0.9172806111844617}, {\"x\": -0.676823850972495, \"y\": -1.0873151072566922}, {\"x\": 0.332327732318229, \"y\": -0.4390264017626683}, {\"x\": -3.529928673811806, \"y\": 1.5520847190151883}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Histogram\n\n**Matplotlib:**\n\n::: {#1105b171 .cell execution_count=7}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\n\nplt.figure(figsize=(8, 6))\nplt.hist(data, bins=30, alpha=0.7, edgecolor='black')\nplt.title('Matplotlib Histogram')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=671 height=529}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#bc9116cd .cell execution_count=8}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\n\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(8, 6))\nsns.histplot(data=data, bins=30, kde=True)\nplt.title('Seaborn Histogram with KDE')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=663 height=509}\n:::\n:::\n\n\n**Altair:**\n\n::: {#b990ab70 .cell execution_count=9}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({'value': np.random.randn(1000)})\n\nalt.Chart(data).mark_bar().encode(\n    alt.X('value', bin=alt.Bin(maxbins=30)),\n    y='count()'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Histogram'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n\n<style>\n  #altair-viz-50cb5917370e4f3b9e8116c3fbecd885.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-50cb5917370e4f3b9e8116c3fbecd885.vega-embed details,\n  #altair-viz-50cb5917370e4f3b9e8116c3fbecd885.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-50cb5917370e4f3b9e8116c3fbecd885\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-50cb5917370e4f3b9e8116c3fbecd885\") {\n      outputDiv = document.getElementById(\"altair-viz-50cb5917370e4f3b9e8116c3fbecd885\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-4bf5ac99b7e61b377bbb0a00413071dd\"}, \"mark\": {\"type\": \"bar\"}, \"encoding\": {\"x\": {\"bin\": {\"maxbins\": 30}, \"field\": \"value\", \"type\": \"quantitative\"}, \"y\": {\"aggregate\": \"count\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Histogram\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-4bf5ac99b7e61b377bbb0a00413071dd\": [{\"value\": -1.7840842950751503}, {\"value\": 1.4673750921085251}, {\"value\": 0.7678895718236164}, {\"value\": -0.64598255663714}, {\"value\": -0.4538922220996516}, {\"value\": -0.6577786910619104}, {\"value\": -0.620253260560368}, {\"value\": 1.3813068563952788}, {\"value\": 0.755560468842678}, {\"value\": 0.364219594421139}, {\"value\": 1.9272460725201805}, {\"value\": 0.6027722620667874}, {\"value\": 0.13064765425155123}, {\"value\": -0.25979137676252617}, {\"value\": 0.2379148703959705}, {\"value\": -0.26958790646142194}, {\"value\": -1.6466472618057497}, {\"value\": 0.3603496075343862}, {\"value\": -1.2685482444317255}, {\"value\": -1.5235015093472493}, {\"value\": -1.427887004448868}, {\"value\": -0.7548540623736383}, {\"value\": -1.0893264875886106}, {\"value\": 0.2424462518227846}, {\"value\": 1.3003478696249227}, {\"value\": -0.21510641038035327}, {\"value\": -1.5369503208992252}, {\"value\": 0.31475942456902867}, {\"value\": 1.9389793286299384}, {\"value\": -0.5484672068385151}, {\"value\": -1.4316039763454995}, {\"value\": -2.4757678075804934}, {\"value\": 1.3731307566673134}, {\"value\": 1.5217200639242257}, {\"value\": 0.7353621431715813}, {\"value\": 0.4775834669331522}, {\"value\": -0.9601486335947952}, {\"value\": 0.8199811544566624}, {\"value\": 1.39637446545713}, {\"value\": 1.983937476158089}, {\"value\": -1.09789421935066}, {\"value\": -1.3028562023828314}, {\"value\": -1.5534470843196688}, {\"value\": 0.10879845413869083}, {\"value\": -0.266469108164894}, {\"value\": -0.5773508475700145}, {\"value\": 0.0011518881903843166}, {\"value\": 1.645853141036156}, {\"value\": 0.826898933615373}, {\"value\": 0.021948241278628797}, {\"value\": -0.03208816909700131}, {\"value\": -0.06610888977056632}, {\"value\": -0.29330446563176843}, {\"value\": -0.31373790318840467}, {\"value\": 0.3505567748802253}, {\"value\": 1.16138550625383}, {\"value\": 0.9211812985663903}, {\"value\": -0.861300024319888}, {\"value\": -0.5901348044393906}, {\"value\": -0.14603766133034773}, {\"value\": 0.22963328331089872}, {\"value\": -0.43311175650010053}, {\"value\": 0.1628228975861976}, {\"value\": -0.7675927113135855}, {\"value\": -0.11381916202178524}, {\"value\": 0.047986009528472595}, {\"value\": 0.8134323160607148}, {\"value\": 0.865518890720326}, {\"value\": -0.6654768541516267}, {\"value\": -0.641415413043716}, {\"value\": -0.2694056680708438}, {\"value\": 1.1533680545228755}, {\"value\": -0.4459738357421698}, {\"value\": -0.3277447877442481}, {\"value\": 0.1547845555774461}, {\"value\": -0.7755888720731583}, {\"value\": 0.38467970282687364}, {\"value\": 1.0152463264072882}, {\"value\": -1.8258290292711776}, {\"value\": 0.10130521567755493}, {\"value\": 0.022973893806124742}, {\"value\": 0.3567286945905321}, {\"value\": -0.6345317230322751}, {\"value\": 0.6010407845692547}, {\"value\": 1.230408345432385}, {\"value\": 1.6665875184105672}, {\"value\": -0.7818441555015334}, {\"value\": 0.40862591172167434}, {\"value\": -1.4056582001126985}, {\"value\": -1.9041105786113022}, {\"value\": 0.18172095003114044}, {\"value\": -0.4614964810421924}, {\"value\": -0.9632382925545858}, {\"value\": 0.9243881400958982}, {\"value\": 1.5618148421577267}, {\"value\": 1.9990108280092156}, {\"value\": 1.3413496332537151}, {\"value\": -0.08700025491201985}, {\"value\": -1.134798414180516}, {\"value\": -0.19405436051055244}, {\"value\": 0.5525848550256167}, {\"value\": 1.1006522717591465}, {\"value\": -1.5353505232789018}, {\"value\": 1.5571307808821582}, {\"value\": -1.2242707582060086}, {\"value\": -0.3201436337395161}, {\"value\": 0.7021375473126938}, {\"value\": 0.9632407069114528}, {\"value\": 0.5445185784180562}, {\"value\": -0.4887364416112952}, {\"value\": 0.46182807379908764}, {\"value\": 0.19540066700697384}, {\"value\": 0.7609078981990083}, {\"value\": -0.5718459640040123}, {\"value\": 1.8374346434848186}, {\"value\": -0.4867861643553932}, {\"value\": -0.8725676076151585}, {\"value\": 0.19699878140007746}, {\"value\": 0.17777140009513331}, {\"value\": -0.23491574675341173}, {\"value\": -0.07213949292192183}, {\"value\": 0.254186250220587}, {\"value\": 1.274450297944909}, {\"value\": 0.07797938355677114}, {\"value\": -0.2737883544940117}, {\"value\": -0.37169212339813273}, {\"value\": 0.6188247305358178}, {\"value\": 0.13235544262211238}, {\"value\": 1.552321894403253}, {\"value\": 0.5199885605759659}, {\"value\": -1.5600642873220965}, {\"value\": -0.8025762237376354}, {\"value\": -1.2219220452120796}, {\"value\": 0.4612012371042209}, {\"value\": 0.9334740386046093}, {\"value\": 0.38224947649797647}, {\"value\": 0.6524241917347117}, {\"value\": -0.47371962770474474}, {\"value\": 0.19513572504636115}, {\"value\": 0.6041758454936527}, {\"value\": 0.672905036166484}, {\"value\": -0.7408361305091817}, {\"value\": 0.7952860051473692}, {\"value\": 0.06369643851025068}, {\"value\": 0.5742894730847607}, {\"value\": -1.4563941200149026}, {\"value\": 0.8116223128887686}, {\"value\": -0.8458350778769352}, {\"value\": -1.0289015468582234}, {\"value\": 0.6489104654930152}, {\"value\": -0.3496232477087998}, {\"value\": -0.10753933523825712}, {\"value\": -0.7280643359271806}, {\"value\": -1.0268487057471218}, {\"value\": 1.479059855975345}, {\"value\": -1.7632539129829474}, {\"value\": -0.08556608541904065}, {\"value\": 1.2498707230306851}, {\"value\": 0.5811975885613497}, {\"value\": 0.1608350672328262}, {\"value\": 1.0014479219081578}, {\"value\": 0.6675130435173113}, {\"value\": -1.5851997703864793}, {\"value\": -0.780471510601879}, {\"value\": 0.16164405517387528}, {\"value\": -0.31863133567699703}, {\"value\": -0.6479279553365861}, {\"value\": -0.5783508136167476}, {\"value\": 0.6369454222642063}, {\"value\": 1.2043135433318743}, {\"value\": 0.057652249171540604}, {\"value\": -0.9671188585014965}, {\"value\": -1.3194930660942958}, {\"value\": 0.1571736969684165}, {\"value\": -1.3267395263425943}, {\"value\": -0.4118343749411063}, {\"value\": -0.486662154098191}, {\"value\": -0.1272587223546178}, {\"value\": -2.1934189286409853}, {\"value\": 0.02127206839907638}, {\"value\": 0.7333273889352492}, {\"value\": 0.6335945987493672}, {\"value\": 1.191747120199308}, {\"value\": -1.0548216724634738}, {\"value\": 0.7752992768902609}, {\"value\": -0.4953852295500292}, {\"value\": -0.6012136254477187}, {\"value\": 1.0763503508254528}, {\"value\": 0.6385531716214377}, {\"value\": 0.06332627662706154}, {\"value\": -0.9781320726751911}, {\"value\": 1.4865661919411959}, {\"value\": 1.145933301548888}, {\"value\": -1.4249488173504987}, {\"value\": -0.30296626038159463}, {\"value\": -0.3055321785987535}, {\"value\": -0.9860960291456699}, {\"value\": -0.0011052999617634355}, {\"value\": 0.4316118645139557}, {\"value\": 2.667554043903668}, {\"value\": -1.2840558580360115}, {\"value\": 0.6444680250984418}, {\"value\": 0.07025921191349548}, {\"value\": -1.3983898206578835}, {\"value\": -1.9954848135097416}, {\"value\": 0.39311392127035577}, {\"value\": -1.7161008118327434}, {\"value\": -1.0444270858223852}, {\"value\": 0.1516475355215819}, {\"value\": -0.22604559155652199}, {\"value\": -0.10450505156864447}, {\"value\": -0.5372174231162661}, {\"value\": -0.7940036915789073}, {\"value\": 1.4204769619635138}, {\"value\": 0.6186803199918949}, {\"value\": 1.728107205474968}, {\"value\": 0.8483183823415958}, {\"value\": 1.1098240239451638}, {\"value\": 0.24618974626122878}, {\"value\": -0.45436699083805804}, {\"value\": 0.205501395099576}, {\"value\": -1.3714475237354908}, {\"value\": 0.29369216343865995}, {\"value\": -0.2546658703565262}, {\"value\": 0.38377178675334844}, {\"value\": -1.1232728542415906}, {\"value\": 0.41613686693711804}, {\"value\": 1.0161015062643093}, {\"value\": 0.36436182056987915}, {\"value\": 1.091600073560368}, {\"value\": -0.29942490228508534}, {\"value\": 0.6747325166590099}, {\"value\": -0.5074678523897973}, {\"value\": -1.359991850823253}, {\"value\": 1.3334762126426947}, {\"value\": 0.5645723564203234}, {\"value\": -0.6054103241933995}, {\"value\": 1.1418033124563443}, {\"value\": 0.8249139976862625}, {\"value\": 1.9772913285068143}, {\"value\": 1.2219709545360027}, {\"value\": -0.2167161524169071}, {\"value\": 1.185600869464894}, {\"value\": -0.07878416890912461}, {\"value\": 0.1408140512309354}, {\"value\": -0.9670427107011821}, {\"value\": -0.6530093244999087}, {\"value\": -0.4799781636166426}, {\"value\": -0.1343077147648954}, {\"value\": 0.7029161823939695}, {\"value\": 1.2100267152827688}, {\"value\": 1.018167920583512}, {\"value\": 0.41868829499295174}, {\"value\": 0.8946033442015197}, {\"value\": 0.03164895915039811}, {\"value\": 0.24673348291145802}, {\"value\": -0.28882988859883585}, {\"value\": -0.7080448477064826}, {\"value\": 0.055628624545074494}, {\"value\": -1.2422504604366351}, {\"value\": -0.8043005984678238}, {\"value\": -0.542326361023094}, {\"value\": 0.6450750804486687}, {\"value\": 2.306411940098045}, {\"value\": -0.19886042715659688}, {\"value\": -0.18735908406125426}, {\"value\": 0.36999860169685284}, {\"value\": -1.5684263289773201}, {\"value\": -2.604852725622477}, {\"value\": -0.17409664422779825}, {\"value\": -0.6354935501484484}, {\"value\": 0.1061364123305832}, {\"value\": 0.3066316755577159}, {\"value\": 0.36054182532520695}, {\"value\": 0.7104139248367801}, {\"value\": -0.6509028556879695}, {\"value\": -2.4401245675253658}, {\"value\": 0.2256571843776118}, {\"value\": -0.2958113118551501}, {\"value\": 0.6612382176663265}, {\"value\": -2.0256216038175556}, {\"value\": 0.2906283650605538}, {\"value\": 0.3274426231422522}, {\"value\": 1.102382822709899}, {\"value\": -1.8753958040627896}, {\"value\": 1.3497998868033725}, {\"value\": -2.2814034863242956}, {\"value\": -1.034344758595057}, {\"value\": 0.44580981829439814}, {\"value\": -0.2988299449496467}, {\"value\": 2.6604024935012855}, {\"value\": -0.7684722973925917}, {\"value\": -0.816691146073262}, {\"value\": 0.6883374981648372}, {\"value\": 0.14712659165895417}, {\"value\": -1.7023666770657713}, {\"value\": 0.8928188227942484}, {\"value\": -1.2753566668390142}, {\"value\": -0.17626828298469366}, {\"value\": 0.5678148922385584}, {\"value\": -0.26081418638592363}, {\"value\": -0.8452230345425669}, {\"value\": 0.20844370695498635}, {\"value\": 1.095761373509966}, {\"value\": 1.12091659014442}, {\"value\": 1.377580155316339}, {\"value\": 0.9273624523217161}, {\"value\": -0.22601838187080503}, {\"value\": -0.22138535262458506}, {\"value\": 1.7417182541556495}, {\"value\": -0.33399537651761174}, {\"value\": 0.34605199336283166}, {\"value\": 0.6356546823020311}, {\"value\": 0.0940030726628605}, {\"value\": 2.5168038498531744}, {\"value\": -1.166188556967941}, {\"value\": 0.7391708259754636}, {\"value\": -2.3411803487952314}, {\"value\": 1.5325276923940514}, {\"value\": -0.05564626006246881}, {\"value\": -1.5178567610885745}, {\"value\": 1.164431253843071}, {\"value\": -1.3402502128345182}, {\"value\": 1.3836978251205487}, {\"value\": -0.046396781793816524}, {\"value\": 1.6524530066665102}, {\"value\": -0.5014671308198512}, {\"value\": 1.4412033626848144}, {\"value\": -1.038949042801872}, {\"value\": -0.1855548814063439}, {\"value\": -0.7958493625884341}, {\"value\": -1.0415730281479587}, {\"value\": 1.6993431115125286}, {\"value\": -0.00045310621556738924}, {\"value\": 1.8911363463981306}, {\"value\": -0.3175840604836202}, {\"value\": -0.5816189164675503}, {\"value\": 2.004121864142466}, {\"value\": 1.4271818491542207}, {\"value\": 0.12385973681915524}, {\"value\": -0.40010653585225814}, {\"value\": 1.36388604708222}, {\"value\": 1.775575863106658}, {\"value\": -1.0002661992353732}, {\"value\": 0.3248009263813883}, {\"value\": -1.257310226935086}, {\"value\": -1.284928427072024}, {\"value\": 0.8936319394190395}, {\"value\": -1.418006895669018}, {\"value\": 0.608851213383282}, {\"value\": 0.10436424638864822}, {\"value\": -0.7806408595125095}, {\"value\": -0.5768403155274542}, {\"value\": -0.8860284296657637}, {\"value\": 1.5680753966989596}, {\"value\": 0.8141440278097373}, {\"value\": 0.3239786846293193}, {\"value\": 0.9338824601491374}, {\"value\": -0.4354845373586367}, {\"value\": -0.9842034964545479}, {\"value\": -0.08187182223172741}, {\"value\": -1.080799905633345}, {\"value\": 1.128045514319616}, {\"value\": 1.0158052505483792}, {\"value\": -0.14592375414369108}, {\"value\": 0.5934693345272783}, {\"value\": -0.4500380641513005}, {\"value\": -1.7543285075402124}, {\"value\": -0.1320674678820573}, {\"value\": -0.8916305464121642}, {\"value\": -2.038292282570876}, {\"value\": 0.35919003477877987}, {\"value\": -1.4528729140745935}, {\"value\": 0.062390457098430344}, {\"value\": 0.47500307508439943}, {\"value\": 1.125722841519235}, {\"value\": 0.8437702571269771}, {\"value\": 0.25584727142843894}, {\"value\": -0.7541454410841651}, {\"value\": 0.24102491811045887}, {\"value\": -0.42085905685293146}, {\"value\": -0.4711229759209508}, {\"value\": -1.1216344509666891}, {\"value\": 0.4809298287305077}, {\"value\": -2.859699363742613}, {\"value\": 0.15113581705394802}, {\"value\": -0.34658871644597244}, {\"value\": -0.4038017020666839}, {\"value\": -0.15093501487791142}, {\"value\": 0.9189918471743239}, {\"value\": -0.3324694140155487}, {\"value\": 0.14476699522452527}, {\"value\": -2.4972922440755916}, {\"value\": -1.3079331467543358}, {\"value\": -1.102905610031332}, {\"value\": 0.5965111877017992}, {\"value\": -0.7470728637257279}, {\"value\": -1.7069673735545228}, {\"value\": 1.4919612977774144}, {\"value\": 1.650554956093846}, {\"value\": -0.07264476350882634}, {\"value\": -1.200951612284499}, {\"value\": 0.07210051046408741}, {\"value\": -2.1185364906232076}, {\"value\": -0.1651388358694762}, {\"value\": 0.15258358209378528}, {\"value\": 0.3201588860388374}, {\"value\": -0.6552195499955142}, {\"value\": -1.6352067490379958}, {\"value\": 1.738047181064742}, {\"value\": 1.2878270308038022}, {\"value\": 0.13868310176946544}, {\"value\": -2.400826551683469}, {\"value\": -0.48655320707846433}, {\"value\": 1.042479559092632}, {\"value\": -0.5394461925585766}, {\"value\": -1.06405121734898}, {\"value\": -0.07487991417990714}, {\"value\": -0.066465366002481}, {\"value\": 0.5693142292847087}, {\"value\": -0.21721423820622673}, {\"value\": -0.40793293958080956}, {\"value\": 0.09560330756435399}, {\"value\": 1.194469047659959}, {\"value\": -0.8950586793238623}, {\"value\": 0.02893566668128881}, {\"value\": 1.2251721477008082}, {\"value\": -0.46793863018712234}, {\"value\": -2.1781980481528156}, {\"value\": -0.14446425203489888}, {\"value\": 0.437783275265791}, {\"value\": -0.03622660022788835}, {\"value\": 0.5592683975945165}, {\"value\": -1.47255079821977}, {\"value\": 1.138037114751881}, {\"value\": 0.023650578184536544}, {\"value\": 0.34287214328940163}, {\"value\": -0.5338666021804803}, {\"value\": 1.0272631365686546}, {\"value\": 0.3758735659838579}, {\"value\": -0.42589803432604306}, {\"value\": 0.019641987965232678}, {\"value\": -1.2907864238615623}, {\"value\": 0.15444230478383805}, {\"value\": 0.008352486124676664}, {\"value\": 0.32892169580546055}, {\"value\": -0.14014380791555797}, {\"value\": -0.5942955369774948}, {\"value\": 0.6975521327171837}, {\"value\": 2.3751083288112285}, {\"value\": -1.9490424266691357}, {\"value\": -0.5586829961115617}, {\"value\": -0.24424100142317223}, {\"value\": 1.387919105045556}, {\"value\": 0.6124659355160362}, {\"value\": -0.5511875419036288}, {\"value\": 0.776632675161287}, {\"value\": 1.9127194354794086}, {\"value\": -0.850698557203031}, {\"value\": -0.1362195580150602}, {\"value\": -0.3818661468008109}, {\"value\": -0.6570987575937179}, {\"value\": 1.1244170563099856}, {\"value\": -0.7264265998079641}, {\"value\": 0.0673707975444872}, {\"value\": -0.9178346752058907}, {\"value\": -0.5512739824535039}, {\"value\": 1.7129669047055953}, {\"value\": -1.4519358447756239}, {\"value\": 1.75180764464981}, {\"value\": 0.7679492376876533}, {\"value\": -2.6986201809123505}, {\"value\": 1.7685402639428285}, {\"value\": -0.1924978852372576}, {\"value\": 1.1074334668715966}, {\"value\": 0.9166242096143363}, {\"value\": 1.0477451982767605}, {\"value\": 0.7382550436363736}, {\"value\": -0.09934356187686816}, {\"value\": 0.3670912719430071}, {\"value\": -0.8465219044565708}, {\"value\": 1.4622468539080387}, {\"value\": 1.0641350391663722}, {\"value\": -0.4878524088047216}, {\"value\": -1.283472417684344}, {\"value\": 0.026084297693217223}, {\"value\": 0.06715493397786645}, {\"value\": -0.5239553014058549}, {\"value\": 0.3040605390333746}, {\"value\": 1.6997129343080797}, {\"value\": -0.1761992814604291}, {\"value\": 0.34536844417652107}, {\"value\": -2.574047199593858}, {\"value\": -0.7077384051631732}, {\"value\": 1.4498499308714752}, {\"value\": 0.5126376523477694}, {\"value\": 0.914654209205831}, {\"value\": 0.5441834901582454}, {\"value\": 1.6370556168252703}, {\"value\": 2.0976360879349487}, {\"value\": -0.4477047163175157}, {\"value\": -1.1581868608103418}, {\"value\": -1.2052330633522155}, {\"value\": -2.5714153705810814}, {\"value\": 0.019893401938592153}, {\"value\": -0.32649700127616815}, {\"value\": -0.11283756203904699}, {\"value\": 0.25446363851683496}, {\"value\": 0.9914922437012798}, {\"value\": 1.3210225731807737}, {\"value\": -0.22124021293306517}, {\"value\": 0.11363767728371468}, {\"value\": -0.5757462837278025}, {\"value\": 0.5897785742238754}, {\"value\": 0.7331320994159031}, {\"value\": -0.09302701191321991}, {\"value\": -0.7461138438392293}, {\"value\": -1.4002739621536204}, {\"value\": -1.7390507595901195}, {\"value\": 0.4149263960595721}, {\"value\": 1.1832049489710934}, {\"value\": -0.08078757905863426}, {\"value\": 0.4714347326082383}, {\"value\": 1.1929976242324307}, {\"value\": 0.6429482146506186}, {\"value\": -0.05880499379114778}, {\"value\": -0.1484599705863663}, {\"value\": -0.768179776747035}, {\"value\": 0.38461527162026465}, {\"value\": -0.6323752718267289}, {\"value\": -0.6181168916039299}, {\"value\": 0.9962111215269533}, {\"value\": 0.8839635000864896}, {\"value\": 1.3557526330989982}, {\"value\": 1.5682905402517602}, {\"value\": -0.586582999170725}, {\"value\": 0.5018650458499695}, {\"value\": 0.11331585671702982}, {\"value\": 0.5926227792163208}, {\"value\": -1.4457232162514622}, {\"value\": -0.647552498370276}, {\"value\": -0.6945178326734366}, {\"value\": 0.5156399522402718}, {\"value\": 1.532085090983148}, {\"value\": -0.05004280834477445}, {\"value\": 0.9462778392073015}, {\"value\": 0.14942936912441554}, {\"value\": -0.24531759294914618}, {\"value\": -0.9996353552212481}, {\"value\": -0.17995261883121286}, {\"value\": 1.6839186907250396}, {\"value\": 0.0935050433729257}, {\"value\": -0.05784212664776456}, {\"value\": -0.8473870954150082}, {\"value\": -0.13404679114356025}, {\"value\": 0.6176594013798027}, {\"value\": -1.4733450898550835}, {\"value\": 0.662310741290026}, {\"value\": -1.0358403009242012}, {\"value\": 1.398331453954401}, {\"value\": 2.4385968510038465}, {\"value\": -0.014244890692364016}, {\"value\": 0.2940563856993965}, {\"value\": -1.405498462599357}, {\"value\": -0.4532475522517166}, {\"value\": -1.08387753696906}, {\"value\": -0.1763910162261311}, {\"value\": 0.6062181252889669}, {\"value\": -0.42564020291129484}, {\"value\": 0.7236762146838829}, {\"value\": 0.32369268220943614}, {\"value\": -1.4684855258088239}, {\"value\": -0.006723946070729893}, {\"value\": 0.1956855307462097}, {\"value\": 0.24179738105374327}, {\"value\": -0.9544180544205264}, {\"value\": -0.8507512438446349}, {\"value\": -2.149522198832234}, {\"value\": 0.7833995467137471}, {\"value\": 0.8646745604639476}, {\"value\": -1.2283896126353657}, {\"value\": -0.34804619999948927}, {\"value\": -0.5125199934424307}, {\"value\": -0.30299923198190415}, {\"value\": 1.6017590208797947}, {\"value\": -1.2027558925846902}, {\"value\": 0.12848980967734797}, {\"value\": 0.9147761674097827}, {\"value\": -0.01996875402140131}, {\"value\": 0.04713287624744857}, {\"value\": 0.3098412835674311}, {\"value\": -0.46899687103569254}, {\"value\": -1.7998516488414045}, {\"value\": -1.0489826855234643}, {\"value\": 1.2561982345708491}, {\"value\": -0.012849932323625201}, {\"value\": 0.07623263985590349}, {\"value\": 1.0674794030194685}, {\"value\": -1.2291553420323862}, {\"value\": -0.342310604962457}, {\"value\": -1.4269496673976796}, {\"value\": 0.7576617367624404}, {\"value\": -0.6537595959104602}, {\"value\": 1.2505606448521769}, {\"value\": 0.5439126647448951}, {\"value\": 0.1026813354498057}, {\"value\": 1.2294786762026981}, {\"value\": 0.9373695737318211}, {\"value\": -0.47175909994943815}, {\"value\": 1.1481769808919304}, {\"value\": -1.3082846345779353}, {\"value\": -0.6853989195685273}, {\"value\": 2.1168381594836174}, {\"value\": -0.8833484557764761}, {\"value\": -0.3109031801467234}, {\"value\": 1.2216422462647176}, {\"value\": 0.34954256765699815}, {\"value\": 0.1536836865551501}, {\"value\": 1.4241331730474664}, {\"value\": -1.350156245401454}, {\"value\": -0.08816136610215772}, {\"value\": -0.28049766514994734}, {\"value\": -0.7868810018778414}, {\"value\": 0.10334339591509278}, {\"value\": 0.19404289676781328}, {\"value\": 0.6057719707479104}, {\"value\": 0.8365283410230809}, {\"value\": 0.6330860793330922}, {\"value\": 0.1455913936875342}, {\"value\": -0.25785127529811186}, {\"value\": 0.3587914948281126}, {\"value\": 1.6134905340517847}, {\"value\": -0.10296108840025656}, {\"value\": 2.1120221416311535}, {\"value\": -0.832828141617799}, {\"value\": 1.9082879683271252}, {\"value\": -2.040634580902567}, {\"value\": -1.064423134863104}, {\"value\": 1.3307982952761395}, {\"value\": 1.3830999163659077}, {\"value\": -0.9789141496505543}, {\"value\": -1.0334079314958122}, {\"value\": -1.5717103925097116}, {\"value\": 2.704123840519503}, {\"value\": -0.8419470828658161}, {\"value\": 0.8550041819455947}, {\"value\": -0.008960323675088658}, {\"value\": -0.7403117856838367}, {\"value\": 1.6597182511522663}, {\"value\": -0.9340031077700929}, {\"value\": -0.4138086162293663}, {\"value\": 0.293380780492739}, {\"value\": 0.8653682664994354}, {\"value\": 0.8046795232753928}, {\"value\": -1.2026445406636666}, {\"value\": -1.0239565644955715}, {\"value\": 0.7381323085801522}, {\"value\": -0.3370155018017251}, {\"value\": 1.0839101397758466}, {\"value\": 1.0068453089798977}, {\"value\": -0.22032930943952397}, {\"value\": -0.7023162527467449}, {\"value\": 0.833157831596468}, {\"value\": -1.448545375678916}, {\"value\": -1.3639227608391817}, {\"value\": 1.3761288203377058}, {\"value\": 0.3329660366414303}, {\"value\": -0.9146011890122341}, {\"value\": 0.8170586013856574}, {\"value\": 0.1622202266834942}, {\"value\": 1.0373430047304522}, {\"value\": 0.8348279186751892}, {\"value\": 1.4900339882055595}, {\"value\": 0.42657455935888855}, {\"value\": -0.06937954453415533}, {\"value\": 0.383343786102825}, {\"value\": 1.4000661416783065}, {\"value\": 0.3475979418257905}, {\"value\": -0.0741418947302033}, {\"value\": 0.4882907310923594}, {\"value\": 0.11129084079420934}, {\"value\": 1.9515425776645683}, {\"value\": 1.6234136261517926}, {\"value\": -0.34361431619457566}, {\"value\": 0.30646667183438614}, {\"value\": -0.7697422623643226}, {\"value\": 0.4001037072326729}, {\"value\": 0.9173729276830265}, {\"value\": -0.6971320062512071}, {\"value\": 2.229877615576502}, {\"value\": -0.008585946728533371}, {\"value\": 0.25379881574522495}, {\"value\": 0.5523553242748308}, {\"value\": 0.6094422256600152}, {\"value\": -0.1984509198135417}, {\"value\": -0.9099091355135817}, {\"value\": 0.46159435999976967}, {\"value\": 0.9232358428616119}, {\"value\": -0.6232212230990987}, {\"value\": -0.16280571773396824}, {\"value\": 0.7294078809568476}, {\"value\": -0.43548425898395315}, {\"value\": -0.544860822628656}, {\"value\": 1.2023020758052736}, {\"value\": -0.45801420604039916}, {\"value\": -2.2628238755738352}, {\"value\": 0.7740817257201521}, {\"value\": -1.4802514944811702}, {\"value\": 0.37085491783455743}, {\"value\": 0.9460319442247642}, {\"value\": -0.19092880239402882}, {\"value\": 0.009443582036828045}, {\"value\": -0.14154308711882999}, {\"value\": -1.5402543992339968}, {\"value\": 1.0355926575311862}, {\"value\": -0.9254613542824321}, {\"value\": 0.18460383706814404}, {\"value\": -1.1627419772994119}, {\"value\": 0.9530053105090773}, {\"value\": 0.9119672186102974}, {\"value\": -1.3655764383587141}, {\"value\": -1.460435763239799}, {\"value\": 0.5144042989012907}, {\"value\": -0.5778209708189421}, {\"value\": 1.1449783305101064}, {\"value\": -0.06854823346566874}, {\"value\": -0.43580420588831575}, {\"value\": 0.4012712536088333}, {\"value\": 0.2604909211307357}, {\"value\": -1.8515083645477988}, {\"value\": 0.4336019692234597}, {\"value\": -0.8035698416359848}, {\"value\": 1.001437543829845}, {\"value\": 0.3276918991508446}, {\"value\": -0.17712603502200586}, {\"value\": 0.3990987612889936}, {\"value\": 0.440049337157529}, {\"value\": -1.2138127382478305}, {\"value\": 0.9338858484178945}, {\"value\": -1.4605548087469562}, {\"value\": -0.20461014911236106}, {\"value\": -0.9363853051194587}, {\"value\": -0.7502181799600602}, {\"value\": -0.04415933243896525}, {\"value\": -0.35951412942377664}, {\"value\": -0.6147558709452217}, {\"value\": 0.3874182684528834}, {\"value\": 0.21905047872451439}, {\"value\": -0.3028510722134143}, {\"value\": 0.280933658898982}, {\"value\": 0.8996308244610609}, {\"value\": 0.8432241261922732}, {\"value\": 0.7845385100500859}, {\"value\": 1.0442600487637672}, {\"value\": 0.6683529332241895}, {\"value\": 1.6496115247830865}, {\"value\": -1.2422895858868153}, {\"value\": 1.3390828634422818}, {\"value\": 1.2221014194729443}, {\"value\": 0.7752605801952401}, {\"value\": -1.4506737419125328}, {\"value\": 1.2224081763304486}, {\"value\": -1.0080345635932046}, {\"value\": -0.49786783308226856}, {\"value\": -0.9372631525563566}, {\"value\": 0.6684215861441454}, {\"value\": 0.7460175299611845}, {\"value\": 0.8580936013294332}, {\"value\": 0.7650637736589999}, {\"value\": 0.5120077813497265}, {\"value\": 0.2728621097532769}, {\"value\": 1.4027734003666001}, {\"value\": 1.1715264978189885}, {\"value\": 0.22252655037616784}, {\"value\": -2.2133988035911436}, {\"value\": 0.939148623156972}, {\"value\": 0.7411339845950947}, {\"value\": 0.4395160342603926}, {\"value\": 0.780042317643793}, {\"value\": -2.035464181690398}, {\"value\": 0.21024557602682933}, {\"value\": -0.03542616409445871}, {\"value\": -0.28218493716743487}, {\"value\": 1.0356044232570798}, {\"value\": -1.40911497327019}, {\"value\": -0.19247760941131764}, {\"value\": 0.946005059171786}, {\"value\": 0.11490141343494087}, {\"value\": 1.3665580231668661}, {\"value\": 0.6233019303800719}, {\"value\": 0.6795922427925654}, {\"value\": -0.8375465769168992}, {\"value\": -0.9318212120383473}, {\"value\": 1.384218024084287}, {\"value\": -2.4804884294064897}, {\"value\": 1.1251544051401765}, {\"value\": -0.5258032776784228}, {\"value\": 0.5705701683897232}, {\"value\": -0.45688937994336465}, {\"value\": 0.0186147478699088}, {\"value\": 0.7556863873377714}, {\"value\": 0.39129273763894584}, {\"value\": 0.8004309615702991}, {\"value\": 0.20146335730217593}, {\"value\": 0.10176398634311734}, {\"value\": -1.0685092994957213}, {\"value\": -1.56951892192034}, {\"value\": -1.7163964749703882}, {\"value\": -0.11314253668640635}, {\"value\": 0.42364763716174897}, {\"value\": -2.0047799822958026}, {\"value\": 1.1222208515176026}, {\"value\": -0.7970851587355484}, {\"value\": -1.28492166838484}, {\"value\": 1.218349980226783}, {\"value\": 0.3586151596718011}, {\"value\": 1.1838203163062595}, {\"value\": 0.18949540401319928}, {\"value\": 0.30039039475268736}, {\"value\": 0.3975231944130378}, {\"value\": 2.0304449027738984}, {\"value\": -0.5010643820485872}, {\"value\": 1.7638276289169275}, {\"value\": -0.5500563892260537}, {\"value\": -0.06051642860466541}, {\"value\": -0.7871509679622098}, {\"value\": 1.056271580168757}, {\"value\": -0.4152734794457995}, {\"value\": -1.7590391333286803}, {\"value\": 0.6654849877045611}, {\"value\": -1.6503505947846353}, {\"value\": 2.202616228603676}, {\"value\": 1.1572022280400864}, {\"value\": 0.5839061719835713}, {\"value\": 0.03716644760571927}, {\"value\": 0.9265939582042221}, {\"value\": 0.06273509378628411}, {\"value\": 0.4730652802773045}, {\"value\": 0.5186842577225111}, {\"value\": -1.3087772847836212}, {\"value\": 0.5065242989057188}, {\"value\": -0.2530607648522049}, {\"value\": 0.28483871478062317}, {\"value\": 2.3207162087285984}, {\"value\": 0.9653065501353577}, {\"value\": 1.2149937889715474}, {\"value\": 0.013988183909897815}, {\"value\": -0.8381994549067607}, {\"value\": -1.3155762051104867}, {\"value\": -2.488162086272279}, {\"value\": 1.544403778848599}, {\"value\": 0.8514094948921368}, {\"value\": 0.5102155864522362}, {\"value\": -0.9162288779347805}, {\"value\": 1.34141308345332}, {\"value\": -0.5448825528765241}, {\"value\": -0.4973801281737601}, {\"value\": -1.979022644120634}, {\"value\": -0.6928681781913668}, {\"value\": 0.09375852991666904}, {\"value\": -1.497189258473577}, {\"value\": 0.4592062005010936}, {\"value\": -0.18086728171560337}, {\"value\": 2.1939153723254563}, {\"value\": -0.06586116573782498}, {\"value\": -1.0437523531630049}, {\"value\": 0.3242736000620159}, {\"value\": -0.022646791152834595}, {\"value\": -0.6079189635719876}, {\"value\": -0.4160559876156421}, {\"value\": -0.32923288493502345}, {\"value\": -0.44188142644528605}, {\"value\": 0.7623308792038912}, {\"value\": 0.575080484502885}, {\"value\": -1.4439816387208557}, {\"value\": 1.0555816693977431}, {\"value\": 0.31363344637669793}, {\"value\": 0.604860509670715}, {\"value\": -0.6819773700760536}, {\"value\": 0.9036048575793597}, {\"value\": -0.03477237434796211}, {\"value\": -1.417802014768223}, {\"value\": -0.49283703767751874}, {\"value\": -0.6471953528021679}, {\"value\": -0.45516045196244814}, {\"value\": -0.9228393892103167}, {\"value\": -0.15299123969417763}, {\"value\": 0.8026461514358473}, {\"value\": 1.69716971520225}, {\"value\": 0.7393607335763916}, {\"value\": 0.5965041280833592}, {\"value\": -0.02297591559644639}, {\"value\": 0.300464619960824}, {\"value\": 0.8263141573045004}, {\"value\": -1.2685026660055998}, {\"value\": -1.6265674854602743}, {\"value\": 0.10467311865039511}, {\"value\": -2.003907139874497}, {\"value\": 0.2623974858183463}, {\"value\": 0.48091183259964315}, {\"value\": -1.4609986352348332}, {\"value\": -0.6523248704353654}, {\"value\": -1.51069185713921}, {\"value\": 0.7272314840428635}, {\"value\": 0.27867583023283693}, {\"value\": 0.7830267446444961}, {\"value\": -0.30892754490910096}, {\"value\": -1.2595455515109797}, {\"value\": 0.6028798051626265}, {\"value\": 0.7201411842131681}, {\"value\": 0.07863881695955774}, {\"value\": 1.267705121562706}, {\"value\": 1.4728218877893802}, {\"value\": 1.2286245964586469}, {\"value\": -0.3687950900375415}, {\"value\": -0.5000297045908451}, {\"value\": 0.6339882332956226}, {\"value\": 1.168204923377675}, {\"value\": 0.8586327659828337}, {\"value\": -0.9639431481179058}, {\"value\": 1.3152223855095624}, {\"value\": 0.4312236924272307}, {\"value\": -0.3318657439506434}, {\"value\": -0.20042157023758453}, {\"value\": -0.009511417176340421}, {\"value\": 0.07043963246355019}, {\"value\": 0.9676577182194503}, {\"value\": 0.1936442126082832}, {\"value\": 0.8568564049311346}, {\"value\": -0.3696610280642241}, {\"value\": 0.7885510322430693}, {\"value\": 0.8672748685393515}, {\"value\": 0.13259590253854103}, {\"value\": 0.5268161849162661}, {\"value\": 0.20259640020888486}, {\"value\": 0.7255878483438282}, {\"value\": 0.7521925010450006}, {\"value\": -0.08695967189875507}, {\"value\": 0.8584868803966939}, {\"value\": 0.6943014259136223}, {\"value\": -0.456263317135787}, {\"value\": -0.05415896198967701}, {\"value\": 0.6252734107210612}, {\"value\": -0.6468965344661693}, {\"value\": 0.805023758076862}, {\"value\": -0.03192074331758262}, {\"value\": 0.9573156187799347}, {\"value\": 0.5437728376988668}, {\"value\": 0.10064851468534664}, {\"value\": 0.04296553184110462}, {\"value\": -2.3267440414410703}, {\"value\": 0.5959986272705813}, {\"value\": 0.001460962867247527}, {\"value\": -2.9747080516348237}, {\"value\": -1.3327967420843987}, {\"value\": 1.032127648956739}, {\"value\": -1.2246677075416506}, {\"value\": 0.4734423524983877}, {\"value\": 1.506695105681387}, {\"value\": 0.8808285891012724}, {\"value\": -0.7969735979826909}, {\"value\": -0.40450124331018456}, {\"value\": -0.28036748139634804}, {\"value\": -0.7188780794259002}, {\"value\": 1.3369164887603422}, {\"value\": -0.8313662665629489}, {\"value\": -0.9901884321908906}, {\"value\": -0.7989650746533683}, {\"value\": -1.0167098227329876}, {\"value\": -0.5245767134981998}, {\"value\": -0.11752945177707007}, {\"value\": -0.3929235207476213}, {\"value\": -0.47980194570012996}, {\"value\": 1.267655947572412}, {\"value\": 0.155454084407357}, {\"value\": -0.3269404436949765}, {\"value\": 0.38981629607861285}, {\"value\": -1.05074653184115}, {\"value\": 0.12060238041037576}, {\"value\": -0.011217752603386987}, {\"value\": -0.1546001589652819}, {\"value\": -0.9686857384135704}, {\"value\": -0.047323941896140156}, {\"value\": 1.377908051736094}, {\"value\": 0.8705676975157436}, {\"value\": 0.21706092356003925}, {\"value\": 1.5864745546985957}, {\"value\": 0.11735356721682637}, {\"value\": 1.025559484749243}, {\"value\": 0.10319823990928458}, {\"value\": -0.6628125671237408}, {\"value\": 1.3549331378666678}, {\"value\": 1.362895231322021}, {\"value\": 1.4620451732804984}, {\"value\": -0.358146411341035}, {\"value\": -0.3654618861914099}, {\"value\": -1.229288074407184}, {\"value\": 0.28565254546651875}, {\"value\": 0.06856596495299458}, {\"value\": -0.12063171458275686}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Line Plot\n\n**Matplotlib:**\n\n::: {#ee865154 .cell execution_count=10}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nplt.figure(figsize=(10, 6))\nplt.plot(x, y1, label='Sine')\nplt.plot(x, y2, label='Cosine')\nplt.title('Matplotlib Line Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){width=833 height=529}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#26f8b9e3 .cell execution_count=11}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nx = np.linspace(0, 10, 100)\ndata = pd.DataFrame({\n    'x': np.concatenate([x, x]),\n    'y': np.concatenate([np.sin(x), np.cos(x)]),\n    'function': ['Sine']*100 + ['Cosine']*100\n})\n\nsns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=data, x='x', y='y', hue='function')\nplt.title('Seaborn Line Plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){width=833 height=529}\n:::\n:::\n\n\n**Altair:**\n\n::: {#e5d14554 .cell execution_count=12}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ndata = pd.DataFrame({\n    'x': np.concatenate([x, x]),\n    'y': np.concatenate([np.sin(x), np.cos(x)]),\n    'function': ['Sine']*100 + ['Cosine']*100\n})\n\nalt.Chart(data).mark_line().encode(\n    x='x',\n    y='y',\n    color='function'\n).properties(\n    width=600,\n    height=400,\n    title='Altair Line Plot'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n\n<style>\n  #altair-viz-c69dc9d30b0b44988cb4fd4f19e705e5.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-c69dc9d30b0b44988cb4fd4f19e705e5.vega-embed details,\n  #altair-viz-c69dc9d30b0b44988cb4fd4f19e705e5.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-c69dc9d30b0b44988cb4fd4f19e705e5\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-c69dc9d30b0b44988cb4fd4f19e705e5\") {\n      outputDiv = document.getElementById(\"altair-viz-c69dc9d30b0b44988cb4fd4f19e705e5\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-315314b1d744b307a4c6f023712ccc9d\"}, \"mark\": {\"type\": \"line\"}, \"encoding\": {\"color\": {\"field\": \"function\", \"type\": \"nominal\"}, \"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Line Plot\", \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-315314b1d744b307a4c6f023712ccc9d\": [{\"x\": 0.0, \"y\": 0.0, \"function\": \"Sine\"}, {\"x\": 0.10101010101010101, \"y\": 0.1008384202581046, \"function\": \"Sine\"}, {\"x\": 0.20202020202020202, \"y\": 0.2006488565226854, \"function\": \"Sine\"}, {\"x\": 0.30303030303030304, \"y\": 0.2984138044476411, \"function\": \"Sine\"}, {\"x\": 0.40404040404040403, \"y\": 0.3931366121483298, \"function\": \"Sine\"}, {\"x\": 0.5050505050505051, \"y\": 0.48385164043793466, \"function\": \"Sine\"}, {\"x\": 0.6060606060606061, \"y\": 0.5696341069089657, \"function\": \"Sine\"}, {\"x\": 0.7070707070707071, \"y\": 0.6496095135057065, \"function\": \"Sine\"}, {\"x\": 0.8080808080808081, \"y\": 0.7229625614794605, \"function\": \"Sine\"}, {\"x\": 0.9090909090909091, \"y\": 0.7889454628442574, \"function\": \"Sine\"}, {\"x\": 1.0101010101010102, \"y\": 0.8468855636029834, \"function\": \"Sine\"}, {\"x\": 1.1111111111111112, \"y\": 0.8961922010299563, \"function\": \"Sine\"}, {\"x\": 1.2121212121212122, \"y\": 0.9363627251042848, \"function\": \"Sine\"}, {\"x\": 1.3131313131313131, \"y\": 0.9669876227092996, \"function\": \"Sine\"}, {\"x\": 1.4141414141414141, \"y\": 0.9877546923600838, \"function\": \"Sine\"}, {\"x\": 1.5151515151515151, \"y\": 0.9984522269003895, \"function\": \"Sine\"}, {\"x\": 1.6161616161616161, \"y\": 0.9989711717233568, \"function\": \"Sine\"}, {\"x\": 1.7171717171717171, \"y\": 0.9893062365143401, \"function\": \"Sine\"}, {\"x\": 1.8181818181818181, \"y\": 0.9695559491823237, \"function\": \"Sine\"}, {\"x\": 1.9191919191919191, \"y\": 0.9399216514301312, \"function\": \"Sine\"}, {\"x\": 2.0202020202020203, \"y\": 0.9007054462029555, \"function\": \"Sine\"}, {\"x\": 2.121212121212121, \"y\": 0.8523071179396752, \"function\": \"Sine\"}, {\"x\": 2.2222222222222223, \"y\": 0.7952200570230491, \"function\": \"Sine\"}, {\"x\": 2.323232323232323, \"y\": 0.7300262299764464, \"function\": \"Sine\"}, {\"x\": 2.4242424242424243, \"y\": 0.6573902466827755, \"function\": \"Sine\"}, {\"x\": 2.525252525252525, \"y\": 0.5780525851065732, \"function\": \"Sine\"}, {\"x\": 2.6262626262626263, \"y\": 0.4928220425889235, \"function\": \"Sine\"}, {\"x\": 2.727272727272727, \"y\": 0.40256749066949654, \"function\": \"Sine\"}, {\"x\": 2.8282828282828283, \"y\": 0.30820901749007684, \"function\": \"Sine\"}, {\"x\": 2.929292929292929, \"y\": 0.2107085480771929, \"function\": \"Sine\"}, {\"x\": 3.0303030303030303, \"y\": 0.11106003812412972, \"function\": \"Sine\"}, {\"x\": 3.131313131313131, \"y\": 0.010279341240534697, \"function\": \"Sine\"}, {\"x\": 3.2323232323232323, \"y\": -0.09060614703340773, \"function\": \"Sine\"}, {\"x\": 3.3333333333333335, \"y\": -0.19056796287548539, \"function\": \"Sine\"}, {\"x\": 3.4343434343434343, \"y\": -0.28858705872043244, \"function\": \"Sine\"}, {\"x\": 3.5353535353535355, \"y\": -0.38366419180611233, \"function\": \"Sine\"}, {\"x\": 3.6363636363636362, \"y\": -0.47483011082223947, \"function\": \"Sine\"}, {\"x\": 3.7373737373737375, \"y\": -0.5611554368152017, \"function\": \"Sine\"}, {\"x\": 3.8383838383838382, \"y\": -0.6417601376193878, \"function\": \"Sine\"}, {\"x\": 3.9393939393939394, \"y\": -0.7158224992291902, \"function\": \"Sine\"}, {\"x\": 4.040404040404041, \"y\": -0.7825875026542022, \"function\": \"Sine\"}, {\"x\": 4.141414141414141, \"y\": -0.8413745208608701, \"function\": \"Sine\"}, {\"x\": 4.242424242424242, \"y\": -0.8915842573351402, \"function\": \"Sine\"}, {\"x\": 4.343434343434343, \"y\": -0.9327048555318336, \"function\": \"Sine\"}, {\"x\": 4.444444444444445, \"y\": -0.9643171169287782, \"function\": \"Sine\"}, {\"x\": 4.545454545454545, \"y\": -0.9860987744909296, \"function\": \"Sine\"}, {\"x\": 4.646464646464646, \"y\": -0.9978277779792126, \"function\": \"Sine\"}, {\"x\": 4.747474747474747, \"y\": -0.9993845576124357, \"function\": \"Sine\"}, {\"x\": 4.848484848484849, \"y\": -0.9907532430056771, \"function\": \"Sine\"}, {\"x\": 4.94949494949495, \"y\": -0.9720218249588334, \"function\": \"Sine\"}, {\"x\": 5.05050505050505, \"y\": -0.9433812584459996, \"function\": \"Sine\"}, {\"x\": 5.151515151515151, \"y\": -0.9051235159501367, \"function\": \"Sine\"}, {\"x\": 5.252525252525253, \"y\": -0.8576386109880517, \"function\": \"Sine\"}, {\"x\": 5.353535353535354, \"y\": -0.8014106221689696, \"function\": \"Sine\"}, {\"x\": 5.454545454545454, \"y\": -0.7370127583189133, \"function\": \"Sine\"}, {\"x\": 5.555555555555555, \"y\": -0.6651015149788224, \"function\": \"Sine\"}, {\"x\": 5.656565656565657, \"y\": -0.5864099818472351, \"function\": \"Sine\"}, {\"x\": 5.757575757575758, \"y\": -0.5017403693939113, \"function\": \"Sine\"}, {\"x\": 5.858585858585858, \"y\": -0.4119558308308628, \"function\": \"Sine\"}, {\"x\": 5.959595959595959, \"y\": -0.31797166281061867, \"function\": \"Sine\"}, {\"x\": 6.0606060606060606, \"y\": -0.22074597455506334, \"function\": \"Sine\"}, {\"x\": 6.161616161616162, \"y\": -0.12126992053716677, \"function\": \"Sine\"}, {\"x\": 6.262626262626262, \"y\": -0.020557596287260064, \"function\": \"Sine\"}, {\"x\": 6.363636363636363, \"y\": 0.08036429967028173, \"function\": \"Sine\"}, {\"x\": 6.4646464646464645, \"y\": 0.18046693235991093, \"function\": \"Sine\"}, {\"x\": 6.565656565656566, \"y\": 0.27872981867755725, \"function\": \"Sine\"}, {\"x\": 6.666666666666667, \"y\": 0.37415123057121996, \"function\": \"Sine\"}, {\"x\": 6.767676767676767, \"y\": 0.4657584070256517, \"function\": \"Sine\"}, {\"x\": 6.8686868686868685, \"y\": 0.5526174707464059, \"function\": \"Sine\"}, {\"x\": 6.96969696969697, \"y\": 0.6338429484489058, \"function\": \"Sine\"}, {\"x\": 7.070707070707071, \"y\": 0.7086067976992182, \"function\": \"Sine\"}, {\"x\": 7.171717171717171, \"y\": 0.7761468482835805, \"function\": \"Sine\"}, {\"x\": 7.2727272727272725, \"y\": 0.8357745720522589, \"function\": \"Sine\"}, {\"x\": 7.373737373737374, \"y\": 0.8868821020290788, \"function\": \"Sine\"}, {\"x\": 7.474747474747475, \"y\": 0.9289484292312513, \"function\": \"Sine\"}, {\"x\": 7.575757575757575, \"y\": 0.9615447140268235, \"function\": \"Sine\"}, {\"x\": 7.6767676767676765, \"y\": 0.9843386578838236, \"function\": \"Sine\"}, {\"x\": 7.777777777777778, \"y\": 0.9970978909438748, \"function\": \"Sine\"}, {\"x\": 7.878787878787879, \"y\": 0.9996923408861117, \"function\": \"Sine\"}, {\"x\": 7.979797979797979, \"y\": 0.9920955589323228, \"function\": \"Sine\"}, {\"x\": 8.080808080808081, \"y\": 0.9743849894755358, \"function\": \"Sine\"}, {\"x\": 8.181818181818182, \"y\": 0.9467411805833543, \"function\": \"Sine\"}, {\"x\": 8.282828282828282, \"y\": 0.9094459434244625, \"function\": \"Sine\"}, {\"x\": 8.383838383838384, \"y\": 0.8628794793817834, \"function\": \"Sine\"}, {\"x\": 8.484848484848484, \"y\": 0.8075165041395626, \"function\": \"Sine\"}, {\"x\": 8.585858585858587, \"y\": 0.7439214082568444, \"function\": \"Sine\"}, {\"x\": 8.686868686868687, \"y\": 0.6727425035622647, \"function\": \"Sine\"}, {\"x\": 8.787878787878787, \"y\": 0.5947054140244975, \"function\": \"Sine\"}, {\"x\": 8.88888888888889, \"y\": 0.510605678474283, \"function\": \"Sine\"}, {\"x\": 8.98989898989899, \"y\": 0.4213006405886069, \"function\": \"Sine\"}, {\"x\": 9.09090909090909, \"y\": 0.32770070881349983, \"function\": \"Sine\"}, {\"x\": 9.191919191919192, \"y\": 0.23076007532505177, \"function\": \"Sine\"}, {\"x\": 9.292929292929292, \"y\": 0.13146698864295842, \"function\": \"Sine\"}, {\"x\": 9.393939393939394, \"y\": 0.03083367906114098, \"function\": \"Sine\"}, {\"x\": 9.494949494949495, \"y\": -0.07011396040064677, \"function\": \"Sine\"}, {\"x\": 9.595959595959595, \"y\": -0.1703468323280965, \"function\": \"Sine\"}, {\"x\": 9.696969696969697, \"y\": -0.26884312591038406, \"function\": \"Sine\"}, {\"x\": 9.797979797979798, \"y\": -0.3645987336558887, \"function\": \"Sine\"}, {\"x\": 9.8989898989899, \"y\": -0.45663748763377376, \"function\": \"Sine\"}, {\"x\": 10.0, \"y\": -0.5440211108893698, \"function\": \"Sine\"}, {\"x\": 0.0, \"y\": 1.0, \"function\": \"Cosine\"}, {\"x\": 0.10101010101010101, \"y\": 0.9949028158568303, \"function\": \"Cosine\"}, {\"x\": 0.20202020202020202, \"y\": 0.9796632259996998, \"function\": \"Cosine\"}, {\"x\": 0.30303030303030304, \"y\": 0.9544365884201449, \"function\": \"Cosine\"}, {\"x\": 0.40404040404040403, \"y\": 0.9194800727522776, \"function\": \"Cosine\"}, {\"x\": 0.5050505050505051, \"y\": 0.8751500385908233, \"function\": \"Cosine\"}, {\"x\": 0.6060606060606061, \"y\": 0.82189840263017, \"function\": \"Cosine\"}, {\"x\": 0.7070707070707071, \"y\": 0.7602680316591506, \"function\": \"Cosine\"}, {\"x\": 0.8080808080808081, \"y\": 0.6908872083770674, \"function\": \"Cosine\"}, {\"x\": 0.9090909090909091, \"y\": 0.6144632264484674, \"function\": \"Cosine\"}, {\"x\": 1.0101010101010102, \"y\": 0.5317751800910392, \"function\": \"Cosine\"}, {\"x\": 1.1111111111111112, \"y\": 0.4436660217022285, \"function\": \"Cosine\"}, {\"x\": 1.2121212121212122, \"y\": 0.3510339684920502, \"function\": \"Cosine\"}, {\"x\": 1.3131313131313131, \"y\": 0.25482334572604864, \"function\": \"Cosine\"}, {\"x\": 1.4141414141414141, \"y\": 0.15601495992575853, \"function\": \"Cosine\"}, {\"x\": 1.5151515151515151, \"y\": 0.05561610016580674, \"function\": \"Cosine\"}, {\"x\": 1.6161616161616161, \"y\": -0.04534973060188524, \"function\": \"Cosine\"}, {\"x\": 1.7171717171717171, \"y\": -0.1458532495141353, \"function\": \"Cosine\"}, {\"x\": 1.8181818181818181, \"y\": -0.24486988668507892, \"function\": \"Cosine\"}, {\"x\": 1.9191919191919191, \"y\": -0.3413902300489206, \"function\": \"Cosine\"}, {\"x\": 2.0202020202020203, \"y\": -0.43443031567828566, \"function\": \"Cosine\"}, {\"x\": 2.121212121212121, \"y\": -0.5230416586748752, \"function\": \"Cosine\"}, {\"x\": 2.2222222222222223, \"y\": -0.6063209223738354, \"function\": \"Cosine\"}, {\"x\": 2.323232323232323, \"y\": -0.6834191272904034, \"function\": \"Cosine\"}, {\"x\": 2.4242424242424243, \"y\": -0.7535503059294446, \"function\": \"Cosine\"}, {\"x\": 2.525252525252525, \"y\": -0.815999515227557, \"function\": \"Cosine\"}, {\"x\": 2.6262626262626263, \"y\": -0.8701301249459654, \"function\": \"Cosine\"}, {\"x\": 2.727272727272727, \"y\": -0.9153903077136358, \"function\": \"Cosine\"}, {\"x\": 2.8282828282828283, \"y\": -0.9513186645587279, \"function\": \"Cosine\"}, {\"x\": 2.929292929292929, \"y\": -0.9775489285796396, \"function\": \"Cosine\"}, {\"x\": 3.0303030303030303, \"y\": -0.993813698804694, \"function\": \"Cosine\"}, {\"x\": 3.131313131313131, \"y\": -0.9999471661761239, \"function\": \"Cosine\"}, {\"x\": 3.2323232323232323, \"y\": -0.9958868038686729, \"function\": \"Cosine\"}, {\"x\": 3.3333333333333335, \"y\": -0.981674004711079, \"function\": \"Cosine\"}, {\"x\": 3.4343434343434343, \"y\": -0.9574536592123348, \"function\": \"Cosine\"}, {\"x\": 3.5353535353535355, \"y\": -0.9234726784944765, \"function\": \"Cosine\"}, {\"x\": 3.6363636363636362, \"y\": -0.8800774771896732, \"function\": \"Cosine\"}, {\"x\": 3.7373737373737375, \"y\": -0.8277104419618857, \"function\": \"Cosine\"}, {\"x\": 3.8383838383838382, \"y\": -0.7669054216542901, \"function\": \"Cosine\"}, {\"x\": 3.9393939393939394, \"y\": -0.69828228503756, \"function\": \"Cosine\"}, {\"x\": 4.040404040404041, \"y\": -0.6225406016393301, \"function\": \"Cosine\"}, {\"x\": 4.141414141414141, \"y\": -0.5404525100747903, \"function\": \"Cosine\"}, {\"x\": 4.242424242424242, \"y\": -0.45285484658127084, \"function\": \"Cosine\"}, {\"x\": 4.343434343434343, \"y\": -0.3606406140014481, \"function\": \"Cosine\"}, {\"x\": 4.444444444444445, \"y\": -0.2647498781834829, \"function\": \"Cosine\"}, {\"x\": 4.545454545454545, \"y\": -0.16616018460355267, \"function\": \"Cosine\"}, {\"x\": 4.646464646464646, \"y\": -0.06587659290724678, \"function\": \"Cosine\"}, {\"x\": 4.747474747474747, \"y\": 0.03507856903860484, \"function\": \"Cosine\"}, {\"x\": 4.848484848484849, \"y\": 0.13567612713271912, \"function\": \"Cosine\"}, {\"x\": 4.94949494949495, \"y\": 0.23489055281917826, \"function\": \"Cosine\"}, {\"x\": 5.05050505050505, \"y\": 0.33171041770321597, \"function\": \"Cosine\"}, {\"x\": 5.151515151515151, \"y\": 0.42514870442477243, \"function\": \"Cosine\"}, {\"x\": 5.252525252525253, \"y\": 0.5142528686769626, \"function\": \"Cosine\"}, {\"x\": 5.353535353535354, \"y\": 0.5981145497935533, \"function\": \"Cosine\"}, {\"x\": 5.454545454545454, \"y\": 0.6758788309121296, \"function\": \"Cosine\"}, {\"x\": 5.555555555555555, \"y\": 0.7467529543114478, \"function\": \"Cosine\"}, {\"x\": 5.656565656565657, \"y\": 0.810014403075603, \"function\": \"Cosine\"}, {\"x\": 5.757575757575758, \"y\": 0.865018266697566, \"function\": \"Cosine\"}, {\"x\": 5.858585858585858, \"y\": 0.9112038155344026, \"function\": \"Cosine\"}, {\"x\": 5.959595959595959, \"y\": 0.9481002170917641, \"function\": \"Cosine\"}, {\"x\": 6.0606060606060606, \"y\": 0.9753313358637337, \"function\": \"Cosine\"}, {\"x\": 6.161616161616162, \"y\": 0.9926195677967009, \"function\": \"Cosine\"}, {\"x\": 6.262626262626262, \"y\": 0.9997886702873213, \"function\": \"Cosine\"}, {\"x\": 6.363636363636363, \"y\": 0.9967655588645231, \"function\": \"Cosine\"}, {\"x\": 6.4646464646464645, \"y\": 0.983581052239521, \"function\": \"Cosine\"}, {\"x\": 6.565656565656566, \"y\": 0.9603695581285238, \"function\": \"Cosine\"}, {\"x\": 6.666666666666667, \"y\": 0.9273677030509753, \"function\": \"Cosine\"}, {\"x\": 6.767676767676767, \"y\": 0.8849119200716687, \"function\": \"Cosine\"}, {\"x\": 6.8686868686868685, \"y\": 0.8334350190781794, \"function\": \"Cosine\"}, {\"x\": 6.96969696969697, \"y\": 0.7734617745574747, \"function\": \"Cosine\"}, {\"x\": 7.070707070707071, \"y\": 0.7056035758515253, \"function\": \"Cosine\"}, {\"x\": 7.171717171717171, \"y\": 0.6305521944291881, \"function\": \"Cosine\"}, {\"x\": 7.2727272727272725, \"y\": 0.5490727317130796, \"function\": \"Cosine\"}, {\"x\": 7.373737373737374, \"y\": 0.4619958193539013, \"function\": \"Cosine\"}, {\"x\": 7.474747474747475, \"y\": 0.3702091514654802, \"function\": \"Cosine\"}, {\"x\": 7.575757575757575, \"y\": 0.2746484351440477, \"function\": \"Cosine\"}, {\"x\": 7.6767676767676765, \"y\": 0.17628785152548898, \"function\": \"Cosine\"}, {\"x\": 7.777777777777778, \"y\": 0.07613012462407193, \"function\": \"Cosine\"}, {\"x\": 7.878787878787879, \"y\": -0.02480370080544784, \"function\": \"Cosine\"}, {\"x\": 7.979797979797979, \"y\": -0.12548466817409182, \"function\": \"Cosine\"}, {\"x\": 8.080808080808081, \"y\": -0.22488639862108173, \"function\": \"Cosine\"}, {\"x\": 8.181818181818182, \"y\": -0.3219955542979381, \"function\": \"Cosine\"}, {\"x\": 8.282828282828282, \"y\": -0.41582216870771727, \"function\": \"Cosine\"}, {\"x\": 8.383838383838384, \"y\": -0.5054097387880672, \"function\": \"Cosine\"}, {\"x\": 8.484848484848484, \"y\": -0.5898449758557073, \"function\": \"Cosine\"}, {\"x\": 8.585858585858587, \"y\": -0.6682671160076288, \"function\": \"Cosine\"}, {\"x\": 8.686868686868687, \"y\": -0.7398766950653171, \"function\": \"Cosine\"}, {\"x\": 8.787878787878787, \"y\": -0.80394369860703, \"function\": \"Cosine\"}, {\"x\": 8.88888888888889, \"y\": -0.859815004003662, \"function\": \"Cosine\"}, {\"x\": 8.98989898989899, \"y\": -0.9069210385913591, \"function\": \"Cosine\"}, {\"x\": 9.09090909090909, \"y\": -0.9447815861050266, \"function\": \"Cosine\"}, {\"x\": 9.191919191919192, \"y\": -0.973010682179788, \"function\": \"Cosine\"}, {\"x\": 9.292929292929292, \"y\": -0.9913205490138658, \"function\": \"Cosine\"}, {\"x\": 9.393939393939394, \"y\": -0.9995245290814802, \"function\": \"Cosine\"}, {\"x\": 9.494949494949495, \"y\": -0.9975389879884077, \"function\": \"Cosine\"}, {\"x\": 9.595959595959595, \"y\": -0.9853841670717991, \"function\": \"Cosine\"}, {\"x\": 9.696969696969697, \"y\": -0.9631839770525324, \"function\": \"Cosine\"}, {\"x\": 9.797979797979798, \"y\": -0.9311647348436916, \"function\": \"Cosine\"}, {\"x\": 9.8989898989899, \"y\": -0.8896528563926016, \"function\": \"Cosine\"}, {\"x\": 10.0, \"y\": -0.8390715290764524, \"function\": \"Cosine\"}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Heatmap\n\n**Matplotlib:**\n\n::: {#0b69e9c3 .cell execution_count=13}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.rand(10, 12)\n\nplt.figure(figsize=(10, 8))\nplt.imshow(data, cmap='viridis')\nplt.colorbar(label='Value')\nplt.title('Matplotlib Heatmap')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=775 height=611}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#0c09e621 .cell execution_count=14}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.rand(10, 12)\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(data, annot=True, cmap='viridis', fmt='.2f')\nplt.title('Seaborn Heatmap')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-1.png){width=741 height=657}\n:::\n:::\n\n\n**Altair:**\n\n::: {#562c274b .cell execution_count=15}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data\ndata = np.random.rand(10, 12)\ndf = pd.DataFrame(data)\n\n# Reshape for Altair\ndf_long = df.reset_index().melt(id_vars='index')\ndf_long.columns = ['y', 'x', 'value']\n\nalt.Chart(df_long).mark_rect().encode(\n    x='x:O',\n    y='y:O',\n    color='value:Q'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Heatmap'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n\n<style>\n  #altair-viz-127fb2134f394e3f9365ec2e747d1856.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-127fb2134f394e3f9365ec2e747d1856.vega-embed details,\n  #altair-viz-127fb2134f394e3f9365ec2e747d1856.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-127fb2134f394e3f9365ec2e747d1856\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-127fb2134f394e3f9365ec2e747d1856\") {\n      outputDiv = document.getElementById(\"altair-viz-127fb2134f394e3f9365ec2e747d1856\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-e2f802bdd6be4e2664d00e38967c055f\"}, \"mark\": {\"type\": \"rect\"}, \"encoding\": {\"color\": {\"field\": \"value\", \"type\": \"quantitative\"}, \"x\": {\"field\": \"x\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"y\", \"type\": \"ordinal\"}}, \"height\": 400, \"title\": \"Altair Heatmap\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-e2f802bdd6be4e2664d00e38967c055f\": [{\"y\": 0, \"x\": 0, \"value\": 0.1615408763466324}, {\"y\": 1, \"x\": 0, \"value\": 0.04526369512357864}, {\"y\": 2, \"x\": 0, \"value\": 0.10351057271215458}, {\"y\": 3, \"x\": 0, \"value\": 0.009462139104124967}, {\"y\": 4, \"x\": 0, \"value\": 0.7773702920389692}, {\"y\": 5, \"x\": 0, \"value\": 0.8685501548561906}, {\"y\": 6, \"x\": 0, \"value\": 0.9005720099532988}, {\"y\": 7, \"x\": 0, \"value\": 0.7883149105078996}, {\"y\": 8, \"x\": 0, \"value\": 0.6894919188637879}, {\"y\": 9, \"x\": 0, \"value\": 0.1427832624057983}, {\"y\": 0, \"x\": 1, \"value\": 0.9197129394192876}, {\"y\": 1, \"x\": 1, \"value\": 0.9453250515545734}, {\"y\": 2, \"x\": 1, \"value\": 0.002767893530411736}, {\"y\": 3, \"x\": 1, \"value\": 0.2885036100813573}, {\"y\": 4, \"x\": 1, \"value\": 0.2503642691227269}, {\"y\": 5, \"x\": 1, \"value\": 0.1015715072602873}, {\"y\": 6, \"x\": 1, \"value\": 0.6561460501108375}, {\"y\": 7, \"x\": 1, \"value\": 0.6492031261186105}, {\"y\": 8, \"x\": 1, \"value\": 0.32484604580676013}, {\"y\": 9, \"x\": 1, \"value\": 0.16668081349623154}, {\"y\": 0, \"x\": 2, \"value\": 0.565103131307743}, {\"y\": 1, \"x\": 2, \"value\": 0.5766943826090547}, {\"y\": 2, \"x\": 2, \"value\": 0.9169903159532347}, {\"y\": 3, \"x\": 2, \"value\": 0.609311715048926}, {\"y\": 4, \"x\": 2, \"value\": 0.34592877038995995}, {\"y\": 5, \"x\": 2, \"value\": 0.21706128281344583}, {\"y\": 6, \"x\": 2, \"value\": 0.2713702865417206}, {\"y\": 7, \"x\": 2, \"value\": 0.4114019254873188}, {\"y\": 8, \"x\": 2, \"value\": 0.3472396370787886}, {\"y\": 9, \"x\": 2, \"value\": 0.29775925231536793}, {\"y\": 0, \"x\": 3, \"value\": 0.1424737108190317}, {\"y\": 1, \"x\": 3, \"value\": 0.737223238063392}, {\"y\": 2, \"x\": 3, \"value\": 0.6037199980961054}, {\"y\": 3, \"x\": 3, \"value\": 0.7431113717443855}, {\"y\": 4, \"x\": 3, \"value\": 0.016374011266815813}, {\"y\": 5, \"x\": 3, \"value\": 0.2132432403718696}, {\"y\": 6, \"x\": 3, \"value\": 0.3532639437551519}, {\"y\": 7, \"x\": 3, \"value\": 0.015386882320329365}, {\"y\": 8, \"x\": 3, \"value\": 0.008368335280785733}, {\"y\": 9, \"x\": 3, \"value\": 0.06919337096616685}, {\"y\": 0, \"x\": 4, \"value\": 0.837179220900594}, {\"y\": 1, \"x\": 4, \"value\": 0.8261244288035088}, {\"y\": 2, \"x\": 4, \"value\": 0.020096049188691345}, {\"y\": 3, \"x\": 4, \"value\": 0.03553545196073882}, {\"y\": 4, \"x\": 4, \"value\": 0.6627173396500057}, {\"y\": 5, \"x\": 4, \"value\": 0.0422318077183359}, {\"y\": 6, \"x\": 4, \"value\": 0.5624448029997934}, {\"y\": 7, \"x\": 4, \"value\": 0.8191391202589102}, {\"y\": 8, \"x\": 4, \"value\": 0.31296455419978997}, {\"y\": 9, \"x\": 4, \"value\": 0.39012293898706296}, {\"y\": 0, \"x\": 5, \"value\": 0.6743197667735554}, {\"y\": 1, \"x\": 5, \"value\": 0.9091259816230359}, {\"y\": 2, \"x\": 5, \"value\": 0.9665843285699109}, {\"y\": 3, \"x\": 5, \"value\": 0.02884503138079142}, {\"y\": 4, \"x\": 5, \"value\": 0.4748984474504323}, {\"y\": 5, \"x\": 5, \"value\": 0.9292787986146172}, {\"y\": 6, \"x\": 5, \"value\": 0.6772057802909338}, {\"y\": 7, \"x\": 5, \"value\": 0.12944499828319367}, {\"y\": 8, \"x\": 5, \"value\": 0.016927421487200722}, {\"y\": 9, \"x\": 5, \"value\": 0.578593045812113}, {\"y\": 0, \"x\": 6, \"value\": 0.39390810288396627}, {\"y\": 1, \"x\": 6, \"value\": 0.32955775496862705}, {\"y\": 2, \"x\": 6, \"value\": 0.15681922873779508}, {\"y\": 3, \"x\": 6, \"value\": 0.9012645170624454}, {\"y\": 4, \"x\": 6, \"value\": 0.7406327613461866}, {\"y\": 5, \"x\": 6, \"value\": 0.9683838645884708}, {\"y\": 6, \"x\": 6, \"value\": 0.5570436440357069}, {\"y\": 7, \"x\": 6, \"value\": 0.33272674719600626}, {\"y\": 8, \"x\": 6, \"value\": 0.17817004919521884}, {\"y\": 9, \"x\": 6, \"value\": 0.3382266467623789}, {\"y\": 0, \"x\": 7, \"value\": 0.648865536688554}, {\"y\": 1, \"x\": 7, \"value\": 0.6277881958106524}, {\"y\": 2, \"x\": 7, \"value\": 0.9144328174343552}, {\"y\": 3, \"x\": 7, \"value\": 0.28727603761685694}, {\"y\": 4, \"x\": 7, \"value\": 0.14791063716465913}, {\"y\": 5, \"x\": 7, \"value\": 0.32082454843175046}, {\"y\": 6, \"x\": 7, \"value\": 0.7133901013064241}, {\"y\": 7, \"x\": 7, \"value\": 0.16033385684824308}, {\"y\": 8, \"x\": 7, \"value\": 0.5790815979715109}, {\"y\": 9, \"x\": 7, \"value\": 0.08785765642080878}, {\"y\": 0, \"x\": 8, \"value\": 0.05066985250260658}, {\"y\": 1, \"x\": 8, \"value\": 0.9955216189614343}, {\"y\": 2, \"x\": 8, \"value\": 0.28684483528357796}, {\"y\": 3, \"x\": 8, \"value\": 0.9142397586387804}, {\"y\": 4, \"x\": 8, \"value\": 0.7726777937943816}, {\"y\": 5, \"x\": 8, \"value\": 0.18504112460361077}, {\"y\": 6, \"x\": 8, \"value\": 0.7635670159794828}, {\"y\": 7, \"x\": 8, \"value\": 0.7546553807083051}, {\"y\": 8, \"x\": 8, \"value\": 0.11812592213152051}, {\"y\": 9, \"x\": 8, \"value\": 0.9729451594807839}, {\"y\": 0, \"x\": 9, \"value\": 0.6196238216002841}, {\"y\": 1, \"x\": 9, \"value\": 0.2647962870137086}, {\"y\": 2, \"x\": 9, \"value\": 0.5393578870899157}, {\"y\": 3, \"x\": 9, \"value\": 0.517804433210416}, {\"y\": 4, \"x\": 9, \"value\": 0.6716453414196273}, {\"y\": 5, \"x\": 9, \"value\": 0.5394516089259513}, {\"y\": 6, \"x\": 9, \"value\": 0.15410556846064782}, {\"y\": 7, \"x\": 9, \"value\": 0.2404703471120898}, {\"y\": 8, \"x\": 9, \"value\": 0.9744080988784972}, {\"y\": 9, \"x\": 9, \"value\": 0.11866178857395004}, {\"y\": 0, \"x\": 10, \"value\": 0.23039508912795092}, {\"y\": 1, \"x\": 10, \"value\": 0.714732332118327}, {\"y\": 2, \"x\": 10, \"value\": 0.008322067171633418}, {\"y\": 3, \"x\": 10, \"value\": 0.5709658754095008}, {\"y\": 4, \"x\": 10, \"value\": 0.47183570761640026}, {\"y\": 5, \"x\": 10, \"value\": 0.47364165065834773}, {\"y\": 6, \"x\": 10, \"value\": 0.09616332080452683}, {\"y\": 7, \"x\": 10, \"value\": 0.39519491527999684}, {\"y\": 8, \"x\": 10, \"value\": 0.6160445960028116}, {\"y\": 9, \"x\": 10, \"value\": 0.18474474005215802}, {\"y\": 0, \"x\": 11, \"value\": 0.052264831927794186}, {\"y\": 1, \"x\": 11, \"value\": 0.3016660079302127}, {\"y\": 2, \"x\": 11, \"value\": 0.8249493751384892}, {\"y\": 3, \"x\": 11, \"value\": 0.7791077428987188}, {\"y\": 4, \"x\": 11, \"value\": 0.5453566827391808}, {\"y\": 5, \"x\": 11, \"value\": 0.6648127429835697}, {\"y\": 6, \"x\": 11, \"value\": 0.6208917445146623}, {\"y\": 7, \"x\": 11, \"value\": 0.2964718704242003}, {\"y\": 8, \"x\": 11, \"value\": 0.4627316468590065}, {\"y\": 9, \"x\": 11, \"value\": 0.7005465462120332}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n## Decision Framework for Choosing a Library\n\n### Choose Matplotlib when:\n- You need complete control over every detail of your visualization\n- You're creating complex, custom plots\n- Your visualizations will be included in scientific publications\n- You're working with very large datasets\n- You need to create animations or specialized chart types\n\n### Choose Seaborn when:\n- You want attractive plots with minimal code\n- You're performing statistical analysis\n- You want to create common statistical plots quickly\n- You need to visualize relationships between variables\n- You want good-looking defaults but still need some customization\n\n### Choose Altair when:\n- You want interactive visualizations\n- You prefer a declarative approach to visualization\n- You want concise, readable code\n- You're creating dashboards or web-based visualizations\n- You're working with small to medium-sized datasets\n\n## Integration Examples\n\n### Combining Seaborn with Matplotlib:\n\n::: {#df313ea3 .cell execution_count=16}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\n\n# Create sample data\nnp.random.seed(42)\ndata = pd.DataFrame({\n    'x': np.random.normal(0, 1, 100),\n    'y': np.random.normal(0, 1, 100),\n    'category': np.random.choice(['A', 'B', 'C'], 100)\n})\n\n# Create a figure with Matplotlib\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Use Seaborn for the main plot\nsns.scatterplot(data=data, x='x', y='y', hue='category', ax=ax)\n\n# Add Matplotlib customizations\nax.set_title('Combining Matplotlib and Seaborn', fontsize=16)\nax.grid(True, linestyle='--', alpha=0.7)\nax.set_xlabel('X Variable', fontsize=12)\nax.set_ylabel('Y Variable', fontsize=12)\n\n# Add annotations using Matplotlib\nax.annotate('Interesting Point', xy=(-1, 1), xytext=(-2, 1.5),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){width=944 height=561}\n:::\n:::\n\n\n### Using Altair with Pandas:\n\n::: {#6109b504 .cell execution_count=17}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data with pandas\nnp.random.seed(42)\ndf = pd.DataFrame({\n    'date': pd.date_range('2023-01-01', periods=100),\n    'value': np.cumsum(np.random.randn(100)),\n    'category': np.random.choice(['Group A', 'Group B'], 100)\n})\n\n# Use pandas to prepare the data\ndf['month'] = df['date'].dt.month\nmonthly_avg = df.groupby(['month', 'category'])['value'].mean().reset_index()\n\n# Create the Altair visualization\nchart = alt.Chart(monthly_avg).mark_line(point=True).encode(\n    x='month:O',\n    y='value:Q',\n    color='category:N',\n    tooltip=['month', 'value', 'category']\n).properties(\n    width=600,\n    height=400,\n    title='Monthly Averages by Category'\n).interactive()\n\nchart\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n\n<style>\n  #altair-viz-3e2c36570dd54e63ba2c217687357d61.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-3e2c36570dd54e63ba2c217687357d61.vega-embed details,\n  #altair-viz-3e2c36570dd54e63ba2c217687357d61.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-3e2c36570dd54e63ba2c217687357d61\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-3e2c36570dd54e63ba2c217687357d61\") {\n      outputDiv = document.getElementById(\"altair-viz-3e2c36570dd54e63ba2c217687357d61\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-a541d48ae4ddcdd5651af34b355e0012\"}, \"mark\": {\"type\": \"line\", \"point\": true}, \"encoding\": {\"color\": {\"field\": \"category\", \"type\": \"nominal\"}, \"tooltip\": [{\"field\": \"month\", \"type\": \"quantitative\"}, {\"field\": \"value\", \"type\": \"quantitative\"}, {\"field\": \"category\", \"type\": \"nominal\"}], \"x\": {\"field\": \"month\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"value\", \"type\": \"quantitative\"}}, \"height\": 400, \"params\": [{\"name\": \"param_2\", \"select\": {\"type\": \"interval\", \"encodings\": [\"x\", \"y\"]}, \"bind\": \"scales\"}], \"title\": \"Monthly Averages by Category\", \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-a541d48ae4ddcdd5651af34b355e0012\": [{\"month\": 1, \"category\": \"Group A\", \"value\": -1.1687602478608594}, {\"month\": 1, \"category\": \"Group B\", \"value\": 0.1733373892143235}, {\"month\": 2, \"category\": \"Group A\", \"value\": -8.844550443778122}, {\"month\": 2, \"category\": \"Group B\", \"value\": -8.735931823731262}, {\"month\": 3, \"category\": \"Group A\", \"value\": -8.844299433609882}, {\"month\": 3, \"category\": \"Group B\", \"value\": -9.455147207445952}, {\"month\": 4, \"category\": \"Group A\", \"value\": -9.520630718321136}, {\"month\": 4, \"category\": \"Group B\", \"value\": -9.494528166538776}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n## Performance Comparison\n\nFor libraries like Matplotlib, Seaborn, and Altair, performance can vary widely depending on the size of your dataset and the complexity of your visualization. Here's a general overview:\n\n### Small Datasets (< 1,000 points):\n- All three libraries perform well\n- Altair might have slightly more overhead due to its JSON specification generation\n\n### Medium Datasets (1,000 - 10,000 points):\n- Matplotlib and Seaborn continue to perform well\n- Altair starts to slow down but remains usable\n\n### Large Datasets (> 10,000 points):\n- Matplotlib performs best for large static visualizations\n- Seaborn becomes slower as it adds statistical computations\n- Altair significantly slows down and may require data aggregation\n\n### Recommended Approaches for Large Data:\n1. **Matplotlib**: Use `plot()` instead of `scatter()` for line plots, or try `hexbin()` for density plots\n2. **Seaborn**: Use `sample()` or aggregation methods before plotting\n3. **Altair**: Use `transform_sample()` or pre-aggregate your data\n\n## Conclusion\n\nThe Python visualization ecosystem offers tools for every need, from low-level control to high-level abstraction:\n\n- **Matplotlib** provides ultimate flexibility and control but requires more code and knowledge\n- **Seaborn** offers a perfect middle ground with statistical integration and clean defaults\n- **Altair** delivers a concise, declarative approach with built-in interactivity\n\nRather than picking just one library, consider becoming familiar with all three and selecting the right tool for each visualization task. Many data scientists use a combination of these libraries, leveraging the strengths of each one as needed.\n\nFor those just starting, Seaborn provides a gentle entry point with attractive results for common visualization needs. As your skills advance, you can incorporate Matplotlib for customization and Altair for interactive visualizations.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}