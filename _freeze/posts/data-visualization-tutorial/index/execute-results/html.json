{
  "hash": "8e47f814d7cf22d58abb51b8ff883745",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python Data Visualization: Matplotlib vs Seaborn vs Altair\"\nauthor: \"Krishnatheja Vanka\"\ndate: \"2025-04-12\"\ncategories: [code, tutorial, beginner]\nformat:\n  html:\n    code-fold: false\nexecute:\n  echo: true\n  timing: true\njupyter: python3\n---\n\n# Python Data Visualization: Matplotlib vs Seaborn vs Altair\n\n![](dataviz.jpg)\n\nThis guide compares three popular Python data visualization libraries: Matplotlib, Seaborn, and Altair (Vega-Altair). Each library has its own strengths, weaknesses, and ideal use cases. This comparison will help you choose the right tool for your specific visualization needs.\n\n## Quick Reference Comparison\n\n| Feature | Matplotlib | Seaborn | Altair |\n|---------|------------|---------|--------|\n| **Release Year** | 2003 | 2013 | 2016 |\n| **Foundation** | Standalone | Built on Matplotlib | Based on Vega-Lite |\n| **Philosophy** | Imperative | Statistical | Declarative |\n| **Abstraction Level** | Low | Medium | High |\n| **Learning Curve** | Steep | Moderate | Gentle |\n| **Code Verbosity** | High | Medium | Low |\n| **Customization** | Extensive | Good | Limited |\n| **Statistical Integration** | Manual | Built-in | Good |\n| **Interactive Features** | Limited | Limited | Excellent |\n| **Performance with Large Data** | Good | Moderate | Limited |\n| **Community & Resources** | Extensive | Good | Growing |\n\n## Matplotlib\n\nMatplotlib is the foundational plotting library in Python's data visualization ecosystem.\n\n### Strengths:\n- **Fine-grained control**: Almost every aspect of a visualization can be customized\n- **Versatility**: Can create virtually any type of static plot\n- **Maturity**: Extensive documentation and community support\n- **Ecosystem integration**: Many libraries integrate with or build upon Matplotlib\n- **Performance**: Handles large datasets well\n\n### Weaknesses:\n- **Verbose syntax**: Requires many lines of code for complex visualizations\n- **Steep learning curve**: Many functions and parameters to learn\n- **Default aesthetics**: Basic default styling (though this has improved)\n- **Limited interactivity**: Primarily designed for static plots\n\n### Example Code:\n\n::: {#9f330529 .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Plot data\nax.plot(x, y, label='Sine Wave')\n\n# Add grid, legend, title and labels\nax.grid(True)\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Simple Sine Wave Plot')\nax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){}\n:::\n:::\n\n\n### When to use Matplotlib:\n- You need complete control over every aspect of your visualization\n- You're creating complex, publication-quality figures\n- You're working with specialized plot types not available in higher-level libraries\n- You need to integrate with many other Python libraries\n- You're working with large datasets\n\n## Seaborn\n\nSeaborn is a statistical visualization library built on top of Matplotlib.\n\n### Strengths:\n- **Aesthetic defaults**: Beautiful out-of-the-box styling\n- **Statistical integration**: Built-in support for statistical visualizations\n- **Dataset awareness**: Works well with pandas DataFrames\n- **Simplicity**: Fewer lines of code than Matplotlib for common plots\n- **High-level functions**: Specialized plots like `lmplot`, `catplot`, etc.\n\n### Weaknesses:\n- **Limited customization**: Some advanced customizations require falling back to Matplotlib\n- **Performance**: Can be slower with very large datasets\n- **Restricted scope**: Focused on statistical visualization, not general-purpose plotting\n\n### Example Code:\n\n::: {#cd302543 .cell execution_count=2}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, size=len(x))\ndata = pd.DataFrame({'x': x, 'y': y})\n\n# Set the aesthetic style\nsns.set_theme(style=\"whitegrid\")\n\n# Create the plot\nplt.figure(figsize=(8, 4))\nsns.lineplot(data=data, x='x', y='y', label='Noisy Sine Wave')\nsns.regplot(data=data, x='x', y='y', scatter=False, label='Regression Line')\n\n# Add title and labels\nplt.title('Seaborn Line Plot with Regression')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n### When to use Seaborn:\n- You want attractive visualizations with minimal code\n- You're performing statistical analysis\n- You're working with pandas DataFrames\n- You're creating common statistical plots (distributions, relationships, categorical plots)\n- You want the power of Matplotlib with a simpler interface\n\n## Altair (Vega-Altair)\n\nAltair is a declarative statistical visualization library based on Vega-Lite.\n\n### Strengths:\n- **Declarative approach**: Focus on what to visualize, not how to draw it\n- **Concise syntax**: Very readable, clear code\n- **Layered grammar of graphics**: Intuitive composition of plots\n- **Interactive visualizations**: Built-in support for interactive features\n- **JSON output**: Visualizations can be saved as JSON specifications\n\n### Weaknesses:\n- **Performance limitations**: Not ideal for very large datasets (>5000 points)\n- **Limited customization**: Less fine-grained control than Matplotlib\n- **Learning curve**: Different paradigm from traditional plotting libraries\n- **Browser dependency**: Uses JavaScript rendering for advanced features\n\n### Example Code:\n\n::: {#192fc89f .cell execution_count=3}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, size=len(x))\ndata = pd.DataFrame({'x': x, 'y': y})\n\n# Create a simple scatter plot with interactive tooltips\nchart = alt.Chart(data).mark_circle().encode(\n    x='x',\n    y='y',\n    tooltip=['x', 'y']\n).properties(\n    width=600,\n    height=300,\n    title='Interactive Altair Scatter Plot'\n).interactive()\n\n# Add a regression line\nregression = alt.Chart(data).transform_regression(\n    'x', 'y'\n).mark_line(color='red').encode(\n    x='x',\n    y='y'\n)\n\n# Combine the plots\nfinal_chart = chart + regression\n\n# Display the chart\nfinal_chart\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n\n<style>\n  #altair-viz-aeecaa387f8c4087969d3dfa3528e425.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-aeecaa387f8c4087969d3dfa3528e425.vega-embed details,\n  #altair-viz-aeecaa387f8c4087969d3dfa3528e425.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-aeecaa387f8c4087969d3dfa3528e425\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-aeecaa387f8c4087969d3dfa3528e425\") {\n      outputDiv = document.getElementById(\"altair-viz-aeecaa387f8c4087969d3dfa3528e425\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"layer\": [{\"mark\": {\"type\": \"circle\"}, \"encoding\": {\"tooltip\": [{\"field\": \"x\", \"type\": \"quantitative\"}, {\"field\": \"y\", \"type\": \"quantitative\"}], \"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"name\": \"view_1\", \"title\": \"Interactive Altair Scatter Plot\"}, {\"mark\": {\"type\": \"line\", \"color\": \"red\"}, \"encoding\": {\"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"transform\": [{\"on\": \"x\", \"regression\": \"y\"}]}], \"data\": {\"name\": \"data-fe8f0904a1cf0577471d1de6e1d20aa7\"}, \"height\": 300, \"params\": [{\"name\": \"param_1\", \"select\": {\"type\": \"interval\", \"encodings\": [\"x\", \"y\"]}, \"bind\": \"scales\", \"views\": [\"view_1\"]}], \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-fe8f0904a1cf0577471d1de6e1d20aa7\": [{\"x\": 0.0, \"y\": -0.06567344220710179}, {\"x\": 0.10101010101010101, \"y\": -0.06967964899192142}, {\"x\": 0.20202020202020202, \"y\": 0.09940724919480545}, {\"x\": 0.30303030303030304, \"y\": 0.19463086265197527}, {\"x\": 0.40404040404040403, \"y\": 0.3861273756763483}, {\"x\": 0.5050505050505051, \"y\": 0.48743637492255676}, {\"x\": 0.6060606060606061, \"y\": 0.8508279144584306}, {\"x\": 0.7070707070707071, \"y\": 0.48874430830822874}, {\"x\": 0.8080808080808081, \"y\": 0.6773691904842972}, {\"x\": 0.9090909090909091, \"y\": 0.48987728255352053}, {\"x\": 1.0101010101010102, \"y\": 1.0882840423024105}, {\"x\": 1.1111111111111112, \"y\": 0.9283956511573178}, {\"x\": 1.2121212121212122, \"y\": 0.92599943881236}, {\"x\": 1.3131313131313131, \"y\": 0.9273001311158849}, {\"x\": 1.4141414141414141, \"y\": 1.2811558269949974}, {\"x\": 1.5151515151515151, \"y\": 1.0992326802982606}, {\"x\": 1.6161616161616161, \"y\": 0.9121253334457822}, {\"x\": 1.7171717171717171, \"y\": 0.7683299065945309}, {\"x\": 1.8181818181818181, \"y\": 1.0242012869502728}, {\"x\": 1.9191919191919191, \"y\": 0.910646589125857}, {\"x\": 2.0202020202020203, \"y\": 0.7164328310111326}, {\"x\": 2.121212121212121, \"y\": 0.7986653015660806}, {\"x\": 2.2222222222222223, \"y\": 0.42692366723844805}, {\"x\": 2.323232323232323, \"y\": 0.6453690099761745}, {\"x\": 2.4242424242424243, \"y\": 0.8784171316994949}, {\"x\": 2.525252525252525, \"y\": 0.6544971758488091}, {\"x\": 2.6262626262626263, \"y\": 0.4796073768856798}, {\"x\": 2.727272727272727, \"y\": 0.5669432643004293}, {\"x\": 2.8282828282828283, \"y\": 0.15779436426565074}, {\"x\": 2.929292929292929, \"y\": 0.1040781495133849}, {\"x\": 3.0303030303030303, \"y\": -0.0035507052256500554}, {\"x\": 3.131313131313131, \"y\": -0.06406071420153069}, {\"x\": 3.2323232323232323, \"y\": -0.1986714220671213}, {\"x\": 3.3333333333333335, \"y\": -0.18305171279294624}, {\"x\": 3.4343434343434343, \"y\": 0.11889433246226316}, {\"x\": 3.5353535353535355, \"y\": -0.40952611647510634}, {\"x\": 3.6363636363636362, \"y\": -0.5181268674421252}, {\"x\": 3.7373737373737375, \"y\": -0.48721022748539916}, {\"x\": 3.8383838383838382, \"y\": -0.4339923938777991}, {\"x\": 3.9393939393939394, \"y\": -0.7567232585444885}, {\"x\": 4.040404040404041, \"y\": -0.8243930383922958}, {\"x\": 4.141414141414141, \"y\": -1.0408710559980356}, {\"x\": 4.242424242424242, \"y\": -0.9206175594176532}, {\"x\": 4.343434343434343, \"y\": -0.915993178270063}, {\"x\": 4.444444444444445, \"y\": -0.8832079827768465}, {\"x\": 4.545454545454545, \"y\": -1.1203552226232807}, {\"x\": 4.646464646464646, \"y\": -1.148618861646916}, {\"x\": 4.747474747474747, \"y\": -1.3277222886674722}, {\"x\": 4.848484848484849, \"y\": -1.226361275546897}, {\"x\": 4.94949494949495, \"y\": -1.1467606144570337}, {\"x\": 5.05050505050505, \"y\": -1.0417348421989252}, {\"x\": 5.151515151515151, \"y\": -1.1701271165065767}, {\"x\": 5.252525252525253, \"y\": -0.8107348099667057}, {\"x\": 5.353535353535354, \"y\": -1.0654220437265023}, {\"x\": 5.454545454545454, \"y\": -0.4034903682771297}, {\"x\": 5.555555555555555, \"y\": -0.2182850047953636}, {\"x\": 5.656565656565657, \"y\": -0.5588132211891153}, {\"x\": 5.757575757575758, \"y\": -0.3108394151047653}, {\"x\": 5.858585858585858, \"y\": -0.23826310927773492}, {\"x\": 5.959595959595959, \"y\": -0.10766926262321103}, {\"x\": 6.0606060606060606, \"y\": -0.2247463919862303}, {\"x\": 6.161616161616162, \"y\": -0.16574443904378705}, {\"x\": 6.262626262626262, \"y\": 0.13649736367614904}, {\"x\": 6.363636363636363, \"y\": 0.24833402207656624}, {\"x\": 6.4646464646464645, \"y\": 0.19421449052309558}, {\"x\": 6.565656565656566, \"y\": 0.5815391348354002}, {\"x\": 6.666666666666667, \"y\": 0.23102191586206317}, {\"x\": 6.767676767676767, \"y\": 0.4702956355008144}, {\"x\": 6.8686868686868685, \"y\": 0.4165183063513146}, {\"x\": 6.96969696969697, \"y\": 0.7488264186571014}, {\"x\": 7.070707070707071, \"y\": 0.5172778051418353}, {\"x\": 7.171717171717171, \"y\": 0.8445140434688183}, {\"x\": 7.2727272727272725, \"y\": 0.8233042249841871}, {\"x\": 7.373737373737374, \"y\": 0.7302542816748836}, {\"x\": 7.474747474747475, \"y\": 0.6726285876515659}, {\"x\": 7.575757575757575, \"y\": 0.9942588741688444}, {\"x\": 7.6767676767676765, \"y\": 1.29176578467579}, {\"x\": 7.777777777777778, \"y\": 0.9466444979292455}, {\"x\": 7.878787878787879, \"y\": 1.0278868508514203}, {\"x\": 7.979797979797979, \"y\": 1.1779776494711822}, {\"x\": 8.080808080808081, \"y\": 1.106053664989521}, {\"x\": 8.181818181818182, \"y\": 0.7008975177958959}, {\"x\": 8.282828282828282, \"y\": 1.150800265707913}, {\"x\": 8.383838383838384, \"y\": 0.7340252078751566}, {\"x\": 8.484848484848484, \"y\": 0.8999416085386367}, {\"x\": 8.585858585858587, \"y\": 0.9675053114979552}, {\"x\": 8.686868686868687, \"y\": 0.8141177121833841}, {\"x\": 8.787878787878787, \"y\": 0.5011746628603331}, {\"x\": 8.88888888888889, \"y\": 0.4734613386900236}, {\"x\": 8.98989898989899, \"y\": 0.22473355869208259}, {\"x\": 9.09090909090909, \"y\": 0.14802566258657263}, {\"x\": 9.191919191919192, \"y\": 0.7700941724078234}, {\"x\": 9.292929292929292, \"y\": 0.11035633059996672}, {\"x\": 9.393939393939394, \"y\": -0.3526707372312581}, {\"x\": 9.494949494949495, \"y\": 0.18298265120405205}, {\"x\": 9.595959595959595, \"y\": -0.3603745031502543}, {\"x\": 9.696969696969697, \"y\": -0.5065443649772601}, {\"x\": 9.797979797979798, \"y\": -0.5924935626596324}, {\"x\": 9.8989898989899, \"y\": -0.5266457189846753}, {\"x\": 10.0, \"y\": -0.33989553865141325}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### When to use Altair:\n- You want interactive visualizations\n- You prefer a declarative approach to visualization\n- You're working with small to medium-sized datasets\n- You want to publish visualizations on the web\n- You appreciate a consistent grammar of graphics\n\n## Common Visualization Types Comparison\n\n### Scatter Plot\n\n**Matplotlib:**\n\n::: {#84b56953 .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.randn(100)\ny = np.random.randn(100)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y, alpha=0.7)\nplt.title('Matplotlib Scatter Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#53204995 .cell execution_count=5}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100)\n})\n\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=data, x='x', y='y', alpha=0.7)\nplt.title('Seaborn Scatter Plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){}\n:::\n:::\n\n\n**Altair:**\n\n::: {#88a6238b .cell execution_count=6}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100)\n})\n\nalt.Chart(data).mark_circle(opacity=0.7).encode(\n    x='x',\n    y='y'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Scatter Plot'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n\n<style>\n  #altair-viz-7db78feab88842578c08b4218760c6e7.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-7db78feab88842578c08b4218760c6e7.vega-embed details,\n  #altair-viz-7db78feab88842578c08b4218760c6e7.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-7db78feab88842578c08b4218760c6e7\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-7db78feab88842578c08b4218760c6e7\") {\n      outputDiv = document.getElementById(\"altair-viz-7db78feab88842578c08b4218760c6e7\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-02e7c15b0f23547dd92f4c4acb15d0e7\"}, \"mark\": {\"type\": \"circle\", \"opacity\": 0.7}, \"encoding\": {\"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Scatter Plot\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-02e7c15b0f23547dd92f4c4acb15d0e7\": [{\"x\": 1.0498793026672242, \"y\": 0.7902944340998955}, {\"x\": -1.2081545931571565, \"y\": 0.09530211538238965}, {\"x\": 2.0047426132812634, \"y\": -0.6244189959323309}, {\"x\": 0.5393363216311305, \"y\": -0.8095751261901128}, {\"x\": 0.63161981505117, \"y\": 0.5083356803387871}, {\"x\": -0.694114872958847, \"y\": 1.4649035397175976}, {\"x\": 1.076177183467489, \"y\": 0.9589952428583113}, {\"x\": 0.2444792140927606, \"y\": -0.9573916609376004}, {\"x\": -0.44095898899270747, \"y\": 0.19502263467548447}, {\"x\": -1.1858180776490692, \"y\": 0.07391598516443118}, {\"x\": -2.630947569703995, \"y\": -1.8973499428203493}, {\"x\": 0.1727811194095842, \"y\": 0.7456268719958855}, {\"x\": -0.5349088525903797, \"y\": -0.21545297942540728}, {\"x\": 0.4481525812678776, \"y\": -1.155581569047907}, {\"x\": 1.8326344021952292, \"y\": 0.09700187645707092}, {\"x\": -1.2993808991631306, \"y\": 0.46407951385187374}, {\"x\": -0.30330390207771224, \"y\": -1.3322536929784268}, {\"x\": -0.8531686222165369, \"y\": -0.705616380828157}, {\"x\": 0.25216817248736995, \"y\": -0.35570742314464404}, {\"x\": 1.1856837321825855, \"y\": -0.7166541363642205}, {\"x\": -0.31303938146818416, \"y\": -0.36424364617454064}, {\"x\": -1.0683372712252108, \"y\": 0.03465801118024959}, {\"x\": -0.6026177385611019, \"y\": -0.4680617590236696}, {\"x\": 1.2376170678195568, \"y\": 2.0406856241139546}, {\"x\": -1.9287160472821223, \"y\": -0.36450529052583464}, {\"x\": 0.007036165138557651, \"y\": 0.3531146328570968}, {\"x\": -0.33537569571196457, \"y\": 0.06660938589643375}, {\"x\": 0.7047387584902748, \"y\": -0.11222527537670109}, {\"x\": -1.944197286475497, \"y\": -0.3752642507654964}, {\"x\": 0.2865425295013964, \"y\": 0.5076347814147875}, {\"x\": 1.3096562771591322, \"y\": 1.3314306256410038}, {\"x\": 0.8380698570179874, \"y\": -0.008327458404241855}, {\"x\": -0.17342913189510603, \"y\": 0.019252026510023657}, {\"x\": -1.3829145347034286, \"y\": -0.21361367439858317}, {\"x\": 0.2040167303986746, \"y\": -0.24032805533761983}, {\"x\": 0.435604998170823, \"y\": 0.85857657187353}, {\"x\": -2.343730931109731, \"y\": 1.1182933354126638}, {\"x\": -0.06790845962848793, \"y\": 0.4573353944889394}, {\"x\": -0.4701234318299104, \"y\": 1.2370260194404634}, {\"x\": 0.3398571463992444, \"y\": 1.6550895720527703}, {\"x\": 0.8602219470091298, \"y\": 1.3295976592768461}, {\"x\": -2.02921964692088, \"y\": 0.44249180818924494}, {\"x\": 1.4198191807143763, \"y\": -1.1775212451018726}, {\"x\": 1.24615472798812, \"y\": 1.3811118336059438}, {\"x\": -1.02795106973166, \"y\": 1.0244359249507127}, {\"x\": -0.10897427654058524, \"y\": 0.4167634273730943}, {\"x\": 0.2880954828833386, \"y\": 0.3225028263532959}, {\"x\": -1.420045907118444, \"y\": -1.0480405048274468}, {\"x\": -0.9322256560319587, \"y\": 0.06873162860493127}, {\"x\": -1.556268857828806, \"y\": -0.4418506140334976}, {\"x\": -0.2887106964924986, \"y\": -0.5935774081597522}, {\"x\": -2.616056840688975, \"y\": 0.5273250166528703}, {\"x\": -0.6957153481315068, \"y\": 2.2166562283396716}, {\"x\": -1.6374447299148092, \"y\": -0.2467661567365201}, {\"x\": 0.8363792188443593, \"y\": -0.482433852383395}, {\"x\": -0.7378586099851083, \"y\": 0.09850221452325705}, {\"x\": 0.4769507633925046, \"y\": 0.6842171901581925}, {\"x\": 0.5767952302960029, \"y\": -8.564442547448471e-05}, {\"x\": -0.5397189047975497, \"y\": -1.9505595322208749}, {\"x\": -0.3905861879506531, \"y\": 0.08178203389877285}, {\"x\": 1.3678706410819126, \"y\": -1.811470466546367}, {\"x\": -0.37483364206253716, \"y\": 1.5282461269973422}, {\"x\": 0.8989777723810255, \"y\": -0.03885001859636793}, {\"x\": -1.2756791237424039, \"y\": 0.6263203995279532}, {\"x\": -0.17598557153634062, \"y\": -1.5461809266477442}, {\"x\": -0.7572193443354787, \"y\": -0.7408462450837382}, {\"x\": 0.7698562547143383, \"y\": 0.9988063259900134}, {\"x\": 1.2911666743213834, \"y\": 2.465150811873047}, {\"x\": -1.066191644297091, \"y\": -0.538309782322697}, {\"x\": 0.17560590861152042, \"y\": -0.5179659011242619}, {\"x\": 1.177620421707014, \"y\": 0.12288536005573547}, {\"x\": -0.49492759758043114, \"y\": 0.6477926900574336}, {\"x\": 0.007444962388644723, \"y\": 0.050656224197185254}, {\"x\": 1.26192984849524, \"y\": 0.7489788045114926}, {\"x\": 0.887933150938443, \"y\": -0.4576948270453469}, {\"x\": -0.010439050779260368, \"y\": -1.8274330921650181}, {\"x\": -0.34214994028343, \"y\": -1.7877375424351787}, {\"x\": 1.234165733181895, \"y\": 0.3135317665394873}, {\"x\": 1.2767420393708937, \"y\": 0.5277786739240092}, {\"x\": 0.591575167318667, \"y\": 0.07487919386571477}, {\"x\": 0.9463858261879667, \"y\": 0.44609311194146584}, {\"x\": -1.7399244364327746, \"y\": -0.14256349766980717}, {\"x\": -0.7398361410116729, \"y\": 1.5074563030664616}, {\"x\": 0.7749474999946786, \"y\": -1.2402538815212893}, {\"x\": -0.30512424814762923, \"y\": -0.12341411089241303}, {\"x\": 0.23494450766765504, \"y\": 0.6505643971689803}, {\"x\": 0.5668373234614242, \"y\": -0.8716853013658558}, {\"x\": 1.2065019044756657, \"y\": 0.6814939180881712}, {\"x\": 0.574038061172152, \"y\": 1.400228684531744}, {\"x\": -0.6543526823223786, \"y\": -0.5928548280246608}, {\"x\": -2.06738454081017, \"y\": 0.586496578347195}, {\"x\": -0.7682146354495603, \"y\": -0.34764426013912136}, {\"x\": 0.3745122071371635, \"y\": 1.4784685806481639}, {\"x\": -0.6515625577224177, \"y\": 0.4431263132937095}, {\"x\": 0.8364992773922476, \"y\": -2.3466638360339616}, {\"x\": -0.29472595982068855, \"y\": 0.27213012430162814}, {\"x\": 1.763523523644819, \"y\": 1.7015192805856871}, {\"x\": 0.9588030788318415, \"y\": -0.7085923898527805}, {\"x\": 0.1019671315043379, \"y\": -0.6982697960705186}, {\"x\": -1.5916140785095136, \"y\": -0.28700392372373085}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Histogram\n\n**Matplotlib:**\n\n::: {#ea4a273d .cell execution_count=7}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\n\nplt.figure(figsize=(8, 6))\nplt.hist(data, bins=30, alpha=0.7, edgecolor='black')\nplt.title('Matplotlib Histogram')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#4557bcb4 .cell execution_count=8}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\n\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(8, 6))\nsns.histplot(data=data, bins=30, kde=True)\nplt.title('Seaborn Histogram with KDE')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n**Altair:**\n\n::: {#826e0d6c .cell execution_count=9}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({'value': np.random.randn(1000)})\n\nalt.Chart(data).mark_bar().encode(\n    alt.X('value', bin=alt.Bin(maxbins=30)),\n    y='count()'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Histogram'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n\n<style>\n  #altair-viz-07b7e942c5394166a93df653f6d1cde5.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-07b7e942c5394166a93df653f6d1cde5.vega-embed details,\n  #altair-viz-07b7e942c5394166a93df653f6d1cde5.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-07b7e942c5394166a93df653f6d1cde5\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-07b7e942c5394166a93df653f6d1cde5\") {\n      outputDiv = document.getElementById(\"altair-viz-07b7e942c5394166a93df653f6d1cde5\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-d61e1189109b9efff5beffd9f6f075f8\"}, \"mark\": {\"type\": \"bar\"}, \"encoding\": {\"x\": {\"bin\": {\"maxbins\": 30}, \"field\": \"value\", \"type\": \"quantitative\"}, \"y\": {\"aggregate\": \"count\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Histogram\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-d61e1189109b9efff5beffd9f6f075f8\": [{\"value\": -0.31289546207693325}, {\"value\": -1.2429879129036805}, {\"value\": -0.8260165078863251}, {\"value\": -0.7221377649957805}, {\"value\": 0.5536307666462871}, {\"value\": -0.0034340893575499805}, {\"value\": -0.32887969933141736}, {\"value\": 0.1693739850926953}, {\"value\": 0.40775220660995193}, {\"value\": -0.8617725936936269}, {\"value\": 0.6444836199901732}, {\"value\": -1.5165576483690533}, {\"value\": -2.1866217227008184}, {\"value\": 1.233496182745233}, {\"value\": 1.1483143890227832}, {\"value\": -1.5362715420602377}, {\"value\": 0.028061490568661165}, {\"value\": -0.7788789413144647}, {\"value\": 1.2152485354761582}, {\"value\": -0.6695324404635977}, {\"value\": -0.9338554040533397}, {\"value\": -0.2548137524649242}, {\"value\": 1.296831576240823}, {\"value\": -0.6765014579703982}, {\"value\": 0.4951481958071381}, {\"value\": -0.8572630821685211}, {\"value\": -0.7808286851482361}, {\"value\": -1.932251392951904}, {\"value\": 0.44739007210375653}, {\"value\": 1.853358327997262}, {\"value\": 0.5708613589570867}, {\"value\": 0.832558204661743}, {\"value\": -0.9084171712841325}, {\"value\": -1.0550958220461424}, {\"value\": 0.9318638798092417}, {\"value\": 0.026095233046761142}, {\"value\": -0.12160236119341322}, {\"value\": 0.17695977432809978}, {\"value\": -0.398982262003654}, {\"value\": -1.199091376567683}, {\"value\": -1.5161195959707319}, {\"value\": 1.4831665003133132}, {\"value\": 0.19177842676214274}, {\"value\": -0.44892311220917114}, {\"value\": -0.15903729987979484}, {\"value\": -0.4999177263128407}, {\"value\": 0.6394890491887683}, {\"value\": -0.24923829092012847}, {\"value\": 0.14517664098601485}, {\"value\": -0.547321197706052}, {\"value\": 0.6630013322526529}, {\"value\": -1.4002578012976192}, {\"value\": -0.7527774272418905}, {\"value\": 0.563876660956562}, {\"value\": -1.0970654998064324}, {\"value\": 0.8165176285777448}, {\"value\": 0.38754620888852453}, {\"value\": -0.029897648303180993}, {\"value\": 0.43708736181746843}, {\"value\": 1.2598656419679348}, {\"value\": -1.081711089749437}, {\"value\": 0.5000723645088674}, {\"value\": -0.8216251774423546}, {\"value\": 0.926638081583368}, {\"value\": 2.141782405557989}, {\"value\": -0.1541358460520991}, {\"value\": -0.7564028606552159}, {\"value\": 0.012310477082135464}, {\"value\": -0.710840500124957}, {\"value\": 0.1483532172670399}, {\"value\": 1.636013880541319}, {\"value\": 0.33054308310638064}, {\"value\": 0.05403183841825582}, {\"value\": -1.2603899818251973}, {\"value\": -0.09489685276449272}, {\"value\": 0.7646065481098125}, {\"value\": -1.9405148112804864}, {\"value\": 0.14966761576697327}, {\"value\": -0.13511332154812977}, {\"value\": 0.3909081687684486}, {\"value\": -1.5031656934688038}, {\"value\": 0.799468398991758}, {\"value\": 0.6012031846861451}, {\"value\": -1.5414583374927657}, {\"value\": 0.8858977243521657}, {\"value\": 0.5299393972234988}, {\"value\": 2.3317871366651457}, {\"value\": 1.0612158382565127}, {\"value\": -1.08453533653431}, {\"value\": -0.3282122684672017}, {\"value\": 0.07162738934172988}, {\"value\": 0.8449941518799499}, {\"value\": 0.016740397626344466}, {\"value\": 0.13421178297907146}, {\"value\": -0.06719234086487454}, {\"value\": 1.3184955025452518}, {\"value\": -1.4974893436872625}, {\"value\": -0.22582542412645287}, {\"value\": 0.8874104900247792}, {\"value\": 1.2789646867563154}, {\"value\": 0.2926998099427278}, {\"value\": 0.1862752846408612}, {\"value\": -0.5924753448624462}, {\"value\": -2.0810623429921065}, {\"value\": -1.2204575513599432}, {\"value\": -1.8603347577205553}, {\"value\": -1.4155902573696677}, {\"value\": 0.026496034156555926}, {\"value\": 0.9398900463497206}, {\"value\": 0.8874960419565046}, {\"value\": -0.0632055343332251}, {\"value\": 2.5857725484134337}, {\"value\": -0.43787886296923983}, {\"value\": 0.11914096623804274}, {\"value\": 0.48783438629916526}, {\"value\": -0.07081546643805527}, {\"value\": -0.755832409861305}, {\"value\": -1.6501369492747577}, {\"value\": -1.4061171347685537}, {\"value\": -1.3181128523127221}, {\"value\": -1.1300002034216274}, {\"value\": -0.022769149036134275}, {\"value\": -0.41579389257747196}, {\"value\": 0.27186681072509206}, {\"value\": -1.432549028755983}, {\"value\": 0.07035398571876053}, {\"value\": -0.29611351498075594}, {\"value\": 0.08988335888943524}, {\"value\": 0.5925416094553358}, {\"value\": 0.7486627679031201}, {\"value\": 1.8058225141964197}, {\"value\": 0.49456152587852564}, {\"value\": -0.8950618518425766}, {\"value\": 0.8761816705442429}, {\"value\": 0.829576518636047}, {\"value\": 0.6990065422118728}, {\"value\": -0.44710657859632447}, {\"value\": -1.621058203028705}, {\"value\": 1.4358665057706195}, {\"value\": -0.6345744879679084}, {\"value\": 0.24147267596913927}, {\"value\": -0.3217155856393506}, {\"value\": -0.7066966199454273}, {\"value\": -0.609412249760808}, {\"value\": -0.23420504764643355}, {\"value\": 0.14996724129851918}, {\"value\": 0.43404583422297754}, {\"value\": 1.5770615907819867}, {\"value\": 0.9894397258102033}, {\"value\": -1.2376491765338844}, {\"value\": -0.6192590028927557}, {\"value\": -0.9377138223680673}, {\"value\": 1.4664205788182232}, {\"value\": -0.4694031149767158}, {\"value\": -1.059648134217756}, {\"value\": -1.1755891734388237}, {\"value\": -0.183286168283898}, {\"value\": 0.7811839420185499}, {\"value\": -0.6452039737339503}, {\"value\": 0.25522806956199207}, {\"value\": -1.9159507582642792}, {\"value\": 0.27786013304458557}, {\"value\": 1.2256353805512143}, {\"value\": 0.6682821045031831}, {\"value\": -0.7817261596703147}, {\"value\": 0.8330457332812695}, {\"value\": 0.6216580308064387}, {\"value\": 0.5997925917453232}, {\"value\": 0.07688515142512918}, {\"value\": 0.3521077525968019}, {\"value\": 0.5692263809862731}, {\"value\": -1.6176011659934253}, {\"value\": -0.7022311437262726}, {\"value\": 0.41557177308771676}, {\"value\": -1.559972551876304}, {\"value\": -0.5292002481904976}, {\"value\": 0.7220732971117448}, {\"value\": 1.0147100040738986}, {\"value\": 0.83171213879579}, {\"value\": 0.33805015319890974}, {\"value\": 0.22689724843117623}, {\"value\": -1.790281877360927}, {\"value\": 0.7305226986048594}, {\"value\": -0.9667002449390723}, {\"value\": -0.19227418734343124}, {\"value\": -1.525923814560343}, {\"value\": -0.6324256185147477}, {\"value\": -1.0209480554877672}, {\"value\": -1.1410891871984055}, {\"value\": -1.2901552569253496}, {\"value\": -1.4562762268469998}, {\"value\": -0.37929841822339805}, {\"value\": -0.7342957906437044}, {\"value\": -2.1076254920184065}, {\"value\": -0.6152208941589731}, {\"value\": 1.2692026716415652}, {\"value\": 1.41269971284458}, {\"value\": 0.9335994756400753}, {\"value\": 1.4799985036230614}, {\"value\": -0.4799795552317323}, {\"value\": -1.1876329754505264}, {\"value\": 1.252245817486997}, {\"value\": -1.9888836648482404}, {\"value\": -0.5927529943950542}, {\"value\": -1.2384770406481915}, {\"value\": -0.6758031880382929}, {\"value\": -0.4289906115845765}, {\"value\": 0.39867641087348304}, {\"value\": -0.18395365473475025}, {\"value\": 0.32561249762831057}, {\"value\": 0.05347636222630252}, {\"value\": -1.0058596236659973}, {\"value\": -0.07572811209369283}, {\"value\": 0.5524428124653877}, {\"value\": 0.14746356789890216}, {\"value\": 2.025558052064817}, {\"value\": -0.9326749628077927}, {\"value\": -2.034691726959925}, {\"value\": -0.9327256426818998}, {\"value\": -0.19815424091263842}, {\"value\": 0.9552242325548749}, {\"value\": 1.2834214886827728}, {\"value\": 0.04254175541231669}, {\"value\": -0.874734044242829}, {\"value\": -1.2418437459759728}, {\"value\": -1.114390105039164}, {\"value\": -1.4956309105088992}, {\"value\": -0.6647479682268937}, {\"value\": 1.4335315518612382}, {\"value\": 1.8628333232043601}, {\"value\": -0.04918982710422507}, {\"value\": 0.8568804715237283}, {\"value\": 1.0874532247835345}, {\"value\": -1.3040023009883155}, {\"value\": -1.1214756254151341}, {\"value\": 2.2073840458248903}, {\"value\": 1.4432718873507562}, {\"value\": -2.056393606400485}, {\"value\": 0.36393558896070033}, {\"value\": 0.4866897108570069}, {\"value\": -1.2626135644569398}, {\"value\": -0.028272958732849657}, {\"value\": -2.5387392865860003}, {\"value\": 0.4440313858560672}, {\"value\": -1.7737171905141766}, {\"value\": -0.007732872556844824}, {\"value\": -0.5710248407543714}, {\"value\": -0.7050634442596566}, {\"value\": -1.1413626924959095}, {\"value\": -0.1864518872688173}, {\"value\": -0.10047338412062382}, {\"value\": 1.0040397018699612}, {\"value\": -1.4583601794459566}, {\"value\": -0.5201489614612641}, {\"value\": 0.03325345621668568}, {\"value\": 0.043738121868411695}, {\"value\": 0.11339764991002281}, {\"value\": 2.12781653387632}, {\"value\": -0.6160293002465106}, {\"value\": -1.1825199279231469}, {\"value\": -1.1554255802373623}, {\"value\": -0.3521778163395675}, {\"value\": 1.4229883546996636}, {\"value\": -0.28067051732372045}, {\"value\": -0.9709608544019336}, {\"value\": -0.5666601574381022}, {\"value\": -1.1733412643749956}, {\"value\": 1.1093854533353105}, {\"value\": 0.26521079683932886}, {\"value\": -0.6503493974148101}, {\"value\": -0.015247991003481112}, {\"value\": -1.0586526900693438}, {\"value\": 1.1939915483706973}, {\"value\": -0.4533765609562572}, {\"value\": -1.336565534757596}, {\"value\": 0.8958005198273739}, {\"value\": -0.6443888214086708}, {\"value\": -0.3110401397200172}, {\"value\": 0.10606753522690147}, {\"value\": 0.8409035390258245}, {\"value\": -2.754318206964955}, {\"value\": -0.8032474646820181}, {\"value\": -0.8389205578520154}, {\"value\": -0.09751268571451}, {\"value\": -0.3243253314166742}, {\"value\": 0.06578818518640152}, {\"value\": -0.6689716590450258}, {\"value\": -0.30580724666004855}, {\"value\": 1.1478092782287743}, {\"value\": 1.1234613512146494}, {\"value\": 1.1894443448300023}, {\"value\": -0.9958002788224551}, {\"value\": -0.7801089081821141}, {\"value\": -0.2301307747745848}, {\"value\": -2.0038087266000275}, {\"value\": 0.04399326398047925}, {\"value\": -0.18347958312873036}, {\"value\": 0.7903632790940797}, {\"value\": -0.8558472637113546}, {\"value\": 1.5504009494345428}, {\"value\": -1.4437832160837463}, {\"value\": 0.14008635132654643}, {\"value\": 0.36556895278856544}, {\"value\": -0.060535258030852766}, {\"value\": 1.7614649883055156}, {\"value\": 0.01122351475727573}, {\"value\": -0.4491152074634461}, {\"value\": 2.3061821912151483}, {\"value\": -0.25832308114012725}, {\"value\": -1.1502496860474873}, {\"value\": 0.6810866826951453}, {\"value\": -1.0796948650892506}, {\"value\": -0.11325582599033715}, {\"value\": -1.34052420832858}, {\"value\": -0.7143100963983756}, {\"value\": 1.5904004227844102}, {\"value\": 0.8727657433052097}, {\"value\": -0.21057760988351093}, {\"value\": 0.23364077777874198}, {\"value\": 1.3983965606003206}, {\"value\": -0.22917243575981566}, {\"value\": -0.03227946495778957}, {\"value\": -0.551417392204741}, {\"value\": 1.2438102287796156}, {\"value\": 0.7196916218184767}, {\"value\": -0.4490811012126084}, {\"value\": -1.2659367151796768}, {\"value\": -0.3925967773211234}, {\"value\": 1.935121370508939}, {\"value\": -0.9938283057006121}, {\"value\": -0.7922032675923731}, {\"value\": -0.5725273251325057}, {\"value\": 0.08227754577233695}, {\"value\": 0.611310471732762}, {\"value\": -1.4432363352334163}, {\"value\": -1.433641823996613}, {\"value\": -0.051268993172715424}, {\"value\": 1.4768394010168115}, {\"value\": -0.19520427588678793}, {\"value\": 0.8224666326444589}, {\"value\": 0.9227404291451319}, {\"value\": 1.1708764065080495}, {\"value\": 0.8406936565921471}, {\"value\": 2.0172420168927228}, {\"value\": -1.2904220025240283}, {\"value\": -3.331151128998476}, {\"value\": 1.0537458004058997}, {\"value\": 0.6023040636775684}, {\"value\": 0.03719556671641171}, {\"value\": -0.12477758517004249}, {\"value\": -1.5901128662174366}, {\"value\": 0.5351848261723243}, {\"value\": 0.4034377512465327}, {\"value\": 0.1772029258428917}, {\"value\": 0.7619189386994393}, {\"value\": 0.1962349607063459}, {\"value\": -0.9104006865767553}, {\"value\": -0.006915151258034099}, {\"value\": 0.2839990249187212}, {\"value\": -0.00524266500111606}, {\"value\": -0.845131434778638}, {\"value\": -0.8877744319689117}, {\"value\": 0.42483234954235}, {\"value\": 0.8080541149220228}, {\"value\": -0.7051244603724489}, {\"value\": 0.22232513881281257}, {\"value\": 0.6706332049869462}, {\"value\": -1.165676563055702}, {\"value\": 1.1028415487781158}, {\"value\": -0.9065516687451963}, {\"value\": -0.1204305234095517}, {\"value\": 0.9992040666076628}, {\"value\": 0.01366447905764852}, {\"value\": -1.0074900229115706}, {\"value\": 0.8342050439288117}, {\"value\": -2.3451102129630668}, {\"value\": 0.47893822274799425}, {\"value\": 0.8262799356791865}, {\"value\": -0.7638019081193844}, {\"value\": -0.3280637325941659}, {\"value\": 0.6180498658075858}, {\"value\": 0.720597728779887}, {\"value\": -1.0772655794330375}, {\"value\": 1.1111624910985685}, {\"value\": -0.3634916044101064}, {\"value\": -0.24661111316716217}, {\"value\": 0.927995818328601}, {\"value\": 0.6625604910264171}, {\"value\": -0.27236699161055844}, {\"value\": 0.21806443500054756}, {\"value\": 0.82281449543768}, {\"value\": -1.7696341311529091}, {\"value\": 0.6145089010468312}, {\"value\": 1.0111029753273724}, {\"value\": 0.9367103782108473}, {\"value\": -0.05130393231498424}, {\"value\": 0.11902767968247385}, {\"value\": 0.5384157120044661}, {\"value\": -1.0442669058471534}, {\"value\": 1.8117385233126282}, {\"value\": -1.651784288602481}, {\"value\": 0.9378319193612281}, {\"value\": 1.5320350031820251}, {\"value\": -1.2423888359828623}, {\"value\": -1.0080416787591078}, {\"value\": -0.47698346800977015}, {\"value\": -1.3867611216661855}, {\"value\": -0.22283535245318373}, {\"value\": 1.6947825007365165}, {\"value\": -1.9013333091133802}, {\"value\": -0.33438714484252996}, {\"value\": 0.08103783100668399}, {\"value\": -1.4266786937492772}, {\"value\": -0.9996879794116644}, {\"value\": -0.6103980275758715}, {\"value\": 0.5065206037769037}, {\"value\": 1.145712070753851}, {\"value\": 0.39679610527049647}, {\"value\": 0.16421794819183017}, {\"value\": 0.298002854904738}, {\"value\": 1.0920894423365932}, {\"value\": -0.9138943804473633}, {\"value\": 0.7590120034735498}, {\"value\": 0.8701752527837958}, {\"value\": 0.4490397496589239}, {\"value\": -0.9518731595253288}, {\"value\": 1.0451266664448664}, {\"value\": -0.7950059288558979}, {\"value\": 0.10562520132075152}, {\"value\": 0.8407406162039356}, {\"value\": -0.5670859687986076}, {\"value\": 0.5055303925275155}, {\"value\": 0.22607990142688883}, {\"value\": 1.2631313160472903}, {\"value\": -1.1579071591842567}, {\"value\": -3.0138869963031243}, {\"value\": 0.713635027620431}, {\"value\": 0.6470920725438544}, {\"value\": -0.47950518989014057}, {\"value\": -1.5459632770401777}, {\"value\": -0.7747419887508182}, {\"value\": -0.8779233546790127}, {\"value\": -0.6033594125190584}, {\"value\": -0.3984978427999488}, {\"value\": -1.5258672462498875}, {\"value\": -0.3791962897133172}, {\"value\": -0.03824763193089548}, {\"value\": -2.2159672508016626}, {\"value\": -0.32789325053651375}, {\"value\": 0.08118989031211046}, {\"value\": -0.43006470638746963}, {\"value\": -0.8966814281693508}, {\"value\": 1.0821384820040383}, {\"value\": -0.15190605209044258}, {\"value\": 0.7001586523692253}, {\"value\": -0.12736218190713225}, {\"value\": 2.6181850830979827}, {\"value\": 0.19310804909271342}, {\"value\": 0.8998706649904961}, {\"value\": 0.06522388183968703}, {\"value\": -0.23833359007006866}, {\"value\": 0.6160079521920813}, {\"value\": 0.16787010377053407}, {\"value\": -0.3701575253462723}, {\"value\": 0.8714917544740947}, {\"value\": 0.7119205858570696}, {\"value\": 0.3445346015110361}, {\"value\": 0.4621189164782514}, {\"value\": 0.7726811934462227}, {\"value\": -0.2775808634696105}, {\"value\": 0.2504611083803708}, {\"value\": -0.12001093474862536}, {\"value\": 0.07901330495864227}, {\"value\": -0.2672205165395464}, {\"value\": -0.5523135793444763}, {\"value\": 0.4492009757084829}, {\"value\": -0.2663476848652512}, {\"value\": -1.152306184365059}, {\"value\": 0.6757252644483084}, {\"value\": 1.0581180060067386}, {\"value\": 0.5173182552883453}, {\"value\": -1.8192576361135855}, {\"value\": -1.1070346376431426}, {\"value\": 0.10437781569917652}, {\"value\": -0.7358303531648477}, {\"value\": -1.4266558758477406}, {\"value\": 0.44692740387714247}, {\"value\": -0.5145963074886085}, {\"value\": -0.7859754627195883}, {\"value\": -0.6099157429662959}, {\"value\": -1.0963032681483023}, {\"value\": -1.022199316630354}, {\"value\": -0.18170692852908527}, {\"value\": -2.814900286774695}, {\"value\": -2.3013250266192924}, {\"value\": 0.4278051847227105}, {\"value\": 0.6083604796584742}, {\"value\": 0.6636244291619898}, {\"value\": 0.4402585875547549}, {\"value\": 1.3739781714781294}, {\"value\": -1.5101699627702672}, {\"value\": 0.13571010785623533}, {\"value\": 1.4805966446831955}, {\"value\": -0.8280414756441444}, {\"value\": -0.7929353600363424}, {\"value\": 0.0446258079026683}, {\"value\": 1.4365536215286459}, {\"value\": -0.13668935091226045}, {\"value\": 1.3464923634181316}, {\"value\": 0.058341790269490434}, {\"value\": -0.22904009768779562}, {\"value\": 0.39345912188650745}, {\"value\": -1.2615899919739193}, {\"value\": 0.12366181754944224}, {\"value\": 1.40349382879312}, {\"value\": -1.348136418026694}, {\"value\": -1.497171474079022}, {\"value\": -0.3089214876154049}, {\"value\": 1.9819867270260734}, {\"value\": 0.5734055080728113}, {\"value\": -1.1328931282626862}, {\"value\": 0.6119332687121047}, {\"value\": 0.30512951664452687}, {\"value\": -1.216500260852128}, {\"value\": -0.6987311865207693}, {\"value\": 0.0963737384205606}, {\"value\": 1.2583085080386063}, {\"value\": 1.1100987180351616}, {\"value\": -0.36127575568174325}, {\"value\": 2.368895657654415}, {\"value\": -1.3841944395375236}, {\"value\": -0.6830731702678775}, {\"value\": -1.029403643586536}, {\"value\": 1.8471118598989167}, {\"value\": 0.7431634670581841}, {\"value\": -0.4361743999753545}, {\"value\": 0.30617001550613326}, {\"value\": 0.28682874462019853}, {\"value\": -0.024439796902022918}, {\"value\": -0.9200606325249999}, {\"value\": -0.39055356091627685}, {\"value\": 0.4218841055830678}, {\"value\": 0.9764424863960827}, {\"value\": -0.5621431728823237}, {\"value\": -1.2111246427209796}, {\"value\": 1.4009625897815188}, {\"value\": 0.7389237467833345}, {\"value\": -1.295488745478953}, {\"value\": 1.0818889077259584}, {\"value\": -0.2627125513697449}, {\"value\": -1.2265438833667601}, {\"value\": 1.251023697327437}, {\"value\": 0.351707937981508}, {\"value\": 0.6281844826723674}, {\"value\": -2.6034128146431765}, {\"value\": -0.26639158798519375}, {\"value\": 0.46126458305181006}, {\"value\": -1.3432320028321414}, {\"value\": -1.7379189454098807}, {\"value\": 0.14996009260750767}, {\"value\": 0.6785742203474278}, {\"value\": -0.13964937843325942}, {\"value\": -0.09059229988734935}, {\"value\": -0.3055994781413646}, {\"value\": 1.415115724421479}, {\"value\": -1.373576767514569}, {\"value\": -2.0811219021048335}, {\"value\": 0.7342432485115324}, {\"value\": -0.9207542303788167}, {\"value\": 0.9961232502552395}, {\"value\": -0.0316780888336973}, {\"value\": 0.838720177696719}, {\"value\": -1.0848494303433034}, {\"value\": 1.0201156609566917}, {\"value\": 1.029130798826171}, {\"value\": 0.28235766822546404}, {\"value\": -0.18325064665607263}, {\"value\": -0.4425993002125514}, {\"value\": 1.0297249801189778}, {\"value\": 0.293571414646201}, {\"value\": -1.059534591559744}, {\"value\": 0.20448415091634697}, {\"value\": 1.0513638771052873}, {\"value\": -0.6957614526387705}, {\"value\": -0.5102775891685154}, {\"value\": -0.3449583865065107}, {\"value\": -1.6768752741336566}, {\"value\": -0.9414082756108213}, {\"value\": 0.23113843703833}, {\"value\": -0.9064250816845508}, {\"value\": 0.21782795961059215}, {\"value\": -0.0892814505177118}, {\"value\": -0.9077567258059724}, {\"value\": -0.5540891218155297}, {\"value\": 0.19443848489876273}, {\"value\": -0.8502227016566664}, {\"value\": -0.11131690940964865}, {\"value\": 0.30544158064206867}, {\"value\": -0.6075194669097971}, {\"value\": 0.10089369528555468}, {\"value\": -0.10209777225487217}, {\"value\": -0.3896944710034984}, {\"value\": 0.33871357136457614}, {\"value\": 0.6145484535276542}, {\"value\": -1.1401216914634913}, {\"value\": -0.6269222424295556}, {\"value\": -0.3211614841448652}, {\"value\": -1.3822072828231797}, {\"value\": -1.0404973699189497}, {\"value\": -1.5654675152728326}, {\"value\": 0.037496205725574674}, {\"value\": -0.6796392533348427}, {\"value\": 1.4962557164908319}, {\"value\": -0.5169290898492892}, {\"value\": 1.4250759532676613}, {\"value\": 0.5853401636122544}, {\"value\": -0.5715163810453758}, {\"value\": 0.9645034663927068}, {\"value\": -0.5817847774561975}, {\"value\": 0.8758552504671578}, {\"value\": -0.8687340287941547}, {\"value\": -0.3465689734059994}, {\"value\": 1.2855645591479414}, {\"value\": -0.9546436291324735}, {\"value\": 0.4049939386347031}, {\"value\": 0.06834237993706686}, {\"value\": 1.0688476201870654}, {\"value\": -0.23244285574119533}, {\"value\": 1.1712468274179375}, {\"value\": 0.037902661839188}, {\"value\": -0.4385431755511562}, {\"value\": 1.5696950222514747}, {\"value\": 1.3501214545415905}, {\"value\": 1.698650325600747}, {\"value\": 0.37772531639339624}, {\"value\": 0.08138863933368358}, {\"value\": 0.161407186580278}, {\"value\": 0.05071742267875978}, {\"value\": -0.06826515950479417}, {\"value\": -1.3074319976826234}, {\"value\": -1.3694079334139015}, {\"value\": -1.5599122298717725}, {\"value\": 0.11641081827547364}, {\"value\": -1.0096431986989907}, {\"value\": 0.8044093098063752}, {\"value\": 0.558158360317528}, {\"value\": -0.7111762616573796}, {\"value\": 3.738906781473786}, {\"value\": -0.32211209399855995}, {\"value\": -0.899416333850308}, {\"value\": -1.1826184192725342}, {\"value\": 0.7454269131974116}, {\"value\": 0.48064973035643344}, {\"value\": -1.0396224791901505}, {\"value\": -0.7705071998372912}, {\"value\": 0.16017445379859285}, {\"value\": 0.05064446527527747}, {\"value\": -0.6387380758669609}, {\"value\": 1.2443349740505003}, {\"value\": -0.6564210617830204}, {\"value\": 0.7243838306129446}, {\"value\": 0.7126077401017727}, {\"value\": -0.20829672942502186}, {\"value\": -0.23407681676962527}, {\"value\": 0.07950285937420107}, {\"value\": 0.6842667689229385}, {\"value\": -0.7565946235841365}, {\"value\": 1.442665424363123}, {\"value\": -2.5487698608690947}, {\"value\": -0.5197802864559942}, {\"value\": -0.17162012453929762}, {\"value\": 0.7875069178475161}, {\"value\": -0.2389529806437115}, {\"value\": -0.5961871347116179}, {\"value\": 1.0158325410437279}, {\"value\": 1.6855244967865828}, {\"value\": 0.5645612248400629}, {\"value\": -2.533469754827506}, {\"value\": -0.31007465680397267}, {\"value\": 1.5331916595382769}, {\"value\": -0.13121854444326697}, {\"value\": -0.2165767059722807}, {\"value\": 0.9305215623697649}, {\"value\": -1.2558272902995344}, {\"value\": 1.4328051852693193}, {\"value\": 0.6810035374418654}, {\"value\": 0.18477341823436635}, {\"value\": 0.9969569727308745}, {\"value\": 0.3001610051391067}, {\"value\": 1.0792702709931945}, {\"value\": 0.8874834295625538}, {\"value\": -1.4546482688185}, {\"value\": -1.420569977137437}, {\"value\": 0.33166914369592776}, {\"value\": -0.40553870973011585}, {\"value\": -1.2517278610132176}, {\"value\": 0.7474498437143243}, {\"value\": -0.11437541947972893}, {\"value\": -0.6064950444102145}, {\"value\": 0.043187203225111034}, {\"value\": -0.8815064367169572}, {\"value\": -0.9598507280433697}, {\"value\": 1.2295284783834697}, {\"value\": -0.00874184671499934}, {\"value\": 0.2516883203414826}, {\"value\": 0.7304829471548903}, {\"value\": -1.5418062056090998}, {\"value\": 0.6436922688113594}, {\"value\": -0.476976973109253}, {\"value\": -0.16102214508199955}, {\"value\": 1.2552048301587995}, {\"value\": 1.2206876476952575}, {\"value\": 1.8853295130718872}, {\"value\": -0.7387516882923799}, {\"value\": 0.03240565953003493}, {\"value\": -0.7841575941615088}, {\"value\": 1.209327923805069}, {\"value\": -0.7359264585030778}, {\"value\": -0.8940013901485507}, {\"value\": -1.132617358033248}, {\"value\": -0.8839293452349086}, {\"value\": -1.772942549888351}, {\"value\": -1.1779192253176738}, {\"value\": 1.8762891276800442}, {\"value\": -1.3091714232812675}, {\"value\": -0.8078747028994836}, {\"value\": -1.3055814964485952}, {\"value\": -0.18595509258684387}, {\"value\": -0.7016616986549078}, {\"value\": -0.19932323536933355}, {\"value\": 1.0977371789579649}, {\"value\": -0.4760874490820301}, {\"value\": -0.8271475097337806}, {\"value\": 1.0513773763173826}, {\"value\": 1.4574747894835616}, {\"value\": 0.5712295089973818}, {\"value\": 0.0689042458234915}, {\"value\": -0.03269676101205381}, {\"value\": 1.122213587137022}, {\"value\": 0.043344690716563994}, {\"value\": 1.4988911095181627}, {\"value\": 0.8025410349661702}, {\"value\": 0.8271344584367631}, {\"value\": -0.857887748917254}, {\"value\": -0.14588684058142143}, {\"value\": -2.817240879314653}, {\"value\": 0.30536148515274425}, {\"value\": -0.7604688840518007}, {\"value\": 2.5643817596010092}, {\"value\": 0.7273248968074624}, {\"value\": 1.2784050509396225}, {\"value\": 0.10455272288937348}, {\"value\": 0.5704298505054607}, {\"value\": 0.09973873787144008}, {\"value\": -0.5491434564646226}, {\"value\": -1.4525077920374938}, {\"value\": 0.21235404836828703}, {\"value\": -1.847463028254289}, {\"value\": 1.4542681998577514}, {\"value\": -0.7485548271261961}, {\"value\": 0.666344680244684}, {\"value\": -0.29412105416307854}, {\"value\": -0.8171258135520849}, {\"value\": -1.2358397120199347}, {\"value\": -1.3930773640267098}, {\"value\": -1.3803395768744706}, {\"value\": -0.05377661613961861}, {\"value\": 0.19882152187423574}, {\"value\": -0.5422316459238835}, {\"value\": -0.37006774307369616}, {\"value\": -0.48348939674976216}, {\"value\": -1.1560163138116755}, {\"value\": -1.2267340551370718}, {\"value\": 0.9909464779432452}, {\"value\": -0.3958229632209738}, {\"value\": 0.9421734515120669}, {\"value\": 2.6554115182762477}, {\"value\": -0.5929272666751848}, {\"value\": 0.2027025483781664}, {\"value\": -1.1355102713062981}, {\"value\": 0.09840171563194507}, {\"value\": 2.5884327691050326}, {\"value\": 0.23166033976581368}, {\"value\": -0.17544330491115204}, {\"value\": -1.4230682199876965}, {\"value\": 0.8870215629502421}, {\"value\": -0.6364391557811987}, {\"value\": 0.7653687028802303}, {\"value\": 1.5115268126114725}, {\"value\": 0.5047463697032389}, {\"value\": 1.4354073378202075}, {\"value\": 0.4512007889140945}, {\"value\": 0.6089990428064068}, {\"value\": 0.9375310032824582}, {\"value\": -0.13793387769803997}, {\"value\": 0.1443834190467259}, {\"value\": 0.688166407790401}, {\"value\": 1.4737717076339136}, {\"value\": 0.3600373713317929}, {\"value\": 0.24253780492443583}, {\"value\": 2.556932739627906}, {\"value\": 1.5484154817979447}, {\"value\": 1.1320507536149453}, {\"value\": -1.305249355717048}, {\"value\": 0.45431150076401333}, {\"value\": 1.44500181412393}, {\"value\": -0.23633931783659184}, {\"value\": -0.48485311892747707}, {\"value\": 1.0350333016686604}, {\"value\": 0.4212415372299951}, {\"value\": 0.05527774337485348}, {\"value\": -0.5702279584356307}, {\"value\": 0.8893128036911274}, {\"value\": -0.9764128468310835}, {\"value\": 1.1382600193949888}, {\"value\": -1.049365685411082}, {\"value\": -0.6888574109847042}, {\"value\": -1.7897083147634731}, {\"value\": 0.020166437415965074}, {\"value\": 1.0834185535478}, {\"value\": -1.1050714912000126}, {\"value\": 0.6710034466526683}, {\"value\": 0.9125034000839535}, {\"value\": 1.4385485548689476}, {\"value\": -1.2681009855593277}, {\"value\": -0.11250606191858673}, {\"value\": 0.5802413583654962}, {\"value\": 0.4717442154216012}, {\"value\": -0.21204619355436502}, {\"value\": 1.6580551227417604}, {\"value\": 0.7889463701992445}, {\"value\": -1.8610446986060336}, {\"value\": 1.0544531988625245}, {\"value\": 1.5774111516557037}, {\"value\": -0.45053148712479635}, {\"value\": 1.9880489636817034}, {\"value\": 1.712602761274259}, {\"value\": -0.6543340328096318}, {\"value\": -0.36593804809443076}, {\"value\": 0.32317239345285187}, {\"value\": -0.8783431365184357}, {\"value\": 0.17278843655578938}, {\"value\": -0.16097466210109257}, {\"value\": -0.4051973436307886}, {\"value\": -0.6716629556829736}, {\"value\": 1.6613161013510638}, {\"value\": -2.6963638907274152}, {\"value\": 1.7480510381574241}, {\"value\": 0.6427808613601977}, {\"value\": -1.282343682902659}, {\"value\": -0.7620514074332357}, {\"value\": -0.37152125304458367}, {\"value\": 1.0535101113351504}, {\"value\": 0.549267892916663}, {\"value\": -1.621805168128744}, {\"value\": -0.7429886572055459}, {\"value\": -0.5437541962080655}, {\"value\": 0.21772588810714272}, {\"value\": -0.5736630434737672}, {\"value\": 1.3017563736876798}, {\"value\": -0.5327376207275315}, {\"value\": 1.66055944737414}, {\"value\": -1.2285191120615189}, {\"value\": -0.20303566049502855}, {\"value\": 1.830680014524758}, {\"value\": 0.4148839256574744}, {\"value\": -1.3220540343138045}, {\"value\": 1.8439246053423501}, {\"value\": 0.9003930527542165}, {\"value\": 0.4700900160833396}, {\"value\": 0.5906940848817279}, {\"value\": 1.3613450248357797}, {\"value\": -1.5979980676305983}, {\"value\": -1.6592435608511618}, {\"value\": -2.079044936734629}, {\"value\": -0.3896860069659358}, {\"value\": 0.017095301828071296}, {\"value\": -0.09192687006563523}, {\"value\": 1.3531609549341468}, {\"value\": 0.996550817582896}, {\"value\": 2.2820360232159405}, {\"value\": -2.6073277976808966}, {\"value\": 0.7126865715753656}, {\"value\": 0.1427842703081454}, {\"value\": 0.10889630819674531}, {\"value\": -0.15331167657104144}, {\"value\": 0.4290821456728535}, {\"value\": 2.085218419877685}, {\"value\": 1.5838886280286522}, {\"value\": -0.4698259589246302}, {\"value\": 1.0722455369908395}, {\"value\": -0.08161563009537047}, {\"value\": -0.9460669040825248}, {\"value\": -1.2120509523305294}, {\"value\": -1.6700128695341538}, {\"value\": 4.085332769870605}, {\"value\": -1.8374446291429756}, {\"value\": -1.4460411112407419}, {\"value\": 0.3827786305941648}, {\"value\": 0.21168479235997528}, {\"value\": 1.0774617677571943}, {\"value\": 1.1405054674053778}, {\"value\": -0.5118740291049605}, {\"value\": 0.9935325747577449}, {\"value\": 3.520458865236225}, {\"value\": 1.5289424597811254}, {\"value\": -0.26310074899997793}, {\"value\": -0.6963987827183159}, {\"value\": -1.928835579847836}, {\"value\": 0.4410617648466372}, {\"value\": -0.3314485530940039}, {\"value\": 0.6734858284161072}, {\"value\": -0.41687292592317043}, {\"value\": -0.6673093272722872}, {\"value\": -0.6547524533466854}, {\"value\": 0.12540168381255926}, {\"value\": 0.24184106176204098}, {\"value\": 1.1220851105262997}, {\"value\": 0.2641047771932668}, {\"value\": -0.6690764042113179}, {\"value\": 1.14790324324683}, {\"value\": -2.126394161775986}, {\"value\": -0.8472133890653456}, {\"value\": -0.2801522226501878}, {\"value\": -0.2427780339701944}, {\"value\": -1.9382555116321931}, {\"value\": -0.35275938420424474}, {\"value\": -1.341796824630083}, {\"value\": 0.9835358528231657}, {\"value\": -0.17376133614433362}, {\"value\": 0.7134687976299602}, {\"value\": -0.6078355317864725}, {\"value\": -1.5034543070010662}, {\"value\": -0.15289214943216478}, {\"value\": -2.055656789356304}, {\"value\": -0.3277149085794451}, {\"value\": -2.175123057298652}, {\"value\": -1.623849936343368}, {\"value\": 0.4717339193711745}, {\"value\": 3.284947964326783}, {\"value\": -1.0195012254916131}, {\"value\": -1.4994477124343932}, {\"value\": 1.0755087715407046}, {\"value\": 1.3824435166109252}, {\"value\": -2.587926392465058}, {\"value\": 0.9002223846486768}, {\"value\": -0.5114924773207175}, {\"value\": -0.5010679803438502}, {\"value\": -1.297774259850416}, {\"value\": 0.5666668349365617}, {\"value\": 0.7535977854179645}, {\"value\": -0.015963652843247855}, {\"value\": -0.36674097041092946}, {\"value\": -0.4279825743500574}, {\"value\": -1.645317797140949}, {\"value\": -0.29700491753322567}, {\"value\": -1.0183260617748513}, {\"value\": 1.5411318966993601}, {\"value\": -0.08387626514430746}, {\"value\": 1.6645251727250716}, {\"value\": 0.3872824316340731}, {\"value\": 1.209754347641889}, {\"value\": 0.8102475664858421}, {\"value\": 0.08790940487877308}, {\"value\": 0.8139700635376919}, {\"value\": 0.7906627096032425}, {\"value\": 0.3424641506157061}, {\"value\": 1.0116623292628546}, {\"value\": 0.6409036085615206}, {\"value\": -0.1928762695423044}, {\"value\": -1.8478457591735689}, {\"value\": -0.06395369129706902}, {\"value\": 0.4486011560089379}, {\"value\": 0.09831254039468204}, {\"value\": -0.6253102078843965}, {\"value\": -1.1656417111403536}, {\"value\": -0.4490324168852966}, {\"value\": -0.990140436494939}, {\"value\": -0.649682782754756}, {\"value\": 2.5160234623514808}, {\"value\": 0.7118972012030178}, {\"value\": -0.8087004077600946}, {\"value\": -0.7985771470141156}, {\"value\": -0.03898274258692841}, {\"value\": 0.08717056629424347}, {\"value\": -0.12396550433502282}, {\"value\": 1.3778916231702003}, {\"value\": 0.1118074492922549}, {\"value\": 0.16366835087688908}, {\"value\": 0.4042074807902026}, {\"value\": 0.6574562161352315}, {\"value\": -1.777672152276369}, {\"value\": -1.6668576047503385}, {\"value\": -0.7469805699033507}, {\"value\": -1.0426428718242962}, {\"value\": 0.6985616452644812}, {\"value\": -2.743326578810925}, {\"value\": -1.2028019909197916}, {\"value\": -0.6900059780452346}, {\"value\": -0.685874333711047}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Line Plot\n\n**Matplotlib:**\n\n::: {#7ad01e01 .cell execution_count=10}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nplt.figure(figsize=(10, 6))\nplt.plot(x, y1, label='Sine')\nplt.plot(x, y2, label='Cosine')\nplt.title('Matplotlib Line Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#d922e13c .cell execution_count=11}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nx = np.linspace(0, 10, 100)\ndata = pd.DataFrame({\n    'x': np.concatenate([x, x]),\n    'y': np.concatenate([np.sin(x), np.cos(x)]),\n    'function': ['Sine']*100 + ['Cosine']*100\n})\n\nsns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=data, x='x', y='y', hue='function')\nplt.title('Seaborn Line Plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){}\n:::\n:::\n\n\n**Altair:**\n\n::: {#1f2a317a .cell execution_count=12}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ndata = pd.DataFrame({\n    'x': np.concatenate([x, x]),\n    'y': np.concatenate([np.sin(x), np.cos(x)]),\n    'function': ['Sine']*100 + ['Cosine']*100\n})\n\nalt.Chart(data).mark_line().encode(\n    x='x',\n    y='y',\n    color='function'\n).properties(\n    width=600,\n    height=400,\n    title='Altair Line Plot'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n\n<style>\n  #altair-viz-6c5252ee07084b1ba1476a1410f0bfa3.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-6c5252ee07084b1ba1476a1410f0bfa3.vega-embed details,\n  #altair-viz-6c5252ee07084b1ba1476a1410f0bfa3.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-6c5252ee07084b1ba1476a1410f0bfa3\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-6c5252ee07084b1ba1476a1410f0bfa3\") {\n      outputDiv = document.getElementById(\"altair-viz-6c5252ee07084b1ba1476a1410f0bfa3\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-315314b1d744b307a4c6f023712ccc9d\"}, \"mark\": {\"type\": \"line\"}, \"encoding\": {\"color\": {\"field\": \"function\", \"type\": \"nominal\"}, \"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Line Plot\", \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-315314b1d744b307a4c6f023712ccc9d\": [{\"x\": 0.0, \"y\": 0.0, \"function\": \"Sine\"}, {\"x\": 0.10101010101010101, \"y\": 0.1008384202581046, \"function\": \"Sine\"}, {\"x\": 0.20202020202020202, \"y\": 0.2006488565226854, \"function\": \"Sine\"}, {\"x\": 0.30303030303030304, \"y\": 0.2984138044476411, \"function\": \"Sine\"}, {\"x\": 0.40404040404040403, \"y\": 0.3931366121483298, \"function\": \"Sine\"}, {\"x\": 0.5050505050505051, \"y\": 0.48385164043793466, \"function\": \"Sine\"}, {\"x\": 0.6060606060606061, \"y\": 0.5696341069089657, \"function\": \"Sine\"}, {\"x\": 0.7070707070707071, \"y\": 0.6496095135057065, \"function\": \"Sine\"}, {\"x\": 0.8080808080808081, \"y\": 0.7229625614794605, \"function\": \"Sine\"}, {\"x\": 0.9090909090909091, \"y\": 0.7889454628442574, \"function\": \"Sine\"}, {\"x\": 1.0101010101010102, \"y\": 0.8468855636029834, \"function\": \"Sine\"}, {\"x\": 1.1111111111111112, \"y\": 0.8961922010299563, \"function\": \"Sine\"}, {\"x\": 1.2121212121212122, \"y\": 0.9363627251042848, \"function\": \"Sine\"}, {\"x\": 1.3131313131313131, \"y\": 0.9669876227092996, \"function\": \"Sine\"}, {\"x\": 1.4141414141414141, \"y\": 0.9877546923600838, \"function\": \"Sine\"}, {\"x\": 1.5151515151515151, \"y\": 0.9984522269003895, \"function\": \"Sine\"}, {\"x\": 1.6161616161616161, \"y\": 0.9989711717233568, \"function\": \"Sine\"}, {\"x\": 1.7171717171717171, \"y\": 0.9893062365143401, \"function\": \"Sine\"}, {\"x\": 1.8181818181818181, \"y\": 0.9695559491823237, \"function\": \"Sine\"}, {\"x\": 1.9191919191919191, \"y\": 0.9399216514301312, \"function\": \"Sine\"}, {\"x\": 2.0202020202020203, \"y\": 0.9007054462029555, \"function\": \"Sine\"}, {\"x\": 2.121212121212121, \"y\": 0.8523071179396752, \"function\": \"Sine\"}, {\"x\": 2.2222222222222223, \"y\": 0.7952200570230491, \"function\": \"Sine\"}, {\"x\": 2.323232323232323, \"y\": 0.7300262299764464, \"function\": \"Sine\"}, {\"x\": 2.4242424242424243, \"y\": 0.6573902466827755, \"function\": \"Sine\"}, {\"x\": 2.525252525252525, \"y\": 0.5780525851065732, \"function\": \"Sine\"}, {\"x\": 2.6262626262626263, \"y\": 0.4928220425889235, \"function\": \"Sine\"}, {\"x\": 2.727272727272727, \"y\": 0.40256749066949654, \"function\": \"Sine\"}, {\"x\": 2.8282828282828283, \"y\": 0.30820901749007684, \"function\": \"Sine\"}, {\"x\": 2.929292929292929, \"y\": 0.2107085480771929, \"function\": \"Sine\"}, {\"x\": 3.0303030303030303, \"y\": 0.11106003812412972, \"function\": \"Sine\"}, {\"x\": 3.131313131313131, \"y\": 0.010279341240534697, \"function\": \"Sine\"}, {\"x\": 3.2323232323232323, \"y\": -0.09060614703340773, \"function\": \"Sine\"}, {\"x\": 3.3333333333333335, \"y\": -0.19056796287548539, \"function\": \"Sine\"}, {\"x\": 3.4343434343434343, \"y\": -0.28858705872043244, \"function\": \"Sine\"}, {\"x\": 3.5353535353535355, \"y\": -0.38366419180611233, \"function\": \"Sine\"}, {\"x\": 3.6363636363636362, \"y\": -0.47483011082223947, \"function\": \"Sine\"}, {\"x\": 3.7373737373737375, \"y\": -0.5611554368152017, \"function\": \"Sine\"}, {\"x\": 3.8383838383838382, \"y\": -0.6417601376193878, \"function\": \"Sine\"}, {\"x\": 3.9393939393939394, \"y\": -0.7158224992291902, \"function\": \"Sine\"}, {\"x\": 4.040404040404041, \"y\": -0.7825875026542022, \"function\": \"Sine\"}, {\"x\": 4.141414141414141, \"y\": -0.8413745208608701, \"function\": \"Sine\"}, {\"x\": 4.242424242424242, \"y\": -0.8915842573351402, \"function\": \"Sine\"}, {\"x\": 4.343434343434343, \"y\": -0.9327048555318336, \"function\": \"Sine\"}, {\"x\": 4.444444444444445, \"y\": -0.9643171169287782, \"function\": \"Sine\"}, {\"x\": 4.545454545454545, \"y\": -0.9860987744909296, \"function\": \"Sine\"}, {\"x\": 4.646464646464646, \"y\": -0.9978277779792126, \"function\": \"Sine\"}, {\"x\": 4.747474747474747, \"y\": -0.9993845576124357, \"function\": \"Sine\"}, {\"x\": 4.848484848484849, \"y\": -0.9907532430056771, \"function\": \"Sine\"}, {\"x\": 4.94949494949495, \"y\": -0.9720218249588334, \"function\": \"Sine\"}, {\"x\": 5.05050505050505, \"y\": -0.9433812584459996, \"function\": \"Sine\"}, {\"x\": 5.151515151515151, \"y\": -0.9051235159501367, \"function\": \"Sine\"}, {\"x\": 5.252525252525253, \"y\": -0.8576386109880517, \"function\": \"Sine\"}, {\"x\": 5.353535353535354, \"y\": -0.8014106221689696, \"function\": \"Sine\"}, {\"x\": 5.454545454545454, \"y\": -0.7370127583189133, \"function\": \"Sine\"}, {\"x\": 5.555555555555555, \"y\": -0.6651015149788224, \"function\": \"Sine\"}, {\"x\": 5.656565656565657, \"y\": -0.5864099818472351, \"function\": \"Sine\"}, {\"x\": 5.757575757575758, \"y\": -0.5017403693939113, \"function\": \"Sine\"}, {\"x\": 5.858585858585858, \"y\": -0.4119558308308628, \"function\": \"Sine\"}, {\"x\": 5.959595959595959, \"y\": -0.31797166281061867, \"function\": \"Sine\"}, {\"x\": 6.0606060606060606, \"y\": -0.22074597455506334, \"function\": \"Sine\"}, {\"x\": 6.161616161616162, \"y\": -0.12126992053716677, \"function\": \"Sine\"}, {\"x\": 6.262626262626262, \"y\": -0.020557596287260064, \"function\": \"Sine\"}, {\"x\": 6.363636363636363, \"y\": 0.08036429967028173, \"function\": \"Sine\"}, {\"x\": 6.4646464646464645, \"y\": 0.18046693235991093, \"function\": \"Sine\"}, {\"x\": 6.565656565656566, \"y\": 0.27872981867755725, \"function\": \"Sine\"}, {\"x\": 6.666666666666667, \"y\": 0.37415123057121996, \"function\": \"Sine\"}, {\"x\": 6.767676767676767, \"y\": 0.4657584070256517, \"function\": \"Sine\"}, {\"x\": 6.8686868686868685, \"y\": 0.5526174707464059, \"function\": \"Sine\"}, {\"x\": 6.96969696969697, \"y\": 0.6338429484489058, \"function\": \"Sine\"}, {\"x\": 7.070707070707071, \"y\": 0.7086067976992182, \"function\": \"Sine\"}, {\"x\": 7.171717171717171, \"y\": 0.7761468482835805, \"function\": \"Sine\"}, {\"x\": 7.2727272727272725, \"y\": 0.8357745720522589, \"function\": \"Sine\"}, {\"x\": 7.373737373737374, \"y\": 0.8868821020290788, \"function\": \"Sine\"}, {\"x\": 7.474747474747475, \"y\": 0.9289484292312513, \"function\": \"Sine\"}, {\"x\": 7.575757575757575, \"y\": 0.9615447140268235, \"function\": \"Sine\"}, {\"x\": 7.6767676767676765, \"y\": 0.9843386578838236, \"function\": \"Sine\"}, {\"x\": 7.777777777777778, \"y\": 0.9970978909438748, \"function\": \"Sine\"}, {\"x\": 7.878787878787879, \"y\": 0.9996923408861117, \"function\": \"Sine\"}, {\"x\": 7.979797979797979, \"y\": 0.9920955589323228, \"function\": \"Sine\"}, {\"x\": 8.080808080808081, \"y\": 0.9743849894755358, \"function\": \"Sine\"}, {\"x\": 8.181818181818182, \"y\": 0.9467411805833543, \"function\": \"Sine\"}, {\"x\": 8.282828282828282, \"y\": 0.9094459434244625, \"function\": \"Sine\"}, {\"x\": 8.383838383838384, \"y\": 0.8628794793817834, \"function\": \"Sine\"}, {\"x\": 8.484848484848484, \"y\": 0.8075165041395626, \"function\": \"Sine\"}, {\"x\": 8.585858585858587, \"y\": 0.7439214082568444, \"function\": \"Sine\"}, {\"x\": 8.686868686868687, \"y\": 0.6727425035622647, \"function\": \"Sine\"}, {\"x\": 8.787878787878787, \"y\": 0.5947054140244975, \"function\": \"Sine\"}, {\"x\": 8.88888888888889, \"y\": 0.510605678474283, \"function\": \"Sine\"}, {\"x\": 8.98989898989899, \"y\": 0.4213006405886069, \"function\": \"Sine\"}, {\"x\": 9.09090909090909, \"y\": 0.32770070881349983, \"function\": \"Sine\"}, {\"x\": 9.191919191919192, \"y\": 0.23076007532505177, \"function\": \"Sine\"}, {\"x\": 9.292929292929292, \"y\": 0.13146698864295842, \"function\": \"Sine\"}, {\"x\": 9.393939393939394, \"y\": 0.03083367906114098, \"function\": \"Sine\"}, {\"x\": 9.494949494949495, \"y\": -0.07011396040064677, \"function\": \"Sine\"}, {\"x\": 9.595959595959595, \"y\": -0.1703468323280965, \"function\": \"Sine\"}, {\"x\": 9.696969696969697, \"y\": -0.26884312591038406, \"function\": \"Sine\"}, {\"x\": 9.797979797979798, \"y\": -0.3645987336558887, \"function\": \"Sine\"}, {\"x\": 9.8989898989899, \"y\": -0.45663748763377376, \"function\": \"Sine\"}, {\"x\": 10.0, \"y\": -0.5440211108893698, \"function\": \"Sine\"}, {\"x\": 0.0, \"y\": 1.0, \"function\": \"Cosine\"}, {\"x\": 0.10101010101010101, \"y\": 0.9949028158568303, \"function\": \"Cosine\"}, {\"x\": 0.20202020202020202, \"y\": 0.9796632259996998, \"function\": \"Cosine\"}, {\"x\": 0.30303030303030304, \"y\": 0.9544365884201449, \"function\": \"Cosine\"}, {\"x\": 0.40404040404040403, \"y\": 0.9194800727522776, \"function\": \"Cosine\"}, {\"x\": 0.5050505050505051, \"y\": 0.8751500385908233, \"function\": \"Cosine\"}, {\"x\": 0.6060606060606061, \"y\": 0.82189840263017, \"function\": \"Cosine\"}, {\"x\": 0.7070707070707071, \"y\": 0.7602680316591506, \"function\": \"Cosine\"}, {\"x\": 0.8080808080808081, \"y\": 0.6908872083770674, \"function\": \"Cosine\"}, {\"x\": 0.9090909090909091, \"y\": 0.6144632264484674, \"function\": \"Cosine\"}, {\"x\": 1.0101010101010102, \"y\": 0.5317751800910392, \"function\": \"Cosine\"}, {\"x\": 1.1111111111111112, \"y\": 0.4436660217022285, \"function\": \"Cosine\"}, {\"x\": 1.2121212121212122, \"y\": 0.3510339684920502, \"function\": \"Cosine\"}, {\"x\": 1.3131313131313131, \"y\": 0.25482334572604864, \"function\": \"Cosine\"}, {\"x\": 1.4141414141414141, \"y\": 0.15601495992575853, \"function\": \"Cosine\"}, {\"x\": 1.5151515151515151, \"y\": 0.05561610016580674, \"function\": \"Cosine\"}, {\"x\": 1.6161616161616161, \"y\": -0.04534973060188524, \"function\": \"Cosine\"}, {\"x\": 1.7171717171717171, \"y\": -0.1458532495141353, \"function\": \"Cosine\"}, {\"x\": 1.8181818181818181, \"y\": -0.24486988668507892, \"function\": \"Cosine\"}, {\"x\": 1.9191919191919191, \"y\": -0.3413902300489206, \"function\": \"Cosine\"}, {\"x\": 2.0202020202020203, \"y\": -0.43443031567828566, \"function\": \"Cosine\"}, {\"x\": 2.121212121212121, \"y\": -0.5230416586748752, \"function\": \"Cosine\"}, {\"x\": 2.2222222222222223, \"y\": -0.6063209223738354, \"function\": \"Cosine\"}, {\"x\": 2.323232323232323, \"y\": -0.6834191272904034, \"function\": \"Cosine\"}, {\"x\": 2.4242424242424243, \"y\": -0.7535503059294446, \"function\": \"Cosine\"}, {\"x\": 2.525252525252525, \"y\": -0.815999515227557, \"function\": \"Cosine\"}, {\"x\": 2.6262626262626263, \"y\": -0.8701301249459654, \"function\": \"Cosine\"}, {\"x\": 2.727272727272727, \"y\": -0.9153903077136358, \"function\": \"Cosine\"}, {\"x\": 2.8282828282828283, \"y\": -0.9513186645587279, \"function\": \"Cosine\"}, {\"x\": 2.929292929292929, \"y\": -0.9775489285796396, \"function\": \"Cosine\"}, {\"x\": 3.0303030303030303, \"y\": -0.993813698804694, \"function\": \"Cosine\"}, {\"x\": 3.131313131313131, \"y\": -0.9999471661761239, \"function\": \"Cosine\"}, {\"x\": 3.2323232323232323, \"y\": -0.9958868038686729, \"function\": \"Cosine\"}, {\"x\": 3.3333333333333335, \"y\": -0.981674004711079, \"function\": \"Cosine\"}, {\"x\": 3.4343434343434343, \"y\": -0.9574536592123348, \"function\": \"Cosine\"}, {\"x\": 3.5353535353535355, \"y\": -0.9234726784944765, \"function\": \"Cosine\"}, {\"x\": 3.6363636363636362, \"y\": -0.8800774771896732, \"function\": \"Cosine\"}, {\"x\": 3.7373737373737375, \"y\": -0.8277104419618857, \"function\": \"Cosine\"}, {\"x\": 3.8383838383838382, \"y\": -0.7669054216542901, \"function\": \"Cosine\"}, {\"x\": 3.9393939393939394, \"y\": -0.69828228503756, \"function\": \"Cosine\"}, {\"x\": 4.040404040404041, \"y\": -0.6225406016393301, \"function\": \"Cosine\"}, {\"x\": 4.141414141414141, \"y\": -0.5404525100747903, \"function\": \"Cosine\"}, {\"x\": 4.242424242424242, \"y\": -0.45285484658127084, \"function\": \"Cosine\"}, {\"x\": 4.343434343434343, \"y\": -0.3606406140014481, \"function\": \"Cosine\"}, {\"x\": 4.444444444444445, \"y\": -0.2647498781834829, \"function\": \"Cosine\"}, {\"x\": 4.545454545454545, \"y\": -0.16616018460355267, \"function\": \"Cosine\"}, {\"x\": 4.646464646464646, \"y\": -0.06587659290724678, \"function\": \"Cosine\"}, {\"x\": 4.747474747474747, \"y\": 0.03507856903860484, \"function\": \"Cosine\"}, {\"x\": 4.848484848484849, \"y\": 0.13567612713271912, \"function\": \"Cosine\"}, {\"x\": 4.94949494949495, \"y\": 0.23489055281917826, \"function\": \"Cosine\"}, {\"x\": 5.05050505050505, \"y\": 0.33171041770321597, \"function\": \"Cosine\"}, {\"x\": 5.151515151515151, \"y\": 0.42514870442477243, \"function\": \"Cosine\"}, {\"x\": 5.252525252525253, \"y\": 0.5142528686769626, \"function\": \"Cosine\"}, {\"x\": 5.353535353535354, \"y\": 0.5981145497935533, \"function\": \"Cosine\"}, {\"x\": 5.454545454545454, \"y\": 0.6758788309121296, \"function\": \"Cosine\"}, {\"x\": 5.555555555555555, \"y\": 0.7467529543114478, \"function\": \"Cosine\"}, {\"x\": 5.656565656565657, \"y\": 0.810014403075603, \"function\": \"Cosine\"}, {\"x\": 5.757575757575758, \"y\": 0.865018266697566, \"function\": \"Cosine\"}, {\"x\": 5.858585858585858, \"y\": 0.9112038155344026, \"function\": \"Cosine\"}, {\"x\": 5.959595959595959, \"y\": 0.9481002170917641, \"function\": \"Cosine\"}, {\"x\": 6.0606060606060606, \"y\": 0.9753313358637337, \"function\": \"Cosine\"}, {\"x\": 6.161616161616162, \"y\": 0.9926195677967009, \"function\": \"Cosine\"}, {\"x\": 6.262626262626262, \"y\": 0.9997886702873213, \"function\": \"Cosine\"}, {\"x\": 6.363636363636363, \"y\": 0.9967655588645231, \"function\": \"Cosine\"}, {\"x\": 6.4646464646464645, \"y\": 0.983581052239521, \"function\": \"Cosine\"}, {\"x\": 6.565656565656566, \"y\": 0.9603695581285238, \"function\": \"Cosine\"}, {\"x\": 6.666666666666667, \"y\": 0.9273677030509753, \"function\": \"Cosine\"}, {\"x\": 6.767676767676767, \"y\": 0.8849119200716687, \"function\": \"Cosine\"}, {\"x\": 6.8686868686868685, \"y\": 0.8334350190781794, \"function\": \"Cosine\"}, {\"x\": 6.96969696969697, \"y\": 0.7734617745574747, \"function\": \"Cosine\"}, {\"x\": 7.070707070707071, \"y\": 0.7056035758515253, \"function\": \"Cosine\"}, {\"x\": 7.171717171717171, \"y\": 0.6305521944291881, \"function\": \"Cosine\"}, {\"x\": 7.2727272727272725, \"y\": 0.5490727317130796, \"function\": \"Cosine\"}, {\"x\": 7.373737373737374, \"y\": 0.4619958193539013, \"function\": \"Cosine\"}, {\"x\": 7.474747474747475, \"y\": 0.3702091514654802, \"function\": \"Cosine\"}, {\"x\": 7.575757575757575, \"y\": 0.2746484351440477, \"function\": \"Cosine\"}, {\"x\": 7.6767676767676765, \"y\": 0.17628785152548898, \"function\": \"Cosine\"}, {\"x\": 7.777777777777778, \"y\": 0.07613012462407193, \"function\": \"Cosine\"}, {\"x\": 7.878787878787879, \"y\": -0.02480370080544784, \"function\": \"Cosine\"}, {\"x\": 7.979797979797979, \"y\": -0.12548466817409182, \"function\": \"Cosine\"}, {\"x\": 8.080808080808081, \"y\": -0.22488639862108173, \"function\": \"Cosine\"}, {\"x\": 8.181818181818182, \"y\": -0.3219955542979381, \"function\": \"Cosine\"}, {\"x\": 8.282828282828282, \"y\": -0.41582216870771727, \"function\": \"Cosine\"}, {\"x\": 8.383838383838384, \"y\": -0.5054097387880672, \"function\": \"Cosine\"}, {\"x\": 8.484848484848484, \"y\": -0.5898449758557073, \"function\": \"Cosine\"}, {\"x\": 8.585858585858587, \"y\": -0.6682671160076288, \"function\": \"Cosine\"}, {\"x\": 8.686868686868687, \"y\": -0.7398766950653171, \"function\": \"Cosine\"}, {\"x\": 8.787878787878787, \"y\": -0.80394369860703, \"function\": \"Cosine\"}, {\"x\": 8.88888888888889, \"y\": -0.859815004003662, \"function\": \"Cosine\"}, {\"x\": 8.98989898989899, \"y\": -0.9069210385913591, \"function\": \"Cosine\"}, {\"x\": 9.09090909090909, \"y\": -0.9447815861050266, \"function\": \"Cosine\"}, {\"x\": 9.191919191919192, \"y\": -0.973010682179788, \"function\": \"Cosine\"}, {\"x\": 9.292929292929292, \"y\": -0.9913205490138658, \"function\": \"Cosine\"}, {\"x\": 9.393939393939394, \"y\": -0.9995245290814802, \"function\": \"Cosine\"}, {\"x\": 9.494949494949495, \"y\": -0.9975389879884077, \"function\": \"Cosine\"}, {\"x\": 9.595959595959595, \"y\": -0.9853841670717991, \"function\": \"Cosine\"}, {\"x\": 9.696969696969697, \"y\": -0.9631839770525324, \"function\": \"Cosine\"}, {\"x\": 9.797979797979798, \"y\": -0.9311647348436916, \"function\": \"Cosine\"}, {\"x\": 9.8989898989899, \"y\": -0.8896528563926016, \"function\": \"Cosine\"}, {\"x\": 10.0, \"y\": -0.8390715290764524, \"function\": \"Cosine\"}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Heatmap\n\n**Matplotlib:**\n\n::: {#6a0d7a75 .cell execution_count=13}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.rand(10, 12)\n\nplt.figure(figsize=(10, 8))\nplt.imshow(data, cmap='viridis')\nplt.colorbar(label='Value')\nplt.title('Matplotlib Heatmap')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#102c0d37 .cell execution_count=14}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.rand(10, 12)\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(data, annot=True, cmap='viridis', fmt='.2f')\nplt.title('Seaborn Heatmap')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-1.png){}\n:::\n:::\n\n\n**Altair:**\n\n::: {#097e283e .cell execution_count=15}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data\ndata = np.random.rand(10, 12)\ndf = pd.DataFrame(data)\n\n# Reshape for Altair\ndf_long = df.reset_index().melt(id_vars='index')\ndf_long.columns = ['y', 'x', 'value']\n\nalt.Chart(df_long).mark_rect().encode(\n    x='x:O',\n    y='y:O',\n    color='value:Q'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Heatmap'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n\n<style>\n  #altair-viz-84ea4438965b48c4894fc7af84066b6a.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-84ea4438965b48c4894fc7af84066b6a.vega-embed details,\n  #altair-viz-84ea4438965b48c4894fc7af84066b6a.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-84ea4438965b48c4894fc7af84066b6a\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-84ea4438965b48c4894fc7af84066b6a\") {\n      outputDiv = document.getElementById(\"altair-viz-84ea4438965b48c4894fc7af84066b6a\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-bd32ce3535daeb73d8ca2ca07b91bfe4\"}, \"mark\": {\"type\": \"rect\"}, \"encoding\": {\"color\": {\"field\": \"value\", \"type\": \"quantitative\"}, \"x\": {\"field\": \"x\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"y\", \"type\": \"ordinal\"}}, \"height\": 400, \"title\": \"Altair Heatmap\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-bd32ce3535daeb73d8ca2ca07b91bfe4\": [{\"y\": 0, \"x\": 0, \"value\": 0.41110522874438904}, {\"y\": 1, \"x\": 0, \"value\": 0.36226809508857805}, {\"y\": 2, \"x\": 0, \"value\": 0.03856623691681249}, {\"y\": 3, \"x\": 0, \"value\": 0.9319517826245836}, {\"y\": 4, \"x\": 0, \"value\": 0.6576829290443645}, {\"y\": 5, \"x\": 0, \"value\": 0.2138926698031176}, {\"y\": 6, \"x\": 0, \"value\": 0.08602734271457979}, {\"y\": 7, \"x\": 0, \"value\": 0.2900854100219229}, {\"y\": 8, \"x\": 0, \"value\": 0.5981347080177571}, {\"y\": 9, \"x\": 0, \"value\": 0.786939364513092}, {\"y\": 0, \"x\": 1, \"value\": 0.34148937164609094}, {\"y\": 1, \"x\": 1, \"value\": 0.38680285742162335}, {\"y\": 2, \"x\": 1, \"value\": 0.441116638789934}, {\"y\": 3, \"x\": 1, \"value\": 0.3917545180130825}, {\"y\": 4, \"x\": 1, \"value\": 0.06917843856375905}, {\"y\": 5, \"x\": 1, \"value\": 0.40325588475261764}, {\"y\": 6, \"x\": 1, \"value\": 0.15983002481958064}, {\"y\": 7, \"x\": 1, \"value\": 0.6966684411876769}, {\"y\": 8, \"x\": 1, \"value\": 0.1763671069704712}, {\"y\": 9, \"x\": 1, \"value\": 0.08085435821233056}, {\"y\": 0, \"x\": 2, \"value\": 0.026742237161754057}, {\"y\": 1, \"x\": 2, \"value\": 0.9888065857337894}, {\"y\": 2, \"x\": 2, \"value\": 0.21174574445000838}, {\"y\": 3, \"x\": 2, \"value\": 0.9224713657893887}, {\"y\": 4, \"x\": 2, \"value\": 0.8646074595702639}, {\"y\": 5, \"x\": 2, \"value\": 0.9157266828226426}, {\"y\": 6, \"x\": 2, \"value\": 0.6375334408418598}, {\"y\": 7, \"x\": 2, \"value\": 0.6818108918683998}, {\"y\": 8, \"x\": 2, \"value\": 0.24024789700326532}, {\"y\": 9, \"x\": 2, \"value\": 0.8771767780488511}, {\"y\": 0, \"x\": 3, \"value\": 0.48126617214588385}, {\"y\": 1, \"x\": 3, \"value\": 0.6767784692796927}, {\"y\": 2, \"x\": 3, \"value\": 0.030710726734811455}, {\"y\": 3, \"x\": 3, \"value\": 0.9684464108038313}, {\"y\": 4, \"x\": 3, \"value\": 0.7315908045077912}, {\"y\": 5, \"x\": 3, \"value\": 0.2765334853998901}, {\"y\": 6, \"x\": 3, \"value\": 0.1770945836628759}, {\"y\": 7, \"x\": 3, \"value\": 0.45518462979241847}, {\"y\": 8, \"x\": 3, \"value\": 0.14727670184723007}, {\"y\": 9, \"x\": 3, \"value\": 0.49153353596183913}, {\"y\": 0, \"x\": 4, \"value\": 0.90390001098225}, {\"y\": 1, \"x\": 4, \"value\": 0.5894272532656879}, {\"y\": 2, \"x\": 4, \"value\": 0.9277010744099624}, {\"y\": 3, \"x\": 4, \"value\": 0.27634742968041304}, {\"y\": 4, \"x\": 4, \"value\": 0.9432129921623111}, {\"y\": 5, \"x\": 4, \"value\": 0.19402934187145404}, {\"y\": 6, \"x\": 4, \"value\": 0.817700573158369}, {\"y\": 7, \"x\": 4, \"value\": 0.11993569644529667}, {\"y\": 8, \"x\": 4, \"value\": 0.07868263924332242}, {\"y\": 9, \"x\": 4, \"value\": 0.4771508283194871}, {\"y\": 0, \"x\": 5, \"value\": 0.5962568173155284}, {\"y\": 1, \"x\": 5, \"value\": 0.020270254700166634}, {\"y\": 2, \"x\": 5, \"value\": 0.9334986569005673}, {\"y\": 3, \"x\": 5, \"value\": 0.9855973109251086}, {\"y\": 4, \"x\": 5, \"value\": 0.419563008820828}, {\"y\": 5, \"x\": 5, \"value\": 0.3518933588142622}, {\"y\": 6, \"x\": 5, \"value\": 0.6763061308177284}, {\"y\": 7, \"x\": 5, \"value\": 0.4631581223236034}, {\"y\": 8, \"x\": 5, \"value\": 0.044292669184928024}, {\"y\": 9, \"x\": 5, \"value\": 0.09788065920275668}, {\"y\": 0, \"x\": 6, \"value\": 0.8345014358536115}, {\"y\": 1, \"x\": 6, \"value\": 0.39008522196299644}, {\"y\": 2, \"x\": 6, \"value\": 0.06315624950073195}, {\"y\": 3, \"x\": 6, \"value\": 0.6391394638539432}, {\"y\": 4, \"x\": 6, \"value\": 0.22672297961481536}, {\"y\": 5, \"x\": 6, \"value\": 0.9845592116669751}, {\"y\": 6, \"x\": 6, \"value\": 0.9677421494688869}, {\"y\": 7, \"x\": 6, \"value\": 0.5636438003420338}, {\"y\": 8, \"x\": 6, \"value\": 0.07765639405338809}, {\"y\": 9, \"x\": 6, \"value\": 0.4303434396659246}, {\"y\": 0, \"x\": 7, \"value\": 0.22316281553882145}, {\"y\": 1, \"x\": 7, \"value\": 0.3576853360742036}, {\"y\": 2, \"x\": 7, \"value\": 0.9102497740864886}, {\"y\": 3, \"x\": 7, \"value\": 0.2747532236553457}, {\"y\": 4, \"x\": 7, \"value\": 0.4756340133704581}, {\"y\": 5, \"x\": 7, \"value\": 0.8165126310733011}, {\"y\": 6, \"x\": 7, \"value\": 0.3901607782692934}, {\"y\": 7, \"x\": 7, \"value\": 0.2755077415896511}, {\"y\": 8, \"x\": 7, \"value\": 0.33565619453165985}, {\"y\": 9, \"x\": 7, \"value\": 0.6210927031396566}, {\"y\": 0, \"x\": 8, \"value\": 0.7442686780990726}, {\"y\": 1, \"x\": 8, \"value\": 0.5768094457940777}, {\"y\": 2, \"x\": 8, \"value\": 0.5741824972501074}, {\"y\": 3, \"x\": 8, \"value\": 0.4955586797988729}, {\"y\": 4, \"x\": 8, \"value\": 0.7016426250342167}, {\"y\": 5, \"x\": 8, \"value\": 0.7318828731427557}, {\"y\": 6, \"x\": 8, \"value\": 0.6086900917839463}, {\"y\": 7, \"x\": 8, \"value\": 0.3419097251137675}, {\"y\": 8, \"x\": 8, \"value\": 0.7435408575313653}, {\"y\": 9, \"x\": 8, \"value\": 0.4398367853132197}, {\"y\": 0, \"x\": 9, \"value\": 0.7405122699221571}, {\"y\": 1, \"x\": 9, \"value\": 0.23469867706032765}, {\"y\": 2, \"x\": 9, \"value\": 0.8465308803477672}, {\"y\": 3, \"x\": 9, \"value\": 0.7102242393492851}, {\"y\": 4, \"x\": 9, \"value\": 0.6561368856166483}, {\"y\": 5, \"x\": 9, \"value\": 0.44392385000979206}, {\"y\": 6, \"x\": 9, \"value\": 0.9752208274734796}, {\"y\": 7, \"x\": 9, \"value\": 0.06815210275117356}, {\"y\": 8, \"x\": 9, \"value\": 0.57219747818533}, {\"y\": 9, \"x\": 9, \"value\": 0.5495403200565788}, {\"y\": 0, \"x\": 10, \"value\": 0.2937769995173606}, {\"y\": 1, \"x\": 10, \"value\": 0.4200023014649593}, {\"y\": 2, \"x\": 10, \"value\": 0.6738181638452727}, {\"y\": 3, \"x\": 10, \"value\": 0.11462389684368446}, {\"y\": 4, \"x\": 10, \"value\": 0.8327378799366475}, {\"y\": 5, \"x\": 10, \"value\": 0.3481035751046061}, {\"y\": 6, \"x\": 10, \"value\": 0.8198756481258235}, {\"y\": 7, \"x\": 10, \"value\": 0.7400030126664499}, {\"y\": 8, \"x\": 10, \"value\": 0.1539506843560864}, {\"y\": 9, \"x\": 10, \"value\": 0.061083718027431066}, {\"y\": 0, \"x\": 11, \"value\": 0.13009741821485954}, {\"y\": 1, \"x\": 11, \"value\": 0.9799526238318067}, {\"y\": 2, \"x\": 11, \"value\": 0.3155256889031328}, {\"y\": 3, \"x\": 11, \"value\": 0.6646341409174229}, {\"y\": 4, \"x\": 11, \"value\": 0.6036855673484732}, {\"y\": 5, \"x\": 11, \"value\": 0.3302745871557281}, {\"y\": 6, \"x\": 11, \"value\": 0.8439249150138013}, {\"y\": 7, \"x\": 11, \"value\": 0.7442652861301245}, {\"y\": 8, \"x\": 11, \"value\": 0.3422219947269246}, {\"y\": 9, \"x\": 11, \"value\": 0.27558893475235624}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n## Decision Framework for Choosing a Library\n\n### Choose Matplotlib when:\n- You need complete control over every detail of your visualization\n- You're creating complex, custom plots\n- Your visualizations will be included in scientific publications\n- You're working with very large datasets\n- You need to create animations or specialized chart types\n\n### Choose Seaborn when:\n- You want attractive plots with minimal code\n- You're performing statistical analysis\n- You want to create common statistical plots quickly\n- You need to visualize relationships between variables\n- You want good-looking defaults but still need some customization\n\n### Choose Altair when:\n- You want interactive visualizations\n- You prefer a declarative approach to visualization\n- You want concise, readable code\n- You're creating dashboards or web-based visualizations\n- You're working with small to medium-sized datasets\n\n## Integration Examples\n\n### Combining Seaborn with Matplotlib:\n\n::: {#d68ed6ad .cell execution_count=16}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\n\n# Create sample data\nnp.random.seed(42)\ndata = pd.DataFrame({\n    'x': np.random.normal(0, 1, 100),\n    'y': np.random.normal(0, 1, 100),\n    'category': np.random.choice(['A', 'B', 'C'], 100)\n})\n\n# Create a figure with Matplotlib\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Use Seaborn for the main plot\nsns.scatterplot(data=data, x='x', y='y', hue='category', ax=ax)\n\n# Add Matplotlib customizations\nax.set_title('Combining Matplotlib and Seaborn', fontsize=16)\nax.grid(True, linestyle='--', alpha=0.7)\nax.set_xlabel('X Variable', fontsize=12)\nax.set_ylabel('Y Variable', fontsize=12)\n\n# Add annotations using Matplotlib\nax.annotate('Interesting Point', xy=(-1, 1), xytext=(-2, 1.5),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){}\n:::\n:::\n\n\n### Using Altair with Pandas:\n\n::: {#6ff9ae13 .cell execution_count=17}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data with pandas\nnp.random.seed(42)\ndf = pd.DataFrame({\n    'date': pd.date_range('2023-01-01', periods=100),\n    'value': np.cumsum(np.random.randn(100)),\n    'category': np.random.choice(['Group A', 'Group B'], 100)\n})\n\n# Use pandas to prepare the data\ndf['month'] = df['date'].dt.month\nmonthly_avg = df.groupby(['month', 'category'])['value'].mean().reset_index()\n\n# Create the Altair visualization\nchart = alt.Chart(monthly_avg).mark_line(point=True).encode(\n    x='month:O',\n    y='value:Q',\n    color='category:N',\n    tooltip=['month', 'value', 'category']\n).properties(\n    width=600,\n    height=400,\n    title='Monthly Averages by Category'\n).interactive()\n\nchart\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n\n<style>\n  #altair-viz-7cdfa5dd8a6749aaa6809c2cd8d3e028.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-7cdfa5dd8a6749aaa6809c2cd8d3e028.vega-embed details,\n  #altair-viz-7cdfa5dd8a6749aaa6809c2cd8d3e028.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-7cdfa5dd8a6749aaa6809c2cd8d3e028\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-7cdfa5dd8a6749aaa6809c2cd8d3e028\") {\n      outputDiv = document.getElementById(\"altair-viz-7cdfa5dd8a6749aaa6809c2cd8d3e028\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-a541d48ae4ddcdd5651af34b355e0012\"}, \"mark\": {\"type\": \"line\", \"point\": true}, \"encoding\": {\"color\": {\"field\": \"category\", \"type\": \"nominal\"}, \"tooltip\": [{\"field\": \"month\", \"type\": \"quantitative\"}, {\"field\": \"value\", \"type\": \"quantitative\"}, {\"field\": \"category\", \"type\": \"nominal\"}], \"x\": {\"field\": \"month\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"value\", \"type\": \"quantitative\"}}, \"height\": 400, \"params\": [{\"name\": \"param_2\", \"select\": {\"type\": \"interval\", \"encodings\": [\"x\", \"y\"]}, \"bind\": \"scales\"}], \"title\": \"Monthly Averages by Category\", \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-a541d48ae4ddcdd5651af34b355e0012\": [{\"month\": 1, \"category\": \"Group A\", \"value\": -1.1687602478608594}, {\"month\": 1, \"category\": \"Group B\", \"value\": 0.1733373892143235}, {\"month\": 2, \"category\": \"Group A\", \"value\": -8.844550443778122}, {\"month\": 2, \"category\": \"Group B\", \"value\": -8.735931823731262}, {\"month\": 3, \"category\": \"Group A\", \"value\": -8.844299433609882}, {\"month\": 3, \"category\": \"Group B\", \"value\": -9.455147207445952}, {\"month\": 4, \"category\": \"Group A\", \"value\": -9.520630718321136}, {\"month\": 4, \"category\": \"Group B\", \"value\": -9.494528166538776}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n## Performance Comparison\n\nFor libraries like Matplotlib, Seaborn, and Altair, performance can vary widely depending on the size of your dataset and the complexity of your visualization. Here's a general overview:\n\n### Small Datasets (< 1,000 points):\n- All three libraries perform well\n- Altair might have slightly more overhead due to its JSON specification generation\n\n### Medium Datasets (1,000 - 10,000 points):\n- Matplotlib and Seaborn continue to perform well\n- Altair starts to slow down but remains usable\n\n### Large Datasets (> 10,000 points):\n- Matplotlib performs best for large static visualizations\n- Seaborn becomes slower as it adds statistical computations\n- Altair significantly slows down and may require data aggregation\n\n### Recommended Approaches for Large Data:\n1. **Matplotlib**: Use `plot()` instead of `scatter()` for line plots, or try `hexbin()` for density plots\n2. **Seaborn**: Use `sample()` or aggregation methods before plotting\n3. **Altair**: Use `transform_sample()` or pre-aggregate your data\n\n## Conclusion\n\nThe Python visualization ecosystem offers tools for every need, from low-level control to high-level abstraction:\n\n- **Matplotlib** provides ultimate flexibility and control but requires more code and knowledge\n- **Seaborn** offers a perfect middle ground with statistical integration and clean defaults\n- **Altair** delivers a concise, declarative approach with built-in interactivity\n\nRather than picking just one library, consider becoming familiar with all three and selecting the right tool for each visualization task. Many data scientists use a combination of these libraries, leveraging the strengths of each one as needed.\n\nFor those just starting, Seaborn provides a gentle entry point with attractive results for common visualization needs. As your skills advance, you can incorporate Matplotlib for customization and Altair for interactive visualizations.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}