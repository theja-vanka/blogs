{
  "hash": "357d1592124a3baa0fb75fb2ce0e3051",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python Data Visualization: Matplotlib vs Seaborn vs Altair\"\nauthor: \"Krishnatheja Vanka\"\ndate: \"2025-04-12\"\ncategories: [code, tutorial]\nformat:\n  html:\n    code-fold: false\nexecute:\n  echo: true\n  timing: true\njupyter: python3\n---\n\n# Python Data Visualization: Matplotlib vs Seaborn vs Altair\n\n![](dataviz.jpg)\n\nThis guide compares three popular Python data visualization libraries: Matplotlib, Seaborn, and Altair (Vega-Altair). Each library has its own strengths, weaknesses, and ideal use cases. This comparison will help you choose the right tool for your specific visualization needs.\n\n## Quick Reference Comparison\n\n| Feature | Matplotlib | Seaborn | Altair |\n|---------|------------|---------|--------|\n| **Release Year** | 2003 | 2013 | 2016 |\n| **Foundation** | Standalone | Built on Matplotlib | Based on Vega-Lite |\n| **Philosophy** | Imperative | Statistical | Declarative |\n| **Abstraction Level** | Low | Medium | High |\n| **Learning Curve** | Steep | Moderate | Gentle |\n| **Code Verbosity** | High | Medium | Low |\n| **Customization** | Extensive | Good | Limited |\n| **Statistical Integration** | Manual | Built-in | Good |\n| **Interactive Features** | Limited | Limited | Excellent |\n| **Performance with Large Data** | Good | Moderate | Limited |\n| **Community & Resources** | Extensive | Good | Growing |\n\n## Matplotlib\n\nMatplotlib is the foundational plotting library in Python's data visualization ecosystem.\n\n### Strengths:\n- **Fine-grained control**: Almost every aspect of a visualization can be customized\n- **Versatility**: Can create virtually any type of static plot\n- **Maturity**: Extensive documentation and community support\n- **Ecosystem integration**: Many libraries integrate with or build upon Matplotlib\n- **Performance**: Handles large datasets well\n\n### Weaknesses:\n- **Verbose syntax**: Requires many lines of code for complex visualizations\n- **Steep learning curve**: Many functions and parameters to learn\n- **Default aesthetics**: Basic default styling (though this has improved)\n- **Limited interactivity**: Primarily designed for static plots\n\n### Example Code:\n\n::: {#4459adde .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Plot data\nax.plot(x, y, label='Sine Wave')\n\n# Add grid, legend, title and labels\nax.grid(True)\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Simple Sine Wave Plot')\nax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=758 height=374}\n:::\n:::\n\n\n### When to use Matplotlib:\n- You need complete control over every aspect of your visualization\n- You're creating complex, publication-quality figures\n- You're working with specialized plot types not available in higher-level libraries\n- You need to integrate with many other Python libraries\n- You're working with large datasets\n\n## Seaborn\n\nSeaborn is a statistical visualization library built on top of Matplotlib.\n\n### Strengths:\n- **Aesthetic defaults**: Beautiful out-of-the-box styling\n- **Statistical integration**: Built-in support for statistical visualizations\n- **Dataset awareness**: Works well with pandas DataFrames\n- **Simplicity**: Fewer lines of code than Matplotlib for common plots\n- **High-level functions**: Specialized plots like `lmplot`, `catplot`, etc.\n\n### Weaknesses:\n- **Limited customization**: Some advanced customizations require falling back to Matplotlib\n- **Performance**: Can be slower with very large datasets\n- **Restricted scope**: Focused on statistical visualization, not general-purpose plotting\n\n### Example Code:\n\n::: {#6e98133d .cell execution_count=2}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, size=len(x))\ndata = pd.DataFrame({'x': x, 'y': y})\n\n# Set the aesthetic style\nsns.set_theme(style=\"whitegrid\")\n\n# Create the plot\nplt.figure(figsize=(8, 4))\nsns.lineplot(data=data, x='x', y='y', label='Noisy Sine Wave')\nsns.regplot(data=data, x='x', y='y', scatter=False, label='Regression Line')\n\n# Add title and labels\nplt.title('Seaborn Line Plot with Regression')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=752 height=368}\n:::\n:::\n\n\n### When to use Seaborn:\n- You want attractive visualizations with minimal code\n- You're performing statistical analysis\n- You're working with pandas DataFrames\n- You're creating common statistical plots (distributions, relationships, categorical plots)\n- You want the power of Matplotlib with a simpler interface\n\n## Altair (Vega-Altair)\n\nAltair is a declarative statistical visualization library based on Vega-Lite.\n\n### Strengths:\n- **Declarative approach**: Focus on what to visualize, not how to draw it\n- **Concise syntax**: Very readable, clear code\n- **Layered grammar of graphics**: Intuitive composition of plots\n- **Interactive visualizations**: Built-in support for interactive features\n- **JSON output**: Visualizations can be saved as JSON specifications\n\n### Weaknesses:\n- **Performance limitations**: Not ideal for very large datasets (>5000 points)\n- **Limited customization**: Less fine-grained control than Matplotlib\n- **Learning curve**: Different paradigm from traditional plotting libraries\n- **Browser dependency**: Uses JavaScript rendering for advanced features\n\n### Example Code:\n\n::: {#b9742561 .cell execution_count=3}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, size=len(x))\ndata = pd.DataFrame({'x': x, 'y': y})\n\n# Create a simple scatter plot with interactive tooltips\nchart = alt.Chart(data).mark_circle().encode(\n    x='x',\n    y='y',\n    tooltip=['x', 'y']\n).properties(\n    width=600,\n    height=300,\n    title='Interactive Altair Scatter Plot'\n).interactive()\n\n# Add a regression line\nregression = alt.Chart(data).transform_regression(\n    'x', 'y'\n).mark_line(color='red').encode(\n    x='x',\n    y='y'\n)\n\n# Combine the plots\nfinal_chart = chart + regression\n\n# Display the chart\nfinal_chart\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n\n<style>\n  #altair-viz-7d25f54033344a87af8051dd1b766aa8.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-7d25f54033344a87af8051dd1b766aa8.vega-embed details,\n  #altair-viz-7d25f54033344a87af8051dd1b766aa8.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-7d25f54033344a87af8051dd1b766aa8\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-7d25f54033344a87af8051dd1b766aa8\") {\n      outputDiv = document.getElementById(\"altair-viz-7d25f54033344a87af8051dd1b766aa8\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"layer\": [{\"mark\": {\"type\": \"circle\"}, \"encoding\": {\"tooltip\": [{\"field\": \"x\", \"type\": \"quantitative\"}, {\"field\": \"y\", \"type\": \"quantitative\"}], \"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"name\": \"view_1\", \"title\": \"Interactive Altair Scatter Plot\"}, {\"mark\": {\"type\": \"line\", \"color\": \"red\"}, \"encoding\": {\"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"transform\": [{\"on\": \"x\", \"regression\": \"y\"}]}], \"data\": {\"name\": \"data-e7fb96e8fb51442f6836ac087e614ff0\"}, \"height\": 300, \"params\": [{\"name\": \"param_1\", \"select\": {\"type\": \"interval\", \"encodings\": [\"x\", \"y\"]}, \"bind\": \"scales\", \"views\": [\"view_1\"]}], \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-e7fb96e8fb51442f6836ac087e614ff0\": [{\"x\": 0.0, \"y\": 0.05627662885019438}, {\"x\": 0.10101010101010101, \"y\": -0.19713369307802506}, {\"x\": 0.20202020202020202, \"y\": 0.087024061600858}, {\"x\": 0.30303030303030304, \"y\": 0.29543813825479837}, {\"x\": 0.40404040404040403, \"y\": 0.7799719133287039}, {\"x\": 0.5050505050505051, \"y\": 0.5671723786550796}, {\"x\": 0.6060606060606061, \"y\": 0.5776893358589265}, {\"x\": 0.7070707070707071, \"y\": 0.6562455211486901}, {\"x\": 0.8080808080808081, \"y\": 0.8057931160514638}, {\"x\": 0.9090909090909091, \"y\": 0.9098938891970024}, {\"x\": 1.0101010101010102, \"y\": 0.9719108509119473}, {\"x\": 1.1111111111111112, \"y\": 0.9256139145330481}, {\"x\": 1.2121212121212122, \"y\": 1.0182556543787886}, {\"x\": 1.3131313131313131, \"y\": 1.0393914883196644}, {\"x\": 1.4141414141414141, \"y\": 1.1850262325848246}, {\"x\": 1.5151515151515151, \"y\": 1.1158111076937223}, {\"x\": 1.6161616161616161, \"y\": 0.6785110186994799}, {\"x\": 1.7171717171717171, \"y\": 1.2692049373697998}, {\"x\": 1.8181818181818181, \"y\": 0.829013948039406}, {\"x\": 1.9191919191919191, \"y\": 0.7420734661328269}, {\"x\": 2.0202020202020203, \"y\": 0.864587760686835}, {\"x\": 2.121212121212121, \"y\": 0.9585390121300095}, {\"x\": 2.2222222222222223, \"y\": 0.9401901745562771}, {\"x\": 2.323232323232323, \"y\": 0.8768012697373939}, {\"x\": 2.4242424242424243, \"y\": 0.8250042212100344}, {\"x\": 2.525252525252525, \"y\": 0.7208285805851404}, {\"x\": 2.6262626262626263, \"y\": 0.41666668969244347}, {\"x\": 2.727272727272727, \"y\": 0.459875673464179}, {\"x\": 2.8282828282828283, \"y\": 0.15909526268000393}, {\"x\": 2.929292929292929, \"y\": 0.33537290120519647}, {\"x\": 3.0303030303030303, \"y\": 0.048426988990635605}, {\"x\": 3.131313131313131, \"y\": 0.11277238615915332}, {\"x\": 3.2323232323232323, \"y\": 0.22228697924096047}, {\"x\": 3.3333333333333335, \"y\": 0.11402114021278253}, {\"x\": 3.4343434343434343, \"y\": -0.5138367529684018}, {\"x\": 3.5353535353535355, \"y\": -0.5179468379665739}, {\"x\": 3.6363636363636362, \"y\": -0.4608516199281642}, {\"x\": 3.7373737373737375, \"y\": -0.38058659103860903}, {\"x\": 3.8383838383838382, \"y\": -1.0165562624135425}, {\"x\": 3.9393939393939394, \"y\": -0.7149165387378439}, {\"x\": 4.040404040404041, \"y\": -0.903478720165097}, {\"x\": 4.141414141414141, \"y\": -0.7967220828117765}, {\"x\": 4.242424242424242, \"y\": -0.9734361221302864}, {\"x\": 4.343434343434343, \"y\": -0.8873034469922826}, {\"x\": 4.444444444444445, \"y\": -1.0897191212453157}, {\"x\": 4.545454545454545, \"y\": -1.0326434601986858}, {\"x\": 4.646464646464646, \"y\": -0.9783840408768031}, {\"x\": 4.747474747474747, \"y\": -1.2635623847946214}, {\"x\": 4.848484848484849, \"y\": -0.7990391226004137}, {\"x\": 4.94949494949495, \"y\": -0.7538115745980218}, {\"x\": 5.05050505050505, \"y\": -1.1925367070979975}, {\"x\": 5.151515151515151, \"y\": -0.8758376373518394}, {\"x\": 5.252525252525253, \"y\": -0.8999243380809518}, {\"x\": 5.353535353535354, \"y\": -0.9328957504112032}, {\"x\": 5.454545454545454, \"y\": -0.9868829163518412}, {\"x\": 5.555555555555555, \"y\": -0.4686804763025453}, {\"x\": 5.656565656565657, \"y\": -0.3228758248654173}, {\"x\": 5.757575757575758, \"y\": -0.641188712952182}, {\"x\": 5.858585858585858, \"y\": -0.5228332485528315}, {\"x\": 5.959595959595959, \"y\": -0.09946842810760276}, {\"x\": 6.0606060606060606, \"y\": -0.13903317330725923}, {\"x\": 6.161616161616162, \"y\": -0.22308118994357118}, {\"x\": 6.262626262626262, \"y\": 0.06391080223379633}, {\"x\": 6.363636363636363, \"y\": 0.33847763211170784}, {\"x\": 6.4646464646464645, \"y\": 0.2685361395770601}, {\"x\": 6.565656565656566, \"y\": 0.20644104502395444}, {\"x\": 6.666666666666667, \"y\": 0.7292696335793386}, {\"x\": 6.767676767676767, \"y\": 0.5900624297287563}, {\"x\": 6.8686868686868685, \"y\": 0.034031159185506143}, {\"x\": 6.96969696969697, \"y\": 0.6211218340576223}, {\"x\": 7.070707070707071, \"y\": 0.5842924018392022}, {\"x\": 7.171717171717171, \"y\": 1.0342845381688504}, {\"x\": 7.2727272727272725, \"y\": 0.9451805480618765}, {\"x\": 7.373737373737374, \"y\": 0.8979908990093889}, {\"x\": 7.474747474747475, \"y\": 1.093008253257794}, {\"x\": 7.575757575757575, \"y\": 0.9746718264083013}, {\"x\": 7.6767676767676765, \"y\": 0.9350240104014349}, {\"x\": 7.777777777777778, \"y\": 0.9861287982673964}, {\"x\": 7.878787878787879, \"y\": 0.9522202759166417}, {\"x\": 7.979797979797979, \"y\": 0.9773760157176383}, {\"x\": 8.080808080808081, \"y\": 0.8321327951973573}, {\"x\": 8.181818181818182, \"y\": 1.2097452878964594}, {\"x\": 8.282828282828282, \"y\": 0.9355243194221387}, {\"x\": 8.383838383838384, \"y\": 0.8665668315242352}, {\"x\": 8.484848484848484, \"y\": 0.7924950022073153}, {\"x\": 8.585858585858587, \"y\": 0.6093041228842643}, {\"x\": 8.686868686868687, \"y\": 0.6786395150103139}, {\"x\": 8.787878787878787, \"y\": 0.6408385210848376}, {\"x\": 8.88888888888889, \"y\": 0.40708186324299817}, {\"x\": 8.98989898989899, \"y\": 0.7323052040007447}, {\"x\": 9.09090909090909, \"y\": 0.24055367205472594}, {\"x\": 9.191919191919192, \"y\": 0.2739418385544991}, {\"x\": 9.292929292929292, \"y\": 0.24938164313493222}, {\"x\": 9.393939393939394, \"y\": 0.19475651042480327}, {\"x\": 9.494949494949495, \"y\": -0.41697856166292235}, {\"x\": 9.595959595959595, \"y\": -0.47118961043944946}, {\"x\": 9.696969696969697, \"y\": -0.03524661439439647}, {\"x\": 9.797979797979798, \"y\": -0.6636547497751482}, {\"x\": 9.8989898989899, \"y\": -0.16623382473595133}, {\"x\": 10.0, \"y\": -0.34300270858838394}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### When to use Altair:\n- You want interactive visualizations\n- You prefer a declarative approach to visualization\n- You're working with small to medium-sized datasets\n- You want to publish visualizations on the web\n- You appreciate a consistent grammar of graphics\n\n## Common Visualization Types Comparison\n\n### Scatter Plot\n\n**Matplotlib:**\n\n::: {#7fafa621 .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.randn(100)\ny = np.random.randn(100)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y, alpha=0.7)\nplt.title('Matplotlib Scatter Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=664 height=529}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#57e1c77c .cell execution_count=5}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100)\n})\n\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=data, x='x', y='y', alpha=0.7)\nplt.title('Seaborn Scatter Plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=664 height=529}\n:::\n:::\n\n\n**Altair:**\n\n::: {#8a41b7c6 .cell execution_count=6}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100)\n})\n\nalt.Chart(data).mark_circle(opacity=0.7).encode(\n    x='x',\n    y='y'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Scatter Plot'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n\n<style>\n  #altair-viz-7043a86720fa4d59a2e811408a59f46e.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-7043a86720fa4d59a2e811408a59f46e.vega-embed details,\n  #altair-viz-7043a86720fa4d59a2e811408a59f46e.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-7043a86720fa4d59a2e811408a59f46e\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-7043a86720fa4d59a2e811408a59f46e\") {\n      outputDiv = document.getElementById(\"altair-viz-7043a86720fa4d59a2e811408a59f46e\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-afc50d4cf90870657aabcffd6841891b\"}, \"mark\": {\"type\": \"circle\", \"opacity\": 0.7}, \"encoding\": {\"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Scatter Plot\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-afc50d4cf90870657aabcffd6841891b\": [{\"x\": 0.05418717332812314, \"y\": -0.13407085527711812}, {\"x\": 1.8789055671153858, \"y\": -0.932753223829571}, {\"x\": -1.226182603412106, \"y\": 2.490062324340341}, {\"x\": 0.08719470387523809, \"y\": -0.8524437212439073}, {\"x\": 0.3742324469187156, \"y\": -1.068742080730499}, {\"x\": 0.8953199060709655, \"y\": -0.9144629006948799}, {\"x\": 0.18975567995030404, \"y\": 1.9216406301190305}, {\"x\": 0.5617490549902925, \"y\": 0.25190925230035527}, {\"x\": 0.9171829470636386, \"y\": 0.40867617193579375}, {\"x\": 0.8846785664912846, \"y\": 0.4150755129017838}, {\"x\": 0.060531129052449055, \"y\": 0.5365127696442213}, {\"x\": -0.3673186444287429, \"y\": -0.34961686617370286}, {\"x\": -1.3913289312624086, \"y\": -0.3298974660960405}, {\"x\": -0.7586336445879617, \"y\": -0.37390237460998255}, {\"x\": -0.8993318104122116, \"y\": 1.5117128403295637}, {\"x\": 1.511616213676685, \"y\": 0.16705845310395245}, {\"x\": 0.6726617475395755, \"y\": -0.923302126622019}, {\"x\": 0.8329700125977604, \"y\": -0.3503858832606765}, {\"x\": -1.5726749796299182, \"y\": 1.4349760681753285}, {\"x\": -1.516940611312989, \"y\": -0.3250625557816501}, {\"x\": -2.114712432212835, \"y\": -2.5954010638949114}, {\"x\": 0.4066133938856226, \"y\": 1.2101797994843033}, {\"x\": 0.1869668636049627, \"y\": 0.79389860636399}, {\"x\": 0.2970813088254145, \"y\": 0.6910859469627566}, {\"x\": 0.7944730380857496, \"y\": -0.12070096972378075}, {\"x\": 0.38721678397695203, \"y\": 0.09846330149761715}, {\"x\": -0.0012758250286426791, \"y\": 1.5589677482217055}, {\"x\": -0.599230965195405, \"y\": -0.44414001318656937}, {\"x\": -0.2701276635677209, \"y\": 0.5585067152676985}, {\"x\": 0.423472457766187, \"y\": 0.05090999796599761}, {\"x\": 0.5385287865920574, \"y\": 0.6519070615500442}, {\"x\": -1.0608652546986561, \"y\": 0.34856450742558814}, {\"x\": 0.7259147143990284, \"y\": -1.0100113519197482}, {\"x\": 0.6402162807443093, \"y\": -0.9278281433607598}, {\"x\": -0.04682539800907638, \"y\": 0.6286743058527631}, {\"x\": 1.5020631913374973, \"y\": -1.0692762441059829}, {\"x\": 0.5081992154963174, \"y\": 0.014955549341950017}, {\"x\": 1.428178008969382, \"y\": -0.7464641004854676}, {\"x\": -1.6129318304076823, \"y\": -0.3215476028456047}, {\"x\": 0.029697025570467835, \"y\": 0.17924892397750386}, {\"x\": 0.970725761459745, \"y\": -1.6054552659986652}, {\"x\": 1.042621565070103, \"y\": -1.2750493184213554}, {\"x\": 0.6639467352229305, \"y\": -1.3609508790650011}, {\"x\": -0.3844783961230596, \"y\": -1.9949216222609611}, {\"x\": 1.3561618043393975, \"y\": -0.9663907463054318}, {\"x\": 0.32312300720476356, \"y\": 1.6269597273621266}, {\"x\": -0.3959691733897022, \"y\": -1.6506212743246245}, {\"x\": -0.5143587228262803, \"y\": 1.4218270414456688}, {\"x\": -1.0598115228129945, \"y\": 1.4524670475415082}, {\"x\": -0.5011832211005267, \"y\": -2.8970253976365226}, {\"x\": -0.6392891023411443, \"y\": -1.2881693146004156}, {\"x\": 0.17371728369474482, \"y\": -0.14869674593800106}, {\"x\": -1.214623090131247, \"y\": 2.2008700419401976}, {\"x\": 0.09767256015134546, \"y\": -0.5902356617638851}, {\"x\": -0.07305300070845962, \"y\": -0.23964770703016713}, {\"x\": -0.5145578672354351, \"y\": 0.39893080604654274}, {\"x\": -0.20108593580736708, \"y\": 0.6370387118732951}, {\"x\": 1.7005801546834334, \"y\": -0.9294941679862659}, {\"x\": -0.0633633168257002, \"y\": -1.9498715420822625}, {\"x\": 0.6812529138339531, \"y\": 0.7777421751290632}, {\"x\": -0.6888040817358932, \"y\": 1.263532044631454}, {\"x\": -0.8340885747162392, \"y\": 0.4996366988349651}, {\"x\": 0.6128297223268108, \"y\": 0.7720823618473827}, {\"x\": -0.5904262985391472, \"y\": 0.5763930708183065}, {\"x\": 2.140022604055746, \"y\": 1.2778643167002857}, {\"x\": 1.2761784708677657, \"y\": 0.7765719428000669}, {\"x\": -0.46891741303019846, \"y\": 0.027488183175647014}, {\"x\": -0.7421853213450156, \"y\": -0.10874205946792627}, {\"x\": 0.17216527382042665, \"y\": -0.8738925007805695}, {\"x\": 0.34850916189335535, \"y\": -1.6271253053337267}, {\"x\": 0.5395909127582778, \"y\": 1.3464341130824327}, {\"x\": 1.4773604733319148, \"y\": -0.6608685286639924}, {\"x\": 1.0645889166012301, \"y\": 0.44046824900361353}, {\"x\": -1.0850315281654634, \"y\": 1.686334426756458}, {\"x\": -1.2573830024935408, \"y\": -0.05565726006132493}, {\"x\": 0.8854314544483655, \"y\": 0.08250399426553588}, {\"x\": 1.642652343025357, \"y\": 0.8024901123661248}, {\"x\": -1.1056237869471612, \"y\": 1.3370247152573964}, {\"x\": -0.20783524714818885, \"y\": -1.2216924806980805}, {\"x\": 0.2509031438176283, \"y\": -0.011746050658829318}, {\"x\": 1.0650707910311281, \"y\": -0.17617816243811832}, {\"x\": 0.6683292490478921, \"y\": -0.5978312919294775}, {\"x\": -0.9621959618163674, \"y\": -1.5788673720082056}, {\"x\": 0.8856795979173042, \"y\": -0.09691093150234903}, {\"x\": -1.1715258227146907, \"y\": -1.8311594784861005}, {\"x\": 0.13182585004880948, \"y\": 0.2107524148807047}, {\"x\": -0.6601280357526473, \"y\": -0.6658651962102997}, {\"x\": 0.30091237250230524, \"y\": 0.49934057964644624}, {\"x\": 0.48335299531286374, \"y\": -0.46709838077650845}, {\"x\": -0.5920239351703541, \"y\": 0.2616239367163342}, {\"x\": -0.2296938317622984, \"y\": -0.08469781450965015}, {\"x\": 1.6549794390952135, \"y\": -0.6178015953407803}, {\"x\": 0.7021837981556736, \"y\": -0.7049038788638987}, {\"x\": 1.1255333309427613, \"y\": -1.173848516164962}, {\"x\": 0.5590546137606324, \"y\": -1.0485166827211276}, {\"x\": 0.8396527979507074, \"y\": -0.711788712299503}, {\"x\": 1.4098790535069035, \"y\": 0.015322717918513116}, {\"x\": -0.7609857660615289, \"y\": 1.521951879249786}, {\"x\": 1.792062408236746, \"y\": -0.4475731330111809}, {\"x\": 0.09392987747176765, \"y\": -0.04409477413786217}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Histogram\n\n**Matplotlib:**\n\n::: {#212da63b .cell execution_count=7}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\n\nplt.figure(figsize=(8, 6))\nplt.hist(data, bins=30, alpha=0.7, edgecolor='black')\nplt.title('Matplotlib Histogram')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=663 height=529}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#d606264b .cell execution_count=8}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\n\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(8, 6))\nsns.histplot(data=data, bins=30, kde=True)\nplt.title('Seaborn Histogram with KDE')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=663 height=509}\n:::\n:::\n\n\n**Altair:**\n\n::: {#f68abd56 .cell execution_count=9}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({'value': np.random.randn(1000)})\n\nalt.Chart(data).mark_bar().encode(\n    alt.X('value', bin=alt.Bin(maxbins=30)),\n    y='count()'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Histogram'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n\n<style>\n  #altair-viz-1df6ff509a4942c6bbcf122c549b3aff.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-1df6ff509a4942c6bbcf122c549b3aff.vega-embed details,\n  #altair-viz-1df6ff509a4942c6bbcf122c549b3aff.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-1df6ff509a4942c6bbcf122c549b3aff\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-1df6ff509a4942c6bbcf122c549b3aff\") {\n      outputDiv = document.getElementById(\"altair-viz-1df6ff509a4942c6bbcf122c549b3aff\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-420c7e01b8681277c7bb405682e78942\"}, \"mark\": {\"type\": \"bar\"}, \"encoding\": {\"x\": {\"bin\": {\"maxbins\": 30}, \"field\": \"value\", \"type\": \"quantitative\"}, \"y\": {\"aggregate\": \"count\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Histogram\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-420c7e01b8681277c7bb405682e78942\": [{\"value\": -0.06953476648484323}, {\"value\": 1.8331856773696447}, {\"value\": 1.8366878905930197}, {\"value\": -1.031845308543123}, {\"value\": 0.6546534254573372}, {\"value\": 1.2668371979565178}, {\"value\": -0.913516350669968}, {\"value\": 0.03274204707574971}, {\"value\": 0.8142796678392599}, {\"value\": 1.5270452338073404}, {\"value\": -2.0186495212984967}, {\"value\": 1.2729128528886182}, {\"value\": -0.02718760873745314}, {\"value\": 0.17206936732923495}, {\"value\": 0.6801549443638447}, {\"value\": 0.34247899269631005}, {\"value\": 1.6059567248990396}, {\"value\": 1.025596554990861}, {\"value\": 2.029822870439338}, {\"value\": 1.0821544532705587}, {\"value\": 2.2622903380612547}, {\"value\": -2.738465630749801}, {\"value\": -0.4899645163443837}, {\"value\": 0.022621440957025406}, {\"value\": 0.34785893270433565}, {\"value\": -0.5419139841845925}, {\"value\": -0.6497583664000168}, {\"value\": 0.16290840046660762}, {\"value\": 0.8556539248870246}, {\"value\": 0.6151103397864257}, {\"value\": 1.8724926034009084}, {\"value\": 1.1982026579786436}, {\"value\": -0.021454443500537122}, {\"value\": 1.4872650663771099}, {\"value\": -2.739400917709789}, {\"value\": -0.08786528264826382}, {\"value\": -0.976442160320108}, {\"value\": -0.41329953211811726}, {\"value\": 0.5252579067240964}, {\"value\": -0.39536236303517613}, {\"value\": -0.7663832657948181}, {\"value\": -1.0081986677918937}, {\"value\": -0.7560302218470909}, {\"value\": 0.5910945997475365}, {\"value\": 0.5467226679017063}, {\"value\": -0.29641845235016384}, {\"value\": -0.09735129107140492}, {\"value\": -0.5094343746010498}, {\"value\": 0.10300779637511633}, {\"value\": -0.3118345744791141}, {\"value\": 1.0232399881419256}, {\"value\": -0.37349765277024555}, {\"value\": -1.7827381231963397}, {\"value\": -0.9844315630505087}, {\"value\": -0.3559911125738169}, {\"value\": -0.35066469640847275}, {\"value\": -0.4261510104958181}, {\"value\": 1.3841023259589145}, {\"value\": 0.21402947192625427}, {\"value\": 0.00876811629269322}, {\"value\": -0.4129150567496217}, {\"value\": -0.6941747443060108}, {\"value\": -1.307909344639163}, {\"value\": -1.6473629234753837}, {\"value\": -1.3904900393503026}, {\"value\": -1.2530543609215075}, {\"value\": -1.445336157715531}, {\"value\": 0.577195106515827}, {\"value\": -0.04133315335286576}, {\"value\": 1.460785081278858}, {\"value\": 1.1205754125521417}, {\"value\": -1.2522201671339868}, {\"value\": -0.40762485717180474}, {\"value\": 0.605543105108224}, {\"value\": -0.38994984543239636}, {\"value\": 1.1310589122372907}, {\"value\": -0.1061478559512132}, {\"value\": -0.4093630486608802}, {\"value\": 1.215191681567059}, {\"value\": 0.7111181245216359}, {\"value\": -1.0043535665979502}, {\"value\": 1.7022398121492588}, {\"value\": -0.30155412875468834}, {\"value\": 0.6670099231702862}, {\"value\": -0.06344813936407155}, {\"value\": 0.7632238025081919}, {\"value\": -2.293486320475528}, {\"value\": 1.3478510290601537}, {\"value\": -1.7948289853216377}, {\"value\": -0.9264702662834072}, {\"value\": -0.1843840496523749}, {\"value\": 0.9820541185567314}, {\"value\": 0.3121668130130515}, {\"value\": -1.3221209677442178}, {\"value\": 0.6513433566663976}, {\"value\": -0.15075237196310248}, {\"value\": 1.0302705882536258}, {\"value\": -0.2801851004845823}, {\"value\": -0.8929650421722308}, {\"value\": 1.288114533335586}, {\"value\": -0.9019599118095069}, {\"value\": 0.816166376362954}, {\"value\": 0.27766915045678997}, {\"value\": 2.389369886837565}, {\"value\": 1.0010519483219007}, {\"value\": -0.5961112211982396}, {\"value\": -0.06246253666125434}, {\"value\": -0.812451980262918}, {\"value\": 0.7631948255305302}, {\"value\": 0.2186805640881412}, {\"value\": -0.9126213478299496}, {\"value\": 0.4295000816922975}, {\"value\": -0.14062284383065135}, {\"value\": -0.6304354398958882}, {\"value\": 1.3502443975076919}, {\"value\": 0.7646450390515007}, {\"value\": 1.5480293873355218}, {\"value\": 0.3824571981377893}, {\"value\": -0.8881825485641538}, {\"value\": -0.8716340690048218}, {\"value\": 0.5482841107077054}, {\"value\": 0.050418104039109}, {\"value\": 0.48709262343821036}, {\"value\": -0.3960477256474213}, {\"value\": -1.0096315567713947}, {\"value\": -0.9844800869063995}, {\"value\": 2.6232211319153538}, {\"value\": -1.9412361261490476}, {\"value\": -1.1383427535223285}, {\"value\": -0.16501391182206443}, {\"value\": 1.7342620676167806}, {\"value\": 1.5824628929384141}, {\"value\": 0.33354253511595483}, {\"value\": 0.30889294041538234}, {\"value\": 1.0247808357295651}, {\"value\": 0.34467340046475087}, {\"value\": -0.3303579551449346}, {\"value\": 0.8613341202267247}, {\"value\": -0.21442925552237463}, {\"value\": -0.34694755356872803}, {\"value\": -0.6894459337559247}, {\"value\": 0.6388333825046555}, {\"value\": 0.7076291728895745}, {\"value\": 0.18915804266833078}, {\"value\": -0.8154813498901331}, {\"value\": 1.3805376553711504}, {\"value\": -1.3528097602558333}, {\"value\": -0.021584577469837867}, {\"value\": -1.2761835225783398}, {\"value\": -1.0089093364650754}, {\"value\": -0.3762777088391441}, {\"value\": 0.32060237159504046}, {\"value\": 0.27559395718670626}, {\"value\": -1.4772716761451703}, {\"value\": -0.20961324802387202}, {\"value\": -0.23338149537055733}, {\"value\": -1.0796542736506083}, {\"value\": 0.9927781529651916}, {\"value\": -0.6406467156629113}, {\"value\": -0.008374964966357533}, {\"value\": 1.452001903055463}, {\"value\": -0.5709410249752919}, {\"value\": 1.7485406789638982}, {\"value\": 0.18465331922154302}, {\"value\": -0.5932994220645069}, {\"value\": -0.20365763563819306}, {\"value\": -0.8133413509692053}, {\"value\": -0.4015192666414846}, {\"value\": -0.6411570077989932}, {\"value\": 0.05492126314445967}, {\"value\": 1.2224204949966446}, {\"value\": -0.6361495384574859}, {\"value\": -0.699279149058055}, {\"value\": 1.450189994562559}, {\"value\": 1.5101909983558548}, {\"value\": 0.09708512197648335}, {\"value\": 1.0756770128174902}, {\"value\": -0.5650026927013283}, {\"value\": -1.3900261492681294}, {\"value\": -0.3457979814713721}, {\"value\": 1.4906424212095148}, {\"value\": -1.4887779227125657}, {\"value\": -0.7020957296837265}, {\"value\": -0.5048130974368373}, {\"value\": -0.849309894106831}, {\"value\": 0.1093855904434772}, {\"value\": -0.000696965767401295}, {\"value\": -0.8963918002719147}, {\"value\": 0.00635462853617328}, {\"value\": -2.297988789826924}, {\"value\": 0.6527644733866287}, {\"value\": 0.47171024860574295}, {\"value\": 0.0812563981074093}, {\"value\": 0.9109995081095739}, {\"value\": 0.394658435504195}, {\"value\": 1.1718023435573457}, {\"value\": -0.7668909679639828}, {\"value\": -0.39153519898247185}, {\"value\": -1.386728377984098}, {\"value\": 0.9849916251671058}, {\"value\": -0.4810313110272543}, {\"value\": -0.7663077570609372}, {\"value\": 0.15954478207014092}, {\"value\": 0.8567922768469446}, {\"value\": 1.2695716107567143}, {\"value\": 0.16523083978567765}, {\"value\": 0.9269503791190511}, {\"value\": -0.141631206194111}, {\"value\": -0.8906300722631865}, {\"value\": 1.1598643417373748}, {\"value\": -0.24176342775092252}, {\"value\": 0.4690149370662646}, {\"value\": 0.7229932869668941}, {\"value\": 1.4499143926550448}, {\"value\": 0.5321239395590397}, {\"value\": 0.5485604464557254}, {\"value\": -0.002588654336069423}, {\"value\": 0.9508342095084472}, {\"value\": -2.7734466254045063}, {\"value\": -1.125152250047675}, {\"value\": 0.5972583537419714}, {\"value\": -0.8878769482465763}, {\"value\": 1.225134039588617}, {\"value\": 0.4120658388258426}, {\"value\": -0.6400323357896247}, {\"value\": 1.1424843018198803}, {\"value\": 0.3972978639276714}, {\"value\": 0.3951605982966781}, {\"value\": -1.5148055587953078}, {\"value\": -0.11151878041810917}, {\"value\": -0.2085359822693432}, {\"value\": -0.39640362233710585}, {\"value\": -0.14748132982804554}, {\"value\": -2.3218701112108113}, {\"value\": 0.8450574519182553}, {\"value\": 0.32514482419583596}, {\"value\": -0.7459927558417675}, {\"value\": 1.1533676927426781}, {\"value\": -0.18032005913332347}, {\"value\": -1.5221245706651687}, {\"value\": 1.795416612939485}, {\"value\": 0.4048314664562517}, {\"value\": -1.2181668671097645}, {\"value\": -1.0494965569346095}, {\"value\": 0.9099898289188337}, {\"value\": 1.0357521077857712}, {\"value\": 0.31655925537134805}, {\"value\": 0.02905739814689483}, {\"value\": 0.12368118042855106}, {\"value\": -0.100775607441881}, {\"value\": -1.6366797757013567}, {\"value\": 0.35798505671614994}, {\"value\": 1.5739580522823502}, {\"value\": 0.04643176029884227}, {\"value\": -0.6112569980862455}, {\"value\": -1.5353883424287602}, {\"value\": 0.0032222269216482355}, {\"value\": -1.0454602154959172}, {\"value\": -1.1039653283994084}, {\"value\": 0.08167583964826948}, {\"value\": -0.7908985832144352}, {\"value\": 0.46162061344723254}, {\"value\": -1.7923237064226636}, {\"value\": -0.3948108947134151}, {\"value\": -0.3647760616243633}, {\"value\": 0.032694954309001996}, {\"value\": -0.7328951455330984}, {\"value\": 2.2230695379507663}, {\"value\": 0.25062924770158473}, {\"value\": -0.1230282642478489}, {\"value\": 0.06238316565208086}, {\"value\": -0.9244754787470739}, {\"value\": 0.06702029450705516}, {\"value\": 0.4586500198512674}, {\"value\": 0.32027392252219344}, {\"value\": 0.2711085489060751}, {\"value\": 1.253648530864021}, {\"value\": 0.9667723805275974}, {\"value\": 0.5185957961495569}, {\"value\": 2.376057884720218}, {\"value\": -0.5136839116344715}, {\"value\": 1.632748668423751}, {\"value\": 1.9514521744284814}, {\"value\": 1.1374858841231306}, {\"value\": 1.0126601062321627}, {\"value\": -0.5464139774853652}, {\"value\": 0.24961781190236806}, {\"value\": 0.7421630577890042}, {\"value\": -1.4166675738229055}, {\"value\": 0.46374010020015966}, {\"value\": -1.6894599045719523}, {\"value\": 0.43072904521604377}, {\"value\": -0.8706729846068912}, {\"value\": -0.6900028519175812}, {\"value\": 0.26451216663495736}, {\"value\": 0.23361710783520426}, {\"value\": 0.4487593623288406}, {\"value\": 0.34155333464990284}, {\"value\": -0.6692116732932432}, {\"value\": 1.3709949184694377}, {\"value\": 0.6867936416899842}, {\"value\": -0.5293468753114992}, {\"value\": 0.10811844703413284}, {\"value\": 0.105912832303077}, {\"value\": 0.17581654676160285}, {\"value\": -0.46531371321852405}, {\"value\": 0.09327441647714214}, {\"value\": 0.4133153032855821}, {\"value\": -1.4190071004151115}, {\"value\": -1.8240381752187127}, {\"value\": 0.26382701671879055}, {\"value\": -0.315319070224593}, {\"value\": 0.7128188631394257}, {\"value\": 1.3880488502508384}, {\"value\": 3.50230321409549}, {\"value\": -1.8626782152410428}, {\"value\": 0.27111953429219116}, {\"value\": -0.6734419736790909}, {\"value\": 0.5862815410307101}, {\"value\": -1.5144448242808413}, {\"value\": -0.7364098563245729}, {\"value\": -1.3581109503109459}, {\"value\": -0.5024752901605194}, {\"value\": 0.49630744149682227}, {\"value\": 0.9980160309893079}, {\"value\": -0.09101123874432478}, {\"value\": -0.37491301691691536}, {\"value\": -0.750278312359355}, {\"value\": -1.6715835125590945}, {\"value\": 1.1361709153296036}, {\"value\": 0.7004054687873513}, {\"value\": 1.8597153768457337}, {\"value\": 0.43460794793689406}, {\"value\": -0.4179008778760716}, {\"value\": 0.8892923824220604}, {\"value\": -0.5636035966720522}, {\"value\": -0.28907079215186693}, {\"value\": -0.5538167539387617}, {\"value\": 1.7371675511795215}, {\"value\": 1.0500678480592804}, {\"value\": 1.0092786823309863}, {\"value\": 0.1885471196703287}, {\"value\": -0.2826101013757423}, {\"value\": 1.0861229622527704}, {\"value\": -0.5311750728446183}, {\"value\": 0.5127282555105334}, {\"value\": -1.2297426470106134}, {\"value\": 1.6753617899272608}, {\"value\": 0.7277933684712588}, {\"value\": -0.025470237051089358}, {\"value\": 3.1741126916000644}, {\"value\": 0.8252607422329991}, {\"value\": -0.31446329356276387}, {\"value\": -1.2431387185842389}, {\"value\": -0.8686059294524383}, {\"value\": 0.5733853392604469}, {\"value\": -1.9757498588311124}, {\"value\": -0.23364280768248896}, {\"value\": 0.23346531348808722}, {\"value\": 0.24884184911191068}, {\"value\": 1.6927732554713815}, {\"value\": 1.398821170800809}, {\"value\": 0.31386925918258757}, {\"value\": -0.05066544982231971}, {\"value\": -1.9523753779268709}, {\"value\": -0.6102139699528892}, {\"value\": 0.22386063695562186}, {\"value\": 0.6186357360093658}, {\"value\": 0.35208150256223986}, {\"value\": -0.15741768749897778}, {\"value\": 1.6953715701161245}, {\"value\": 1.0494703395221898}, {\"value\": 0.6944451818589032}, {\"value\": 0.5781060648481476}, {\"value\": 0.14899259372801707}, {\"value\": -0.053942651938616824}, {\"value\": 0.9980462925212188}, {\"value\": 0.8476013736068155}, {\"value\": -0.1316055165238455}, {\"value\": -0.6363044034978834}, {\"value\": 0.5784149236803297}, {\"value\": -0.004824506078499665}, {\"value\": 1.115371610445314}, {\"value\": -0.6591364432842085}, {\"value\": -0.4386668493933798}, {\"value\": -1.3670052741345131}, {\"value\": 0.8470069686540672}, {\"value\": 1.2370348612276107}, {\"value\": 0.20801089649495272}, {\"value\": 1.2439455508739277}, {\"value\": -1.1388185358637297}, {\"value\": -0.8155933773858057}, {\"value\": -0.4067794934391671}, {\"value\": 0.29416257243132726}, {\"value\": 1.782939362923145}, {\"value\": 0.2732297431170873}, {\"value\": -0.6396372760521065}, {\"value\": -0.3337477125542523}, {\"value\": -0.036895817196104935}, {\"value\": -2.2513543974531296}, {\"value\": -0.09207792441435445}, {\"value\": -2.707551542404758}, {\"value\": -0.4501930547155483}, {\"value\": 0.786372522149813}, {\"value\": -1.0319067916947615}, {\"value\": -0.20759988555775458}, {\"value\": -0.11479608238025453}, {\"value\": 0.27593876709405957}, {\"value\": -0.9859743702698138}, {\"value\": 0.5142576923125571}, {\"value\": 0.14703406660571575}, {\"value\": -0.8711234496656383}, {\"value\": -0.3582017006997673}, {\"value\": -0.2909145792935891}, {\"value\": -0.7984115380236113}, {\"value\": 0.1955882885117453}, {\"value\": -0.40082717983499877}, {\"value\": -1.8237402323116587}, {\"value\": 0.8937987702746873}, {\"value\": -0.8579911496386163}, {\"value\": -0.9448111588169867}, {\"value\": -1.6564103791877258}, {\"value\": -0.6085492309405723}, {\"value\": -0.5185999872888244}, {\"value\": 2.494214142729014}, {\"value\": -1.0021170810277273}, {\"value\": 1.9795066015196745}, {\"value\": 1.304074822183234}, {\"value\": -1.834608128523619}, {\"value\": 0.7453502510221099}, {\"value\": -0.48757953298697687}, {\"value\": -1.2396244507711691}, {\"value\": 0.22664071830498234}, {\"value\": 0.06688466508681767}, {\"value\": 0.7735555441464953}, {\"value\": 0.778152238670649}, {\"value\": 0.5327210507780277}, {\"value\": -0.15834981769542347}, {\"value\": -2.3007300666782387}, {\"value\": -0.03445604211459157}, {\"value\": 0.2654665064377659}, {\"value\": -2.179405830712184}, {\"value\": -0.7619936652690112}, {\"value\": 0.6758604829418602}, {\"value\": 0.9840230012205622}, {\"value\": 0.5155883824258041}, {\"value\": 1.9757286268273984}, {\"value\": -0.019612941709517145}, {\"value\": 1.4575975597042308}, {\"value\": 0.7342932356688171}, {\"value\": 0.12407795171799481}, {\"value\": 1.3792886786682312}, {\"value\": -1.6283203895675828}, {\"value\": 0.7106137198564676}, {\"value\": 0.10350928141796882}, {\"value\": 0.9309648555961726}, {\"value\": 1.357251539960289}, {\"value\": 2.358675296383744}, {\"value\": 1.250611285301375}, {\"value\": -0.9925664935618917}, {\"value\": 1.4043047144601128}, {\"value\": 1.037332052761968}, {\"value\": 1.272569457794181}, {\"value\": 1.1300622405703726}, {\"value\": 1.7514613335368026}, {\"value\": 0.4808062143302769}, {\"value\": -1.1696651493346815}, {\"value\": 0.24423907110117443}, {\"value\": -0.027960750505339183}, {\"value\": 0.8191223564115093}, {\"value\": 0.38940980891190957}, {\"value\": 0.039252703778877775}, {\"value\": 1.3815349446230927}, {\"value\": -0.2780389922707026}, {\"value\": -0.06524192973950163}, {\"value\": 1.1105677065113477}, {\"value\": -0.6007049577305221}, {\"value\": 0.20800537089442844}, {\"value\": -0.12105129425992728}, {\"value\": -1.5930155669370691}, {\"value\": -1.4845209746877137}, {\"value\": 0.7281980045849377}, {\"value\": -0.10279048143547069}, {\"value\": 0.3236301782584003}, {\"value\": -0.463182257582499}, {\"value\": 0.21796677190623942}, {\"value\": -0.014007526996505398}, {\"value\": 1.5298368218673388}, {\"value\": -0.8713222583131428}, {\"value\": -1.4122205584000735}, {\"value\": -1.3085339075623335}, {\"value\": -0.7833321593560866}, {\"value\": -1.28188443983082}, {\"value\": 0.5343324272462177}, {\"value\": -0.4637860051803917}, {\"value\": 1.0372711440475089}, {\"value\": 0.9703272778974507}, {\"value\": -0.2981263806808414}, {\"value\": 1.7539383521776346}, {\"value\": -0.23949886883361834}, {\"value\": 0.8601776302789242}, {\"value\": 1.3516839470877418}, {\"value\": -1.2549946819782807}, {\"value\": 0.4532894549767996}, {\"value\": -0.38744317302772563}, {\"value\": -0.18088833634626386}, {\"value\": 0.7311577284571076}, {\"value\": -0.3255285091898519}, {\"value\": -0.7906619829269863}, {\"value\": -0.04779644169252249}, {\"value\": -0.3480550851143181}, {\"value\": 1.6305387410605745}, {\"value\": -1.3760271358706275}, {\"value\": 0.30650472339950147}, {\"value\": -0.6213158321918558}, {\"value\": -0.8238217215520092}, {\"value\": 0.5595245150659642}, {\"value\": -1.3514865061349093}, {\"value\": 0.6853149176866781}, {\"value\": 0.7768204307486692}, {\"value\": -0.6032614490503055}, {\"value\": -1.924378243413189}, {\"value\": -0.21379998147809612}, {\"value\": -0.25969555351345747}, {\"value\": -0.7813845815248202}, {\"value\": 0.5999762720324374}, {\"value\": -1.3764174528817574}, {\"value\": -1.503995860526548}, {\"value\": 0.3393360716624221}, {\"value\": 0.3820568621575692}, {\"value\": 0.40274590361343277}, {\"value\": 0.12336162812742697}, {\"value\": -0.21014776529028953}, {\"value\": -0.4497518625976474}, {\"value\": 0.8321349020486443}, {\"value\": -0.7645400876155143}, {\"value\": 1.9997209036782175}, {\"value\": -0.326387835765223}, {\"value\": -2.051685931911742}, {\"value\": 1.0149714115052126}, {\"value\": -1.035223529670347}, {\"value\": -1.1418113266606964}, {\"value\": -0.4727797470466574}, {\"value\": -1.267345834068764}, {\"value\": -0.08735908942048232}, {\"value\": 0.9882878282881418}, {\"value\": -0.3956765210408363}, {\"value\": -0.7363131348859773}, {\"value\": -2.941467794663169}, {\"value\": -0.8507320704981588}, {\"value\": 0.47919447619551864}, {\"value\": 1.3199299845336203}, {\"value\": 0.11674322098379858}, {\"value\": -1.4308016146642275}, {\"value\": 0.2679715648768689}, {\"value\": 1.281028319606094}, {\"value\": -0.18543336712210753}, {\"value\": 0.2225291930520607}, {\"value\": -0.9666282461028816}, {\"value\": -0.7190731974688882}, {\"value\": -1.3182274720297384}, {\"value\": 0.4894136624254944}, {\"value\": -0.6277095230793017}, {\"value\": 0.18976134381109772}, {\"value\": -0.8397823598524338}, {\"value\": -0.800085821463743}, {\"value\": -1.7488222293913485}, {\"value\": -0.32140304028466365}, {\"value\": -0.8243998139905802}, {\"value\": -0.9348992220419027}, {\"value\": 0.9768230720562674}, {\"value\": 0.41101082860697324}, {\"value\": -0.41805308968589666}, {\"value\": -0.29830436495573615}, {\"value\": 0.7696729973079157}, {\"value\": 0.6678084467038181}, {\"value\": -0.7496242942039232}, {\"value\": -0.6462140648700566}, {\"value\": -0.5077706008267916}, {\"value\": -1.8938920583633478}, {\"value\": -0.6100184101421582}, {\"value\": -0.902828905926663}, {\"value\": -0.09417437349868041}, {\"value\": 0.3026262048135712}, {\"value\": 1.2495995487021985}, {\"value\": 0.9543038793532344}, {\"value\": -1.6943477066829093}, {\"value\": -1.7651261287949562}, {\"value\": -0.1472280998192086}, {\"value\": 0.2931988373283091}, {\"value\": -0.4702696216430178}, {\"value\": -0.5978488238303493}, {\"value\": -0.16338762655201683}, {\"value\": 0.7809178766206021}, {\"value\": 0.8528602992682995}, {\"value\": 0.5682573908449742}, {\"value\": -1.4493082494881633}, {\"value\": -0.9891397654584599}, {\"value\": -1.248778698716599}, {\"value\": -1.2523777264566418}, {\"value\": -1.2216014977431586}, {\"value\": -2.3892351989707215}, {\"value\": 0.7198607251409177}, {\"value\": 1.4849338110344472}, {\"value\": -0.6972344426245614}, {\"value\": 0.4402533636449667}, {\"value\": 1.0832224260043903}, {\"value\": 1.7692214599273137}, {\"value\": -0.32287098595801156}, {\"value\": -0.10899686534570337}, {\"value\": -1.5256552484225352}, {\"value\": -1.1279621568303622}, {\"value\": -0.620461979273801}, {\"value\": 1.5138248689332077}, {\"value\": 0.8481500919815748}, {\"value\": -1.416744088859954}, {\"value\": 0.930855349320467}, {\"value\": 0.3124684142817955}, {\"value\": -0.8404803390564265}, {\"value\": 0.420790507623028}, {\"value\": 1.3996086555069138}, {\"value\": 0.7555076149910405}, {\"value\": 0.27622480636784863}, {\"value\": -0.44045964981121216}, {\"value\": -0.02598104641929411}, {\"value\": 1.2643293256274601}, {\"value\": -0.8324767659961765}, {\"value\": 0.4395868942112586}, {\"value\": -0.053015244267773445}, {\"value\": -0.15231617700597225}, {\"value\": -2.4076117475324113}, {\"value\": 0.4445741195215521}, {\"value\": -0.12809046389453713}, {\"value\": -0.79230491258417}, {\"value\": -0.44325630944851324}, {\"value\": -0.39927705202330005}, {\"value\": -0.5879588449085372}, {\"value\": -0.5467011746858259}, {\"value\": 1.7463706643647077}, {\"value\": -0.5796640907520084}, {\"value\": 0.925254626668128}, {\"value\": 0.6735332186244779}, {\"value\": 0.9521507974202252}, {\"value\": 1.5330976278377944}, {\"value\": 0.9129055345753607}, {\"value\": -0.3440923308099964}, {\"value\": -2.274904182734279}, {\"value\": 0.7620081989803694}, {\"value\": 0.16309722312732705}, {\"value\": 0.7312332966958693}, {\"value\": -0.10606505606749181}, {\"value\": -0.4940593794820567}, {\"value\": 0.05152112704407464}, {\"value\": -1.241678321743033}, {\"value\": 1.4187225039401312}, {\"value\": 1.6142928061761883}, {\"value\": 0.6815587871383219}, {\"value\": 0.040578312954558084}, {\"value\": -0.20541544672202042}, {\"value\": 0.24763974645067224}, {\"value\": 0.18969990989187777}, {\"value\": 1.0705212302519627}, {\"value\": 1.350289233365942}, {\"value\": -1.001376263802766}, {\"value\": 1.0009223208948355}, {\"value\": 1.1947539128103728}, {\"value\": -0.6396789537653864}, {\"value\": 1.6166750735159097}, {\"value\": -1.2390874525399829}, {\"value\": 0.5614680483440232}, {\"value\": -0.19821771319997614}, {\"value\": 1.0767917611724338}, {\"value\": 0.20173445235613133}, {\"value\": -0.48980616866720467}, {\"value\": 0.6795493595861303}, {\"value\": 0.4713111136436148}, {\"value\": -0.4447604965181421}, {\"value\": 0.030204496763861898}, {\"value\": 2.110757424496858}, {\"value\": -0.13791829252123594}, {\"value\": 0.4920944943465043}, {\"value\": -0.3410102519488203}, {\"value\": -1.382800413603739}, {\"value\": -0.30932142910828825}, {\"value\": -0.9078929809676382}, {\"value\": 0.09370184334421833}, {\"value\": 0.6151195743891584}, {\"value\": -1.0875384600021656}, {\"value\": 0.6263093038631339}, {\"value\": -1.0669326672139243}, {\"value\": 0.5539924152882907}, {\"value\": -0.3410721254509954}, {\"value\": -0.40876996954132455}, {\"value\": -0.701940175866128}, {\"value\": 0.08428774594545117}, {\"value\": -0.7657001113679512}, {\"value\": 0.44975613042618806}, {\"value\": 0.6918363948155144}, {\"value\": 0.3927795037198908}, {\"value\": -1.3323971524090084}, {\"value\": 0.398523045402097}, {\"value\": -0.8907780262569672}, {\"value\": -0.7829373098718662}, {\"value\": -1.0821959779434525}, {\"value\": 0.5343485973568646}, {\"value\": -0.17362798245973698}, {\"value\": 0.0005607289312429081}, {\"value\": -0.7119286615168597}, {\"value\": 0.6594614925714309}, {\"value\": 1.0712344526699449}, {\"value\": 0.2415369102897041}, {\"value\": -0.7039854833788004}, {\"value\": -0.6908816585716552}, {\"value\": 0.9399085562331162}, {\"value\": 0.0047499055118754765}, {\"value\": 0.9337382044362051}, {\"value\": -0.5134794702298193}, {\"value\": 0.5530629620693963}, {\"value\": 0.17377681049071517}, {\"value\": -0.6505734480444986}, {\"value\": -0.19000109094351367}, {\"value\": 0.1331456993556844}, {\"value\": -1.653553807429286}, {\"value\": 0.10639658620570727}, {\"value\": -0.3920987671358373}, {\"value\": -2.574264320345927}, {\"value\": 0.42281908744738916}, {\"value\": -0.21634479276350954}, {\"value\": 0.21409131614044666}, {\"value\": -0.512667356555613}, {\"value\": 0.16024521868535538}, {\"value\": 0.8196032136718125}, {\"value\": -0.18637776172247775}, {\"value\": -0.32417906778844874}, {\"value\": -0.5294803804951095}, {\"value\": -0.8305403845416176}, {\"value\": 0.33589649868062027}, {\"value\": 1.1746853000776103}, {\"value\": -0.49462469939479004}, {\"value\": 1.8762839411403642}, {\"value\": 0.3374148994359959}, {\"value\": -0.9633869588772247}, {\"value\": -0.4310051494751192}, {\"value\": 1.7002098285391993}, {\"value\": -1.1062212180871316}, {\"value\": -0.5451245751315699}, {\"value\": -0.2038322402197152}, {\"value\": -0.2600503758685963}, {\"value\": -0.6080173653512018}, {\"value\": -0.13485457669130804}, {\"value\": -0.5159370096272319}, {\"value\": 0.4967203948833146}, {\"value\": 0.41840030623448854}, {\"value\": -1.4008368417381796}, {\"value\": -1.8835010570674409}, {\"value\": 0.614267744293504}, {\"value\": 0.47476079944228183}, {\"value\": 0.17291987200131576}, {\"value\": 1.0180337656174925}, {\"value\": -1.6385601930982192}, {\"value\": 0.8363718745796082}, {\"value\": 0.053135825872281696}, {\"value\": -0.3158566614514368}, {\"value\": -1.723672807656932}, {\"value\": -0.2937128621644832}, {\"value\": -0.17360985554036182}, {\"value\": 0.02467847198231023}, {\"value\": -1.5368536841832598}, {\"value\": 1.7503504722228624}, {\"value\": -0.039723775509627864}, {\"value\": -1.0397925244523065}, {\"value\": -1.5724589862278775}, {\"value\": 1.0270114420082248}, {\"value\": 0.337583738770927}, {\"value\": -3.160914114648869}, {\"value\": 0.9365252624646426}, {\"value\": -0.27126885498339737}, {\"value\": -0.7771822640841148}, {\"value\": 0.04580707592767405}, {\"value\": -0.2240527310098155}, {\"value\": 0.7971818681573096}, {\"value\": 0.4422988141350037}, {\"value\": -0.780486839054951}, {\"value\": -0.06919670319054862}, {\"value\": -1.254201561925734}, {\"value\": -0.46957688837352796}, {\"value\": -0.1645304782556762}, {\"value\": -0.46447905074731516}, {\"value\": 1.4782430921558785}, {\"value\": -0.6855839850367429}, {\"value\": -0.46439084124786084}, {\"value\": -0.6182898723308503}, {\"value\": 2.0234801404099763}, {\"value\": -1.3409298236947638}, {\"value\": -1.1620357395157452}, {\"value\": 1.1666624772171388}, {\"value\": -0.5942754902811441}, {\"value\": -0.4319451586371472}, {\"value\": -1.1064960239908157}, {\"value\": 0.2690668073668864}, {\"value\": -1.1377716714605242}, {\"value\": 0.8917358545622075}, {\"value\": 1.2362138870349315}, {\"value\": 1.3541044018752857}, {\"value\": 0.8390653164458893}, {\"value\": -0.6131053009473246}, {\"value\": 0.8915510680474498}, {\"value\": -1.3430985342300374}, {\"value\": 0.3978149031768297}, {\"value\": -0.9505010511090727}, {\"value\": 0.00151445366808135}, {\"value\": 1.9154751803919132}, {\"value\": -0.9274536347096631}, {\"value\": 1.1373838049814857}, {\"value\": -0.5339750592466064}, {\"value\": 1.427721282211102}, {\"value\": 0.20552776256395827}, {\"value\": 0.35889369312522995}, {\"value\": -1.382859510887347}, {\"value\": 0.18758669860785623}, {\"value\": 0.8181140564723591}, {\"value\": 0.6764005873910591}, {\"value\": -1.5791895150668172}, {\"value\": 0.27822557726750446}, {\"value\": 0.7105883342202857}, {\"value\": -0.38241062171208834}, {\"value\": -0.8946400362395289}, {\"value\": 0.5569244024126685}, {\"value\": -0.4270661374749763}, {\"value\": -0.12103465609884978}, {\"value\": -0.44245081161092964}, {\"value\": 0.4609834163782413}, {\"value\": 0.8986225061179935}, {\"value\": -1.814508887091448}, {\"value\": -1.0155988338930952}, {\"value\": -0.3331174706562696}, {\"value\": 0.3028361670892579}, {\"value\": 0.1604508045730895}, {\"value\": -0.03292885665177021}, {\"value\": 1.9342094878917235}, {\"value\": -0.11081342165325583}, {\"value\": -2.1485453717595133}, {\"value\": -0.29139748327921416}, {\"value\": -0.16890081216977326}, {\"value\": 0.4523503045137678}, {\"value\": 1.6292492371122573}, {\"value\": 0.9705398520586542}, {\"value\": -1.3937204183694367}, {\"value\": 0.3027905655908472}, {\"value\": 0.31614239585816056}, {\"value\": 0.014044553149985525}, {\"value\": 0.7763787587176241}, {\"value\": 0.21635914664199693}, {\"value\": 0.6157509885705316}, {\"value\": 0.6056654905951575}, {\"value\": 0.4009277529805045}, {\"value\": -0.605332259325357}, {\"value\": 2.619688360487376}, {\"value\": -0.12266243957102953}, {\"value\": 0.09332892869065756}, {\"value\": -1.1488007223366363}, {\"value\": -0.013278254543544433}, {\"value\": 0.6105721547225834}, {\"value\": 1.3183352508281674}, {\"value\": -0.516676353891088}, {\"value\": -1.7875918705786842}, {\"value\": -0.8391201084079318}, {\"value\": -0.7474547379267737}, {\"value\": -1.2018999179126262}, {\"value\": 0.05223890978017469}, {\"value\": -1.6759850249453367}, {\"value\": -0.6295920016816434}, {\"value\": 0.3735775582211326}, {\"value\": 0.8173948836614523}, {\"value\": 2.8825961370930044}, {\"value\": -0.45132655321000453}, {\"value\": 0.4564560494372593}, {\"value\": 0.29544826291147985}, {\"value\": 0.877017327699963}, {\"value\": 0.6317870770656886}, {\"value\": 1.9367849508335695}, {\"value\": -0.32119518960751553}, {\"value\": -1.1740110952714682}, {\"value\": -0.6537919536575182}, {\"value\": 0.5717354782919406}, {\"value\": 2.691645656772746}, {\"value\": 1.9492439555197398}, {\"value\": 0.3393493292636278}, {\"value\": -0.776107474884485}, {\"value\": -2.5469675019889433}, {\"value\": 1.5172259465413667}, {\"value\": 0.6486450231911919}, {\"value\": 0.5928148152966248}, {\"value\": 0.1654586426458774}, {\"value\": -0.18872123710510763}, {\"value\": 1.0137926044502579}, {\"value\": -0.9016577269338764}, {\"value\": 1.1256242458446906}, {\"value\": 0.33643036965958345}, {\"value\": -1.6018355334193886}, {\"value\": -0.3561591826338692}, {\"value\": -0.6631005602705123}, {\"value\": 0.29573006459110274}, {\"value\": -1.310538908729173}, {\"value\": 1.406201986711829}, {\"value\": -0.2495010724138174}, {\"value\": -1.7623445611773556}, {\"value\": -0.1662876412879573}, {\"value\": 1.7811189738328561}, {\"value\": 0.5243855168797584}, {\"value\": -0.9149386773288839}, {\"value\": 1.326922042100733}, {\"value\": 1.0196174737345531}, {\"value\": 1.0188040540154706}, {\"value\": -0.6921657183768516}, {\"value\": -0.13927694823355533}, {\"value\": -0.7402835780722726}, {\"value\": -0.26465108497253287}, {\"value\": 0.3878301441659343}, {\"value\": 1.1444838725675728}, {\"value\": 0.6702562954746797}, {\"value\": -0.7424053657415116}, {\"value\": -2.2853425401292142}, {\"value\": -1.3995704705448706}, {\"value\": 1.0398314666401154}, {\"value\": 0.6530262303193038}, {\"value\": -1.092940567689228}, {\"value\": -0.8504084782788723}, {\"value\": 1.249379704795149}, {\"value\": 0.4137542186847333}, {\"value\": 1.6222787988848766}, {\"value\": -0.6724927892570691}, {\"value\": 0.4294637316019676}, {\"value\": 0.9463303590630696}, {\"value\": -0.2541896814174152}, {\"value\": 1.037008993724682}, {\"value\": -1.7407328945822114}, {\"value\": 0.3922849854615309}, {\"value\": -0.4857998959628791}, {\"value\": 2.674387435070836}, {\"value\": -0.9206095557589028}, {\"value\": 0.11185250971976098}, {\"value\": 0.03309434123423961}, {\"value\": 1.0953462175093505}, {\"value\": -0.9606649398783682}, {\"value\": 0.15323616135801824}, {\"value\": 1.3031477760042218}, {\"value\": 0.4410349905629077}, {\"value\": -1.4416602280886586}, {\"value\": -0.4513983203592405}, {\"value\": -0.9322111191751732}, {\"value\": -0.4234261804082757}, {\"value\": 0.7462282087834713}, {\"value\": -1.4218728575067394}, {\"value\": -0.22438407434828778}, {\"value\": 0.5107293402498371}, {\"value\": -1.167925025492197}, {\"value\": 1.853877181511921}, {\"value\": 1.500784902829313}, {\"value\": 0.3856192321214238}, {\"value\": 0.9174321726313753}, {\"value\": 0.9884108696662962}, {\"value\": 0.12892208152221366}, {\"value\": 0.32569888001805924}, {\"value\": -1.449559501185433}, {\"value\": 0.3775000758921656}, {\"value\": -1.4276404664756037}, {\"value\": -0.5990334971058524}, {\"value\": 0.12306482132551369}, {\"value\": 1.4407175512179482}, {\"value\": 1.5857975858181481}, {\"value\": 0.1770482417152949}, {\"value\": 0.12837034486922144}, {\"value\": -1.2376452583761333}, {\"value\": -0.4051511163011075}, {\"value\": -0.5392854632574828}, {\"value\": 0.10495571059361865}, {\"value\": 1.217534452717239}, {\"value\": -0.49471028293305946}, {\"value\": 1.1459179290431738}, {\"value\": 0.16918534605116778}, {\"value\": 2.0181378798034446}, {\"value\": 0.005428297881479554}, {\"value\": 1.530486546090087}, {\"value\": 1.5082262058977034}, {\"value\": 0.1619982312407978}, {\"value\": 0.6756158551971588}, {\"value\": 0.9733942444737492}, {\"value\": -1.339431815498911}, {\"value\": -0.16200140004242447}, {\"value\": 0.15311329072179025}, {\"value\": -1.0844306865533029}, {\"value\": -0.14710886127703007}, {\"value\": 1.0602890283032733}, {\"value\": -0.029903877446752637}, {\"value\": -1.3907032401725987}, {\"value\": -0.19733775854463365}, {\"value\": 0.1269520543515618}, {\"value\": 1.2053649459253402}, {\"value\": 1.2134426140668273}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Line Plot\n\n**Matplotlib:**\n\n::: {#90126133 .cell execution_count=10}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nplt.figure(figsize=(10, 6))\nplt.plot(x, y1, label='Sine')\nplt.plot(x, y2, label='Cosine')\nplt.title('Matplotlib Line Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){width=833 height=529}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#60694362 .cell execution_count=11}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nx = np.linspace(0, 10, 100)\ndata = pd.DataFrame({\n    'x': np.concatenate([x, x]),\n    'y': np.concatenate([np.sin(x), np.cos(x)]),\n    'function': ['Sine']*100 + ['Cosine']*100\n})\n\nsns.set_theme(style=\"darkgrid\")\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=data, x='x', y='y', hue='function')\nplt.title('Seaborn Line Plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){width=833 height=529}\n:::\n:::\n\n\n**Altair:**\n\n::: {#0b91b86a .cell execution_count=12}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ndata = pd.DataFrame({\n    'x': np.concatenate([x, x]),\n    'y': np.concatenate([np.sin(x), np.cos(x)]),\n    'function': ['Sine']*100 + ['Cosine']*100\n})\n\nalt.Chart(data).mark_line().encode(\n    x='x',\n    y='y',\n    color='function'\n).properties(\n    width=600,\n    height=400,\n    title='Altair Line Plot'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n\n<style>\n  #altair-viz-933acf19df174cbf843de7a88198909d.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-933acf19df174cbf843de7a88198909d.vega-embed details,\n  #altair-viz-933acf19df174cbf843de7a88198909d.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-933acf19df174cbf843de7a88198909d\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-933acf19df174cbf843de7a88198909d\") {\n      outputDiv = document.getElementById(\"altair-viz-933acf19df174cbf843de7a88198909d\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-315314b1d744b307a4c6f023712ccc9d\"}, \"mark\": {\"type\": \"line\"}, \"encoding\": {\"color\": {\"field\": \"function\", \"type\": \"nominal\"}, \"x\": {\"field\": \"x\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"y\", \"type\": \"quantitative\"}}, \"height\": 400, \"title\": \"Altair Line Plot\", \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-315314b1d744b307a4c6f023712ccc9d\": [{\"x\": 0.0, \"y\": 0.0, \"function\": \"Sine\"}, {\"x\": 0.10101010101010101, \"y\": 0.1008384202581046, \"function\": \"Sine\"}, {\"x\": 0.20202020202020202, \"y\": 0.2006488565226854, \"function\": \"Sine\"}, {\"x\": 0.30303030303030304, \"y\": 0.2984138044476411, \"function\": \"Sine\"}, {\"x\": 0.40404040404040403, \"y\": 0.3931366121483298, \"function\": \"Sine\"}, {\"x\": 0.5050505050505051, \"y\": 0.48385164043793466, \"function\": \"Sine\"}, {\"x\": 0.6060606060606061, \"y\": 0.5696341069089657, \"function\": \"Sine\"}, {\"x\": 0.7070707070707071, \"y\": 0.6496095135057065, \"function\": \"Sine\"}, {\"x\": 0.8080808080808081, \"y\": 0.7229625614794605, \"function\": \"Sine\"}, {\"x\": 0.9090909090909091, \"y\": 0.7889454628442574, \"function\": \"Sine\"}, {\"x\": 1.0101010101010102, \"y\": 0.8468855636029834, \"function\": \"Sine\"}, {\"x\": 1.1111111111111112, \"y\": 0.8961922010299563, \"function\": \"Sine\"}, {\"x\": 1.2121212121212122, \"y\": 0.9363627251042848, \"function\": \"Sine\"}, {\"x\": 1.3131313131313131, \"y\": 0.9669876227092996, \"function\": \"Sine\"}, {\"x\": 1.4141414141414141, \"y\": 0.9877546923600838, \"function\": \"Sine\"}, {\"x\": 1.5151515151515151, \"y\": 0.9984522269003895, \"function\": \"Sine\"}, {\"x\": 1.6161616161616161, \"y\": 0.9989711717233568, \"function\": \"Sine\"}, {\"x\": 1.7171717171717171, \"y\": 0.9893062365143401, \"function\": \"Sine\"}, {\"x\": 1.8181818181818181, \"y\": 0.9695559491823237, \"function\": \"Sine\"}, {\"x\": 1.9191919191919191, \"y\": 0.9399216514301312, \"function\": \"Sine\"}, {\"x\": 2.0202020202020203, \"y\": 0.9007054462029555, \"function\": \"Sine\"}, {\"x\": 2.121212121212121, \"y\": 0.8523071179396752, \"function\": \"Sine\"}, {\"x\": 2.2222222222222223, \"y\": 0.7952200570230491, \"function\": \"Sine\"}, {\"x\": 2.323232323232323, \"y\": 0.7300262299764464, \"function\": \"Sine\"}, {\"x\": 2.4242424242424243, \"y\": 0.6573902466827755, \"function\": \"Sine\"}, {\"x\": 2.525252525252525, \"y\": 0.5780525851065732, \"function\": \"Sine\"}, {\"x\": 2.6262626262626263, \"y\": 0.4928220425889235, \"function\": \"Sine\"}, {\"x\": 2.727272727272727, \"y\": 0.40256749066949654, \"function\": \"Sine\"}, {\"x\": 2.8282828282828283, \"y\": 0.30820901749007684, \"function\": \"Sine\"}, {\"x\": 2.929292929292929, \"y\": 0.2107085480771929, \"function\": \"Sine\"}, {\"x\": 3.0303030303030303, \"y\": 0.11106003812412972, \"function\": \"Sine\"}, {\"x\": 3.131313131313131, \"y\": 0.010279341240534697, \"function\": \"Sine\"}, {\"x\": 3.2323232323232323, \"y\": -0.09060614703340773, \"function\": \"Sine\"}, {\"x\": 3.3333333333333335, \"y\": -0.19056796287548539, \"function\": \"Sine\"}, {\"x\": 3.4343434343434343, \"y\": -0.28858705872043244, \"function\": \"Sine\"}, {\"x\": 3.5353535353535355, \"y\": -0.38366419180611233, \"function\": \"Sine\"}, {\"x\": 3.6363636363636362, \"y\": -0.47483011082223947, \"function\": \"Sine\"}, {\"x\": 3.7373737373737375, \"y\": -0.5611554368152017, \"function\": \"Sine\"}, {\"x\": 3.8383838383838382, \"y\": -0.6417601376193878, \"function\": \"Sine\"}, {\"x\": 3.9393939393939394, \"y\": -0.7158224992291902, \"function\": \"Sine\"}, {\"x\": 4.040404040404041, \"y\": -0.7825875026542022, \"function\": \"Sine\"}, {\"x\": 4.141414141414141, \"y\": -0.8413745208608701, \"function\": \"Sine\"}, {\"x\": 4.242424242424242, \"y\": -0.8915842573351402, \"function\": \"Sine\"}, {\"x\": 4.343434343434343, \"y\": -0.9327048555318336, \"function\": \"Sine\"}, {\"x\": 4.444444444444445, \"y\": -0.9643171169287782, \"function\": \"Sine\"}, {\"x\": 4.545454545454545, \"y\": -0.9860987744909296, \"function\": \"Sine\"}, {\"x\": 4.646464646464646, \"y\": -0.9978277779792126, \"function\": \"Sine\"}, {\"x\": 4.747474747474747, \"y\": -0.9993845576124357, \"function\": \"Sine\"}, {\"x\": 4.848484848484849, \"y\": -0.9907532430056771, \"function\": \"Sine\"}, {\"x\": 4.94949494949495, \"y\": -0.9720218249588334, \"function\": \"Sine\"}, {\"x\": 5.05050505050505, \"y\": -0.9433812584459996, \"function\": \"Sine\"}, {\"x\": 5.151515151515151, \"y\": -0.9051235159501367, \"function\": \"Sine\"}, {\"x\": 5.252525252525253, \"y\": -0.8576386109880517, \"function\": \"Sine\"}, {\"x\": 5.353535353535354, \"y\": -0.8014106221689696, \"function\": \"Sine\"}, {\"x\": 5.454545454545454, \"y\": -0.7370127583189133, \"function\": \"Sine\"}, {\"x\": 5.555555555555555, \"y\": -0.6651015149788224, \"function\": \"Sine\"}, {\"x\": 5.656565656565657, \"y\": -0.5864099818472351, \"function\": \"Sine\"}, {\"x\": 5.757575757575758, \"y\": -0.5017403693939113, \"function\": \"Sine\"}, {\"x\": 5.858585858585858, \"y\": -0.4119558308308628, \"function\": \"Sine\"}, {\"x\": 5.959595959595959, \"y\": -0.31797166281061867, \"function\": \"Sine\"}, {\"x\": 6.0606060606060606, \"y\": -0.22074597455506334, \"function\": \"Sine\"}, {\"x\": 6.161616161616162, \"y\": -0.12126992053716677, \"function\": \"Sine\"}, {\"x\": 6.262626262626262, \"y\": -0.020557596287260064, \"function\": \"Sine\"}, {\"x\": 6.363636363636363, \"y\": 0.08036429967028173, \"function\": \"Sine\"}, {\"x\": 6.4646464646464645, \"y\": 0.18046693235991093, \"function\": \"Sine\"}, {\"x\": 6.565656565656566, \"y\": 0.27872981867755725, \"function\": \"Sine\"}, {\"x\": 6.666666666666667, \"y\": 0.37415123057121996, \"function\": \"Sine\"}, {\"x\": 6.767676767676767, \"y\": 0.4657584070256517, \"function\": \"Sine\"}, {\"x\": 6.8686868686868685, \"y\": 0.5526174707464059, \"function\": \"Sine\"}, {\"x\": 6.96969696969697, \"y\": 0.6338429484489058, \"function\": \"Sine\"}, {\"x\": 7.070707070707071, \"y\": 0.7086067976992182, \"function\": \"Sine\"}, {\"x\": 7.171717171717171, \"y\": 0.7761468482835805, \"function\": \"Sine\"}, {\"x\": 7.2727272727272725, \"y\": 0.8357745720522589, \"function\": \"Sine\"}, {\"x\": 7.373737373737374, \"y\": 0.8868821020290788, \"function\": \"Sine\"}, {\"x\": 7.474747474747475, \"y\": 0.9289484292312513, \"function\": \"Sine\"}, {\"x\": 7.575757575757575, \"y\": 0.9615447140268235, \"function\": \"Sine\"}, {\"x\": 7.6767676767676765, \"y\": 0.9843386578838236, \"function\": \"Sine\"}, {\"x\": 7.777777777777778, \"y\": 0.9970978909438748, \"function\": \"Sine\"}, {\"x\": 7.878787878787879, \"y\": 0.9996923408861117, \"function\": \"Sine\"}, {\"x\": 7.979797979797979, \"y\": 0.9920955589323228, \"function\": \"Sine\"}, {\"x\": 8.080808080808081, \"y\": 0.9743849894755358, \"function\": \"Sine\"}, {\"x\": 8.181818181818182, \"y\": 0.9467411805833543, \"function\": \"Sine\"}, {\"x\": 8.282828282828282, \"y\": 0.9094459434244625, \"function\": \"Sine\"}, {\"x\": 8.383838383838384, \"y\": 0.8628794793817834, \"function\": \"Sine\"}, {\"x\": 8.484848484848484, \"y\": 0.8075165041395626, \"function\": \"Sine\"}, {\"x\": 8.585858585858587, \"y\": 0.7439214082568444, \"function\": \"Sine\"}, {\"x\": 8.686868686868687, \"y\": 0.6727425035622647, \"function\": \"Sine\"}, {\"x\": 8.787878787878787, \"y\": 0.5947054140244975, \"function\": \"Sine\"}, {\"x\": 8.88888888888889, \"y\": 0.510605678474283, \"function\": \"Sine\"}, {\"x\": 8.98989898989899, \"y\": 0.4213006405886069, \"function\": \"Sine\"}, {\"x\": 9.09090909090909, \"y\": 0.32770070881349983, \"function\": \"Sine\"}, {\"x\": 9.191919191919192, \"y\": 0.23076007532505177, \"function\": \"Sine\"}, {\"x\": 9.292929292929292, \"y\": 0.13146698864295842, \"function\": \"Sine\"}, {\"x\": 9.393939393939394, \"y\": 0.03083367906114098, \"function\": \"Sine\"}, {\"x\": 9.494949494949495, \"y\": -0.07011396040064677, \"function\": \"Sine\"}, {\"x\": 9.595959595959595, \"y\": -0.1703468323280965, \"function\": \"Sine\"}, {\"x\": 9.696969696969697, \"y\": -0.26884312591038406, \"function\": \"Sine\"}, {\"x\": 9.797979797979798, \"y\": -0.3645987336558887, \"function\": \"Sine\"}, {\"x\": 9.8989898989899, \"y\": -0.45663748763377376, \"function\": \"Sine\"}, {\"x\": 10.0, \"y\": -0.5440211108893698, \"function\": \"Sine\"}, {\"x\": 0.0, \"y\": 1.0, \"function\": \"Cosine\"}, {\"x\": 0.10101010101010101, \"y\": 0.9949028158568303, \"function\": \"Cosine\"}, {\"x\": 0.20202020202020202, \"y\": 0.9796632259996998, \"function\": \"Cosine\"}, {\"x\": 0.30303030303030304, \"y\": 0.9544365884201449, \"function\": \"Cosine\"}, {\"x\": 0.40404040404040403, \"y\": 0.9194800727522776, \"function\": \"Cosine\"}, {\"x\": 0.5050505050505051, \"y\": 0.8751500385908233, \"function\": \"Cosine\"}, {\"x\": 0.6060606060606061, \"y\": 0.82189840263017, \"function\": \"Cosine\"}, {\"x\": 0.7070707070707071, \"y\": 0.7602680316591506, \"function\": \"Cosine\"}, {\"x\": 0.8080808080808081, \"y\": 0.6908872083770674, \"function\": \"Cosine\"}, {\"x\": 0.9090909090909091, \"y\": 0.6144632264484674, \"function\": \"Cosine\"}, {\"x\": 1.0101010101010102, \"y\": 0.5317751800910392, \"function\": \"Cosine\"}, {\"x\": 1.1111111111111112, \"y\": 0.4436660217022285, \"function\": \"Cosine\"}, {\"x\": 1.2121212121212122, \"y\": 0.3510339684920502, \"function\": \"Cosine\"}, {\"x\": 1.3131313131313131, \"y\": 0.25482334572604864, \"function\": \"Cosine\"}, {\"x\": 1.4141414141414141, \"y\": 0.15601495992575853, \"function\": \"Cosine\"}, {\"x\": 1.5151515151515151, \"y\": 0.05561610016580674, \"function\": \"Cosine\"}, {\"x\": 1.6161616161616161, \"y\": -0.04534973060188524, \"function\": \"Cosine\"}, {\"x\": 1.7171717171717171, \"y\": -0.1458532495141353, \"function\": \"Cosine\"}, {\"x\": 1.8181818181818181, \"y\": -0.24486988668507892, \"function\": \"Cosine\"}, {\"x\": 1.9191919191919191, \"y\": -0.3413902300489206, \"function\": \"Cosine\"}, {\"x\": 2.0202020202020203, \"y\": -0.43443031567828566, \"function\": \"Cosine\"}, {\"x\": 2.121212121212121, \"y\": -0.5230416586748752, \"function\": \"Cosine\"}, {\"x\": 2.2222222222222223, \"y\": -0.6063209223738354, \"function\": \"Cosine\"}, {\"x\": 2.323232323232323, \"y\": -0.6834191272904034, \"function\": \"Cosine\"}, {\"x\": 2.4242424242424243, \"y\": -0.7535503059294446, \"function\": \"Cosine\"}, {\"x\": 2.525252525252525, \"y\": -0.815999515227557, \"function\": \"Cosine\"}, {\"x\": 2.6262626262626263, \"y\": -0.8701301249459654, \"function\": \"Cosine\"}, {\"x\": 2.727272727272727, \"y\": -0.9153903077136358, \"function\": \"Cosine\"}, {\"x\": 2.8282828282828283, \"y\": -0.9513186645587279, \"function\": \"Cosine\"}, {\"x\": 2.929292929292929, \"y\": -0.9775489285796396, \"function\": \"Cosine\"}, {\"x\": 3.0303030303030303, \"y\": -0.993813698804694, \"function\": \"Cosine\"}, {\"x\": 3.131313131313131, \"y\": -0.9999471661761239, \"function\": \"Cosine\"}, {\"x\": 3.2323232323232323, \"y\": -0.9958868038686729, \"function\": \"Cosine\"}, {\"x\": 3.3333333333333335, \"y\": -0.981674004711079, \"function\": \"Cosine\"}, {\"x\": 3.4343434343434343, \"y\": -0.9574536592123348, \"function\": \"Cosine\"}, {\"x\": 3.5353535353535355, \"y\": -0.9234726784944765, \"function\": \"Cosine\"}, {\"x\": 3.6363636363636362, \"y\": -0.8800774771896732, \"function\": \"Cosine\"}, {\"x\": 3.7373737373737375, \"y\": -0.8277104419618857, \"function\": \"Cosine\"}, {\"x\": 3.8383838383838382, \"y\": -0.7669054216542901, \"function\": \"Cosine\"}, {\"x\": 3.9393939393939394, \"y\": -0.69828228503756, \"function\": \"Cosine\"}, {\"x\": 4.040404040404041, \"y\": -0.6225406016393301, \"function\": \"Cosine\"}, {\"x\": 4.141414141414141, \"y\": -0.5404525100747903, \"function\": \"Cosine\"}, {\"x\": 4.242424242424242, \"y\": -0.45285484658127084, \"function\": \"Cosine\"}, {\"x\": 4.343434343434343, \"y\": -0.3606406140014481, \"function\": \"Cosine\"}, {\"x\": 4.444444444444445, \"y\": -0.2647498781834829, \"function\": \"Cosine\"}, {\"x\": 4.545454545454545, \"y\": -0.16616018460355267, \"function\": \"Cosine\"}, {\"x\": 4.646464646464646, \"y\": -0.06587659290724678, \"function\": \"Cosine\"}, {\"x\": 4.747474747474747, \"y\": 0.03507856903860484, \"function\": \"Cosine\"}, {\"x\": 4.848484848484849, \"y\": 0.13567612713271912, \"function\": \"Cosine\"}, {\"x\": 4.94949494949495, \"y\": 0.23489055281917826, \"function\": \"Cosine\"}, {\"x\": 5.05050505050505, \"y\": 0.33171041770321597, \"function\": \"Cosine\"}, {\"x\": 5.151515151515151, \"y\": 0.42514870442477243, \"function\": \"Cosine\"}, {\"x\": 5.252525252525253, \"y\": 0.5142528686769626, \"function\": \"Cosine\"}, {\"x\": 5.353535353535354, \"y\": 0.5981145497935533, \"function\": \"Cosine\"}, {\"x\": 5.454545454545454, \"y\": 0.6758788309121296, \"function\": \"Cosine\"}, {\"x\": 5.555555555555555, \"y\": 0.7467529543114478, \"function\": \"Cosine\"}, {\"x\": 5.656565656565657, \"y\": 0.810014403075603, \"function\": \"Cosine\"}, {\"x\": 5.757575757575758, \"y\": 0.865018266697566, \"function\": \"Cosine\"}, {\"x\": 5.858585858585858, \"y\": 0.9112038155344026, \"function\": \"Cosine\"}, {\"x\": 5.959595959595959, \"y\": 0.9481002170917641, \"function\": \"Cosine\"}, {\"x\": 6.0606060606060606, \"y\": 0.9753313358637337, \"function\": \"Cosine\"}, {\"x\": 6.161616161616162, \"y\": 0.9926195677967009, \"function\": \"Cosine\"}, {\"x\": 6.262626262626262, \"y\": 0.9997886702873213, \"function\": \"Cosine\"}, {\"x\": 6.363636363636363, \"y\": 0.9967655588645231, \"function\": \"Cosine\"}, {\"x\": 6.4646464646464645, \"y\": 0.983581052239521, \"function\": \"Cosine\"}, {\"x\": 6.565656565656566, \"y\": 0.9603695581285238, \"function\": \"Cosine\"}, {\"x\": 6.666666666666667, \"y\": 0.9273677030509753, \"function\": \"Cosine\"}, {\"x\": 6.767676767676767, \"y\": 0.8849119200716687, \"function\": \"Cosine\"}, {\"x\": 6.8686868686868685, \"y\": 0.8334350190781794, \"function\": \"Cosine\"}, {\"x\": 6.96969696969697, \"y\": 0.7734617745574747, \"function\": \"Cosine\"}, {\"x\": 7.070707070707071, \"y\": 0.7056035758515253, \"function\": \"Cosine\"}, {\"x\": 7.171717171717171, \"y\": 0.6305521944291881, \"function\": \"Cosine\"}, {\"x\": 7.2727272727272725, \"y\": 0.5490727317130796, \"function\": \"Cosine\"}, {\"x\": 7.373737373737374, \"y\": 0.4619958193539013, \"function\": \"Cosine\"}, {\"x\": 7.474747474747475, \"y\": 0.3702091514654802, \"function\": \"Cosine\"}, {\"x\": 7.575757575757575, \"y\": 0.2746484351440477, \"function\": \"Cosine\"}, {\"x\": 7.6767676767676765, \"y\": 0.17628785152548898, \"function\": \"Cosine\"}, {\"x\": 7.777777777777778, \"y\": 0.07613012462407193, \"function\": \"Cosine\"}, {\"x\": 7.878787878787879, \"y\": -0.02480370080544784, \"function\": \"Cosine\"}, {\"x\": 7.979797979797979, \"y\": -0.12548466817409182, \"function\": \"Cosine\"}, {\"x\": 8.080808080808081, \"y\": -0.22488639862108173, \"function\": \"Cosine\"}, {\"x\": 8.181818181818182, \"y\": -0.3219955542979381, \"function\": \"Cosine\"}, {\"x\": 8.282828282828282, \"y\": -0.41582216870771727, \"function\": \"Cosine\"}, {\"x\": 8.383838383838384, \"y\": -0.5054097387880672, \"function\": \"Cosine\"}, {\"x\": 8.484848484848484, \"y\": -0.5898449758557073, \"function\": \"Cosine\"}, {\"x\": 8.585858585858587, \"y\": -0.6682671160076288, \"function\": \"Cosine\"}, {\"x\": 8.686868686868687, \"y\": -0.7398766950653171, \"function\": \"Cosine\"}, {\"x\": 8.787878787878787, \"y\": -0.80394369860703, \"function\": \"Cosine\"}, {\"x\": 8.88888888888889, \"y\": -0.859815004003662, \"function\": \"Cosine\"}, {\"x\": 8.98989898989899, \"y\": -0.9069210385913591, \"function\": \"Cosine\"}, {\"x\": 9.09090909090909, \"y\": -0.9447815861050266, \"function\": \"Cosine\"}, {\"x\": 9.191919191919192, \"y\": -0.973010682179788, \"function\": \"Cosine\"}, {\"x\": 9.292929292929292, \"y\": -0.9913205490138658, \"function\": \"Cosine\"}, {\"x\": 9.393939393939394, \"y\": -0.9995245290814802, \"function\": \"Cosine\"}, {\"x\": 9.494949494949495, \"y\": -0.9975389879884077, \"function\": \"Cosine\"}, {\"x\": 9.595959595959595, \"y\": -0.9853841670717991, \"function\": \"Cosine\"}, {\"x\": 9.696969696969697, \"y\": -0.9631839770525324, \"function\": \"Cosine\"}, {\"x\": 9.797979797979798, \"y\": -0.9311647348436916, \"function\": \"Cosine\"}, {\"x\": 9.8989898989899, \"y\": -0.8896528563926016, \"function\": \"Cosine\"}, {\"x\": 10.0, \"y\": -0.8390715290764524, \"function\": \"Cosine\"}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n### Heatmap\n\n**Matplotlib:**\n\n::: {#c475b347 .cell execution_count=13}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.rand(10, 12)\n\nplt.figure(figsize=(10, 8))\nplt.imshow(data, cmap='viridis')\nplt.colorbar(label='Value')\nplt.title('Matplotlib Heatmap')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=775 height=611}\n:::\n:::\n\n\n**Seaborn:**\n\n::: {#d27048f9 .cell execution_count=14}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.rand(10, 12)\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(data, annot=True, cmap='viridis', fmt='.2f')\nplt.title('Seaborn Heatmap')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-1.png){width=741 height=657}\n:::\n:::\n\n\n**Altair:**\n\n::: {#783b8d73 .cell execution_count=15}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data\ndata = np.random.rand(10, 12)\ndf = pd.DataFrame(data)\n\n# Reshape for Altair\ndf_long = df.reset_index().melt(id_vars='index')\ndf_long.columns = ['y', 'x', 'value']\n\nalt.Chart(df_long).mark_rect().encode(\n    x='x:O',\n    y='y:O',\n    color='value:Q'\n).properties(\n    width=500,\n    height=400,\n    title='Altair Heatmap'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n\n<style>\n  #altair-viz-478d9462201a481c8db30234f539506f.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-478d9462201a481c8db30234f539506f.vega-embed details,\n  #altair-viz-478d9462201a481c8db30234f539506f.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-478d9462201a481c8db30234f539506f\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-478d9462201a481c8db30234f539506f\") {\n      outputDiv = document.getElementById(\"altair-viz-478d9462201a481c8db30234f539506f\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-ab2a7504bc914a2c64f3c1a41a3073be\"}, \"mark\": {\"type\": \"rect\"}, \"encoding\": {\"color\": {\"field\": \"value\", \"type\": \"quantitative\"}, \"x\": {\"field\": \"x\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"y\", \"type\": \"ordinal\"}}, \"height\": 400, \"title\": \"Altair Heatmap\", \"width\": 500, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-ab2a7504bc914a2c64f3c1a41a3073be\": [{\"y\": 0, \"x\": 0, \"value\": 0.10800568885468209}, {\"y\": 1, \"x\": 0, \"value\": 0.4922063730858426}, {\"y\": 2, \"x\": 0, \"value\": 0.19365432626082113}, {\"y\": 3, \"x\": 0, \"value\": 0.9023600333529567}, {\"y\": 4, \"x\": 0, \"value\": 0.8380584213310053}, {\"y\": 5, \"x\": 0, \"value\": 0.32773499718608823}, {\"y\": 6, \"x\": 0, \"value\": 0.4919218844119234}, {\"y\": 7, \"x\": 0, \"value\": 0.20870929239608926}, {\"y\": 8, \"x\": 0, \"value\": 0.5219557238763196}, {\"y\": 9, \"x\": 0, \"value\": 0.38570227291545944}, {\"y\": 0, \"x\": 1, \"value\": 0.5252198225142414}, {\"y\": 1, \"x\": 1, \"value\": 0.9251115728039577}, {\"y\": 2, \"x\": 1, \"value\": 0.2079818744082892}, {\"y\": 3, \"x\": 1, \"value\": 0.8583826037944765}, {\"y\": 4, \"x\": 1, \"value\": 0.8782348531268547}, {\"y\": 5, \"x\": 1, \"value\": 0.7983576712189636}, {\"y\": 6, \"x\": 1, \"value\": 0.9543802456417321}, {\"y\": 7, \"x\": 1, \"value\": 0.1467799995310134}, {\"y\": 8, \"x\": 1, \"value\": 0.8483098577286736}, {\"y\": 9, \"x\": 1, \"value\": 0.167097022461432}, {\"y\": 0, \"x\": 2, \"value\": 0.40262781947331905}, {\"y\": 1, \"x\": 2, \"value\": 0.5396740842117461}, {\"y\": 2, \"x\": 2, \"value\": 0.03884611429139673}, {\"y\": 3, \"x\": 2, \"value\": 0.5985772989814167}, {\"y\": 4, \"x\": 2, \"value\": 0.9221499762865623}, {\"y\": 5, \"x\": 2, \"value\": 0.748610467032221}, {\"y\": 6, \"x\": 2, \"value\": 0.5588085691199333}, {\"y\": 7, \"x\": 2, \"value\": 0.9385470731924178}, {\"y\": 8, \"x\": 2, \"value\": 0.09553445298207486}, {\"y\": 9, \"x\": 2, \"value\": 0.6134607016978801}, {\"y\": 0, \"x\": 3, \"value\": 0.33523009938339776}, {\"y\": 1, \"x\": 3, \"value\": 0.1572328826183268}, {\"y\": 2, \"x\": 3, \"value\": 0.49911506885613577}, {\"y\": 3, \"x\": 3, \"value\": 0.33886953447031565}, {\"y\": 4, \"x\": 3, \"value\": 0.08925955884240067}, {\"y\": 5, \"x\": 3, \"value\": 0.22396753564971272}, {\"y\": 6, \"x\": 3, \"value\": 0.09961464736633252}, {\"y\": 7, \"x\": 3, \"value\": 0.724564065438945}, {\"y\": 8, \"x\": 3, \"value\": 0.5012439472775205}, {\"y\": 9, \"x\": 3, \"value\": 0.5566570142467401}, {\"y\": 0, \"x\": 4, \"value\": 0.1346339316250228}, {\"y\": 1, \"x\": 4, \"value\": 0.527082657650651}, {\"y\": 2, \"x\": 4, \"value\": 0.2590436992850743}, {\"y\": 3, \"x\": 4, \"value\": 0.3090117547690432}, {\"y\": 4, \"x\": 4, \"value\": 0.1360086771687986}, {\"y\": 5, \"x\": 4, \"value\": 0.1377346644751497}, {\"y\": 6, \"x\": 4, \"value\": 0.5115865993988866}, {\"y\": 7, \"x\": 4, \"value\": 0.02629688044146572}, {\"y\": 8, \"x\": 4, \"value\": 0.4724554445806991}, {\"y\": 9, \"x\": 4, \"value\": 0.7140123358048466}, {\"y\": 0, \"x\": 5, \"value\": 0.7212990783568398}, {\"y\": 1, \"x\": 5, \"value\": 0.25752939840805333}, {\"y\": 2, \"x\": 5, \"value\": 0.08861689992937805}, {\"y\": 3, \"x\": 5, \"value\": 0.8714304478226472}, {\"y\": 4, \"x\": 5, \"value\": 0.020241261495921092}, {\"y\": 5, \"x\": 5, \"value\": 0.9272341901874324}, {\"y\": 6, \"x\": 5, \"value\": 0.08953057473286319}, {\"y\": 7, \"x\": 5, \"value\": 0.4597548978493906}, {\"y\": 8, \"x\": 5, \"value\": 0.1337835204502964}, {\"y\": 9, \"x\": 5, \"value\": 0.49959484850686553}, {\"y\": 0, \"x\": 6, \"value\": 0.8432293308537429}, {\"y\": 1, \"x\": 6, \"value\": 0.6847865255489081}, {\"y\": 2, \"x\": 6, \"value\": 0.5304167780500111}, {\"y\": 3, \"x\": 6, \"value\": 0.3655108595506502}, {\"y\": 4, \"x\": 6, \"value\": 0.8982522975522879}, {\"y\": 5, \"x\": 6, \"value\": 0.9067201652454773}, {\"y\": 6, \"x\": 6, \"value\": 0.03757025719149687}, {\"y\": 7, \"x\": 6, \"value\": 0.11403850800021442}, {\"y\": 8, \"x\": 6, \"value\": 0.3836183608305165}, {\"y\": 9, \"x\": 6, \"value\": 0.6544847670656105}, {\"y\": 0, \"x\": 7, \"value\": 0.055822271730057826}, {\"y\": 1, \"x\": 7, \"value\": 0.721841050895752}, {\"y\": 2, \"x\": 7, \"value\": 0.34081059683200476}, {\"y\": 3, \"x\": 7, \"value\": 0.34985336878517626}, {\"y\": 4, \"x\": 7, \"value\": 0.9101130879886562}, {\"y\": 5, \"x\": 7, \"value\": 0.27280208936982586}, {\"y\": 6, \"x\": 7, \"value\": 0.8935208335058188}, {\"y\": 7, \"x\": 7, \"value\": 0.4232020333095514}, {\"y\": 8, \"x\": 7, \"value\": 0.4310580286209261}, {\"y\": 9, \"x\": 7, \"value\": 0.55640060702138}, {\"y\": 0, \"x\": 8, \"value\": 0.7915120409345189}, {\"y\": 1, \"x\": 8, \"value\": 0.9271290364359404}, {\"y\": 2, \"x\": 8, \"value\": 0.8942508937556167}, {\"y\": 3, \"x\": 8, \"value\": 0.6720869602918157}, {\"y\": 4, \"x\": 8, \"value\": 0.8270624283452217}, {\"y\": 5, \"x\": 8, \"value\": 0.4668046736734677}, {\"y\": 6, \"x\": 8, \"value\": 0.9651269218064958}, {\"y\": 7, \"x\": 8, \"value\": 0.459094395005162}, {\"y\": 8, \"x\": 8, \"value\": 0.2122690712612345}, {\"y\": 9, \"x\": 8, \"value\": 0.22688866068720026}, {\"y\": 0, \"x\": 9, \"value\": 0.9966981817862979}, {\"y\": 1, \"x\": 9, \"value\": 0.5167742435556306}, {\"y\": 2, \"x\": 9, \"value\": 0.2573510399036013}, {\"y\": 3, \"x\": 9, \"value\": 0.011571947064205612}, {\"y\": 4, \"x\": 9, \"value\": 0.7663783536641732}, {\"y\": 5, \"x\": 9, \"value\": 0.8966319550720849}, {\"y\": 6, \"x\": 9, \"value\": 0.8271856755541602}, {\"y\": 7, \"x\": 9, \"value\": 0.5308008072297111}, {\"y\": 8, \"x\": 9, \"value\": 0.11121202332448543}, {\"y\": 9, \"x\": 9, \"value\": 0.07281536861641569}, {\"y\": 0, \"x\": 10, \"value\": 0.07385106350790549}, {\"y\": 1, \"x\": 10, \"value\": 0.07303470072361773}, {\"y\": 2, \"x\": 10, \"value\": 0.6846826822313707}, {\"y\": 3, \"x\": 10, \"value\": 0.07977031449316685}, {\"y\": 4, \"x\": 10, \"value\": 0.30030205688648026}, {\"y\": 5, \"x\": 10, \"value\": 0.09330011436256169}, {\"y\": 6, \"x\": 10, \"value\": 0.4599273547668655}, {\"y\": 7, \"x\": 10, \"value\": 0.09383547625619171}, {\"y\": 8, \"x\": 10, \"value\": 0.12376808338700118}, {\"y\": 9, \"x\": 10, \"value\": 0.6803792212999012}, {\"y\": 0, \"x\": 11, \"value\": 0.1538225992183413}, {\"y\": 1, \"x\": 11, \"value\": 0.12743003164312172}, {\"y\": 2, \"x\": 11, \"value\": 0.4341650137357601}, {\"y\": 3, \"x\": 11, \"value\": 0.7793010397114037}, {\"y\": 4, \"x\": 11, \"value\": 0.3309961631297381}, {\"y\": 5, \"x\": 11, \"value\": 0.8265861374956592}, {\"y\": 6, \"x\": 11, \"value\": 0.7615666494722522}, {\"y\": 7, \"x\": 11, \"value\": 0.27171017839604616}, {\"y\": 8, \"x\": 11, \"value\": 0.8940216587522074}, {\"y\": 9, \"x\": 11, \"value\": 0.3332321547178603}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n## Decision Framework for Choosing a Library\n\n### Choose Matplotlib when:\n- You need complete control over every detail of your visualization\n- You're creating complex, custom plots\n- Your visualizations will be included in scientific publications\n- You're working with very large datasets\n- You need to create animations or specialized chart types\n\n### Choose Seaborn when:\n- You want attractive plots with minimal code\n- You're performing statistical analysis\n- You want to create common statistical plots quickly\n- You need to visualize relationships between variables\n- You want good-looking defaults but still need some customization\n\n### Choose Altair when:\n- You want interactive visualizations\n- You prefer a declarative approach to visualization\n- You want concise, readable code\n- You're creating dashboards or web-based visualizations\n- You're working with small to medium-sized datasets\n\n## Integration Examples\n\n### Combining Seaborn with Matplotlib:\n\n::: {#7d228731 .cell execution_count=16}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\n\n# Create sample data\nnp.random.seed(42)\ndata = pd.DataFrame({\n    'x': np.random.normal(0, 1, 100),\n    'y': np.random.normal(0, 1, 100),\n    'category': np.random.choice(['A', 'B', 'C'], 100)\n})\n\n# Create a figure with Matplotlib\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Use Seaborn for the main plot\nsns.scatterplot(data=data, x='x', y='y', hue='category', ax=ax)\n\n# Add Matplotlib customizations\nax.set_title('Combining Matplotlib and Seaborn', fontsize=16)\nax.grid(True, linestyle='--', alpha=0.7)\nax.set_xlabel('X Variable', fontsize=12)\nax.set_ylabel('Y Variable', fontsize=12)\n\n# Add annotations using Matplotlib\nax.annotate('Interesting Point', xy=(-1, 1), xytext=(-2, 1.5),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){width=944 height=561}\n:::\n:::\n\n\n### Using Altair with Pandas:\n\n::: {#6e31cd42 .cell execution_count=17}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\n# Create sample data with pandas\nnp.random.seed(42)\ndf = pd.DataFrame({\n    'date': pd.date_range('2023-01-01', periods=100),\n    'value': np.cumsum(np.random.randn(100)),\n    'category': np.random.choice(['Group A', 'Group B'], 100)\n})\n\n# Use pandas to prepare the data\ndf['month'] = df['date'].dt.month\nmonthly_avg = df.groupby(['month', 'category'])['value'].mean().reset_index()\n\n# Create the Altair visualization\nchart = alt.Chart(monthly_avg).mark_line(point=True).encode(\n    x='month:O',\n    y='value:Q',\n    color='category:N',\n    tooltip=['month', 'value', 'category']\n).properties(\n    width=600,\n    height=400,\n    title='Monthly Averages by Category'\n).interactive()\n\nchart\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n\n<style>\n  #altair-viz-e46e3703d9d044b49758b5000a9b0529.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-e46e3703d9d044b49758b5000a9b0529.vega-embed details,\n  #altair-viz-e46e3703d9d044b49758b5000a9b0529.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-e46e3703d9d044b49758b5000a9b0529\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-e46e3703d9d044b49758b5000a9b0529\") {\n      outputDiv = document.getElementById(\"altair-viz-e46e3703d9d044b49758b5000a9b0529\");\n    }\n\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      let deps = [\"vega-embed\"];\n      require(deps, displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-a541d48ae4ddcdd5651af34b355e0012\"}, \"mark\": {\"type\": \"line\", \"point\": true}, \"encoding\": {\"color\": {\"field\": \"category\", \"type\": \"nominal\"}, \"tooltip\": [{\"field\": \"month\", \"type\": \"quantitative\"}, {\"field\": \"value\", \"type\": \"quantitative\"}, {\"field\": \"category\", \"type\": \"nominal\"}], \"x\": {\"field\": \"month\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"value\", \"type\": \"quantitative\"}}, \"height\": 400, \"params\": [{\"name\": \"param_2\", \"select\": {\"type\": \"interval\", \"encodings\": [\"x\", \"y\"]}, \"bind\": \"scales\"}], \"title\": \"Monthly Averages by Category\", \"width\": 600, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-a541d48ae4ddcdd5651af34b355e0012\": [{\"month\": 1, \"category\": \"Group A\", \"value\": -1.1687602478608594}, {\"month\": 1, \"category\": \"Group B\", \"value\": 0.1733373892143235}, {\"month\": 2, \"category\": \"Group A\", \"value\": -8.844550443778122}, {\"month\": 2, \"category\": \"Group B\", \"value\": -8.735931823731262}, {\"month\": 3, \"category\": \"Group A\", \"value\": -8.844299433609882}, {\"month\": 3, \"category\": \"Group B\", \"value\": -9.455147207445952}, {\"month\": 4, \"category\": \"Group A\", \"value\": -9.520630718321136}, {\"month\": 4, \"category\": \"Group B\", \"value\": -9.494528166538776}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n## Performance Comparison\n\nFor libraries like Matplotlib, Seaborn, and Altair, performance can vary widely depending on the size of your dataset and the complexity of your visualization. Here's a general overview:\n\n### Small Datasets (< 1,000 points):\n- All three libraries perform well\n- Altair might have slightly more overhead due to its JSON specification generation\n\n### Medium Datasets (1,000 - 10,000 points):\n- Matplotlib and Seaborn continue to perform well\n- Altair starts to slow down but remains usable\n\n### Large Datasets (> 10,000 points):\n- Matplotlib performs best for large static visualizations\n- Seaborn becomes slower as it adds statistical computations\n- Altair significantly slows down and may require data aggregation\n\n### Recommended Approaches for Large Data:\n1. **Matplotlib**: Use `plot()` instead of `scatter()` for line plots, or try `hexbin()` for density plots\n2. **Seaborn**: Use `sample()` or aggregation methods before plotting\n3. **Altair**: Use `transform_sample()` or pre-aggregate your data\n\n## Conclusion\n\nThe Python visualization ecosystem offers tools for every need, from low-level control to high-level abstraction:\n\n- **Matplotlib** provides ultimate flexibility and control but requires more code and knowledge\n- **Seaborn** offers a perfect middle ground with statistical integration and clean defaults\n- **Altair** delivers a concise, declarative approach with built-in interactivity\n\nRather than picking just one library, consider becoming familiar with all three and selecting the right tool for each visualization task. Many data scientists use a combination of these libraries, leveraging the strengths of each one as needed.\n\nFor those just starting, Seaborn provides a gentle entry point with attractive results for common visualization needs. As your skills advance, you can incorporate Matplotlib for customization and Altair for interactive visualizations.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}