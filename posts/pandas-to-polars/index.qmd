---
title: "From Pandas to Polars"
author: "Krishnatheja Vanka"
date: "2025-05-19"
categories: [code, tutorial]
format:
  html:
    code-fold: false
execute:
  echo: true
  timing: true
jupyter: python3
---

# üêº From Pandas to Polars üêª‚Äç‚ùÑÔ∏è

![](pvp.jpg)

As datasets grow in size and complexity, performance and efficiency become critical in data processing. While Pandas has long been the go-to library for data manipulation in Python, it can struggle with speed and memory usage, especially on large datasets. Polars, a newer DataFrame library written in Rust, offers a faster, more memory-efficient alternative with support for lazy evaluation and multi-threading.

This guide explores how to convert Pandas DataFrames to Polars, and highlights key differences in syntax, performance, and functionality. Whether you're looking to speed up your data workflows or just exploring modern tools, understanding the transition from Pandas to Polars is a valuable step.

## 1. Import libraries

```{python}
import numpy as np

import pandas as pd
import polars as pl

```

## 2. Create dummy data

```{python}

data = {
  'birds': ['Cranes', 'Cranes', 'plovers', 'spoonbills', 'spoonbills', 'Cranes', 'plovers', 'Cranes', 'spoonbills', 'spoonbills'],
  'age': [3.5, 4, 1.5, np.nan, 6, 3, 5.5, np.nan, 8, 4],
  'visits': [2, 4, 3, 4, 3, 4, 2, 2, 3, 2],
  'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']
}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```

## 3. Create Pandas DataFrame
```{python}
pandas_df = pd.DataFrame(data, index=labels)
pandas_df
```
## 4. Create Polars DataFrame
```{python}
polars_df = pl.DataFrame(data)
polars_df = polars_df.with_columns(pl.Series(name='index', values=labels))
polars_df
```

## 5. Display a summary of the basic information about birds DataFrame and its data. 
The method `describe()` shows different statistical data for numeric columns (like age) and columns with strings or timestamps (like priority, which is treated as a string column in pandas).
It is the same for both pandas and polars.
```{python}
pandas_df.describe()
```
```{python}
polars_df.describe()
```

## 6. Print the first 2 rows of the birds dataframe
The method `head()` displays the first 5 rows of the DataFrame. It is the same for both pandas and polars. Including a number in the method `head()` will display the first n rows of the DataFrame.
```{python}
pandas_df.head(2)
```
```{python}
polars_df.head(2)
```
## 7. Display the last 3 rows of the birds dataframe
The method `tail()` displays the last 5 rows of the DataFrame. It is the same for both pandas and polars. Including a number in the method `tail()` will display the last n rows of the DataFrame.
```{python}
pandas_df.tail(3)
```
```{python}
polars_df.tail(3)
```

## 8. Select only the 'birds' and 'age' columns from the DataFrame.
In pandas, you can use the `[]` operator to select columns by name. In polars, you can use the `select()` method to select columns by name.

```{python}
pandas_df[['birds', 'age']] 
```
```{python}
polars_df.select(['index', 'birds', 'age'])
```

## 9. Select [2, 3, 7] rows and in columns ['birds', 'age', 'visits']
In pandas, you can use the `iloc` method to select rows and columns by index. In polars, you can use the `[]` operator to select rows and columns by index.
The following code selects rows 2, 3, and 7 and columns 'birds', 'age', and 'visits' from the polars DataFrame. The output shows the values in those cells.
```{python}
pandas_df[['birds','age','visits']].iloc[[2,3,7]]
```
```{python}
polars_df[[2,3,7]].select(["index", "birds", "age", "visits"])
```

## 10. Select the rows where the number of visits is less than 4
In pandas, you can use the `loc` method to select rows based on a boolean condition. In polars, you can use the `filter()` method to select rows based on a boolean condition.
```{python}
pandas_df.loc[pandas_df['visits'] < 4]
```
```{python}
polars_df.filter(pl.col('visits') < 4)
```
## 11. Select the rows with columns ['birds', 'visits'] where the age is missing i.e NaN
In pandas, you can use the `isnull()` method to check for missing values and then use the `loc` method to select rows based on a boolean condition. In polars, you can use the `filter()` method to select rows based on a boolean condition.
```{python}
pandas_df.loc[pandas_df['age'].isnull(), ['birds', 'visits']]
```
```{python}
polars_df.filter(pl.col('age').is_nan()).select(['index', 'birds', 'visits'])
```

## 12. Select the rows where the birds is a Cranes and the age is less than 4
```{python}
pandas_df.loc[(pandas_df['birds'] == 'Cranes') & (pandas_df['age'] < 4)]
```
```{python}
polars_df.filter((pl.col('birds') == 'Cranes') & (pl.col('age') < 4))
```
## 13 .Select the rows the age is between 2 and 4(inclusive)  
```{python}
pandas_df.loc[pandas_df['age'].between(2, 4)]
```
```{python}
polars_df.filter(pl.col('age').is_between(2, 4))
```

## 14. Find the total number of visits of the bird Cranes
```{python}
pandas_df.loc[pandas_df['birds'] == 'Cranes', 'visits'].sum()
```
```{python}
polars_df.filter(pl.col('birds') == 'Cranes').select(pl.col('visits').sum())
``` 

## 15. Calculate the mean age for each different birds in dataframe.
```{python}
pandas_df.groupby('birds')['age'].mean()
```
```{python}
polars_df.group_by('birds').agg(pl.col('age').mean())
```

## 16. Append a new row 'k' to dataframe with your choice of values for each column. Then delete that row to return the original DataFrame.
### a. Creating new data row
```{python}
new_data = {
  'birds': 'Cranes',
  'age': 7.0,
  'visits': 2,
  'priority': 'yes'
}
```

### b. Append new row to pandas dataframe
```{python}
_df = pd.DataFrame(new_data, index=['k'])
pandas_df = pd.concat([pandas_df, _df])
pandas_df
```

### c. Delete new row from pandas dataframe
```{python}
pandas_df = pandas_df.drop('k')
pandas_df
```

### d. Append new row to polars dataframe
```{python}
new_data['index'] = 'k'
_df = pl.DataFrame(new_data)
polars_df = pl.concat([polars_df, _df])
polars_df
```
### e. Delete new row from polars dataframe
```{python}
polars_df = polars_df.filter(pl.col('index') != 'k')
polars_df
```

## 17. Find the number of each type of birds in dataframe (Counts)
```{python}
pandas_df['birds'].value_counts()
```
```{python}
polars_df.group_by('birds').len()
```

## 18. Sort dataframe (birds) first by the values in the 'age' in decending order, then by the value in the 'visits' column in ascending order.
```{python}
pandas_df.sort_values(by=['age', 'visits'], ascending=[False, True])
```
```{python}
polars_df.sort(['age', 'visits'], descending=[True, False])
``` 

# References
```{bibliography}
https://docs.pola.rs/user-guide/getting-started/
https://pandas.pydata.org/docs/getting_started/tutorials.html
```

